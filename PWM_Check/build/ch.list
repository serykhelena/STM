
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 f89f 	bl	201360 <__core_init>
  200222:	f000 ff9d 	bl	201160 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 f839 	bl	2012e0 <__init_ram_areas>
  20026e:	f001 f86f 	bl	201350 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fcc5 	bl	200c10 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 b853 	b.w	201340 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	0800147c 	.word	0x0800147c
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020054 	.word	0x20020054
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000924 	.word	0x20000924
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f000 ffae 	bl	201250 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 ffd4 	bl	2012a0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <_pal_lld_setgroupmode.constprop.3>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  200300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200304:	2502      	movs	r5, #2
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200306:	2100      	movs	r1, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  200308:	f04f 080f 	mov.w	r8, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20030c:	4c1f      	ldr	r4, [pc, #124]	; (20038c <_pal_lld_setgroupmode.constprop.3+0x8c>)
      altrmask = altr << ((bit & 7) * 4);
  20030e:	46ac      	mov	ip, r5
      m1 = 1 << bit;
  200310:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  200314:	2703      	movs	r7, #3
  200316:	e00f      	b.n	200338 <_pal_lld_setgroupmode.constprop.3+0x38>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200318:	6a26      	ldr	r6, [r4, #32]
  20031a:	ea26 0202 	bic.w	r2, r6, r2
  20031e:	ea42 0209 	orr.w	r2, r2, r9
  200322:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  200324:	6822      	ldr	r2, [r4, #0]
  200326:	4013      	ands	r3, r2
  200328:	432b      	orrs	r3, r5
  20032a:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20032c:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  20032e:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  200332:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  200336:	d027      	beq.n	200388 <_pal_lld_setgroupmode.constprop.3+0x88>
      m2 = 3 << (bit * 2);
  200338:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20033a:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  20033e:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  200342:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  200346:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20034a:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20034e:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  200352:	d0eb      	beq.n	20032c <_pal_lld_setgroupmode.constprop.3+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200354:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  200358:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  20035a:	fa0c f902 	lsl.w	r9, ip, r2
      m4 = 15 << ((bit & 7) * 4);
  20035e:	fa08 f202 	lsl.w	r2, r8, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200362:	ea2a 0606 	bic.w	r6, sl, r6
  200366:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  200368:	68a6      	ldr	r6, [r4, #8]
  20036a:	ea06 0603 	and.w	r6, r6, r3
  20036e:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  200370:	68e6      	ldr	r6, [r4, #12]
  200372:	ea06 0603 	and.w	r6, r6, r3
  200376:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  200378:	d9ce      	bls.n	200318 <_pal_lld_setgroupmode.constprop.3+0x18>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20037a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20037c:	ea26 0202 	bic.w	r2, r6, r2
  200380:	ea42 0209 	orr.w	r2, r2, r9
  200384:	6262      	str	r2, [r4, #36]	; 0x24
  200386:	e7cd      	b.n	200324 <_pal_lld_setgroupmode.constprop.3+0x24>
  }
}
  200388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20038c:	40020c00 	.word	0x40020c00

00200390 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
  200390:	4a02      	ldr	r2, [pc, #8]	; (20039c <notify3+0xc>)
  200392:	6813      	ldr	r3, [r2, #0]
  200394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200398:	6013      	str	r3, [r2, #0]
  20039a:	4770      	bx	lr
  20039c:	40004800 	.word	0x40004800

002003a0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2003a0:	2320      	movs	r3, #32
  2003a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2003a6:	4b11      	ldr	r3, [pc, #68]	; (2003ec <_port_irq_epilogue+0x4c>)
  2003a8:	685b      	ldr	r3, [r3, #4]
  2003aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2003ae:	d102      	bne.n	2003b6 <_port_irq_epilogue+0x16>
  2003b0:	f383 8811 	msr	BASEPRI, r3
  2003b4:	4770      	bx	lr
void _port_irq_epilogue(void) {
  2003b6:	b480      	push	{r7}
  2003b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2003ba:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2003be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2003c2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2003c6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2003ca:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2003ce:	4a08      	ldr	r2, [pc, #32]	; (2003f0 <_port_irq_epilogue+0x50>)
  2003d0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2003d2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2003d4:	6889      	ldr	r1, [r1, #8]
  2003d6:	6892      	ldr	r2, [r2, #8]
  2003d8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2003da:	bf8c      	ite	hi
  2003dc:	4a05      	ldrhi	r2, [pc, #20]	; (2003f4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2003de:	4a06      	ldrls	r2, [pc, #24]	; (2003f8 <_port_irq_epilogue+0x58>)
  2003e0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003e4:	46bd      	mov	sp, r7
  2003e6:	bc80      	pop	{r7}
  2003e8:	4770      	bx	lr
  2003ea:	bf00      	nop
  2003ec:	e000ed00 	.word	0xe000ed00
  2003f0:	2000088c 	.word	0x2000088c
  2003f4:	002002f5 	.word	0x002002f5
  2003f8:	002002f8 	.word	0x002002f8
  2003fc:	00000000 	.word	0x00000000

00200400 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  200400:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  200402:	4d17      	ldr	r5, [pc, #92]	; (200460 <VectorB8+0x60>)
  200404:	69ab      	ldr	r3, [r5, #24]
  200406:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200408:	68da      	ldr	r2, [r3, #12]
  20040a:	4014      	ands	r4, r2
  20040c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  20040e:	43d2      	mvns	r2, r2
  200410:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200412:	07a3      	lsls	r3, r4, #30
  200414:	d504      	bpl.n	200420 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
  200416:	686b      	ldr	r3, [r5, #4]
  200418:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  20041a:	b10b      	cbz	r3, 200420 <VectorB8+0x20>
    pwmp->config->channels[0].callback(pwmp);
  20041c:	4628      	mov	r0, r5
  20041e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200420:	0760      	lsls	r0, r4, #29
  200422:	d504      	bpl.n	20042e <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  200424:	686b      	ldr	r3, [r5, #4]
  200426:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200428:	b10b      	cbz	r3, 20042e <VectorB8+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  20042a:	480d      	ldr	r0, [pc, #52]	; (200460 <VectorB8+0x60>)
  20042c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  20042e:	0721      	lsls	r1, r4, #28
  200430:	d504      	bpl.n	20043c <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  200432:	686b      	ldr	r3, [r5, #4]
  200434:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200436:	b10b      	cbz	r3, 20043c <VectorB8+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  200438:	4809      	ldr	r0, [pc, #36]	; (200460 <VectorB8+0x60>)
  20043a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  20043c:	06e2      	lsls	r2, r4, #27
  20043e:	d504      	bpl.n	20044a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200440:	686b      	ldr	r3, [r5, #4]
  200442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200444:	b10b      	cbz	r3, 20044a <VectorB8+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200446:	4806      	ldr	r0, [pc, #24]	; (200460 <VectorB8+0x60>)
  200448:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20044a:	07e3      	lsls	r3, r4, #31
  20044c:	d504      	bpl.n	200458 <VectorB8+0x58>
  20044e:	686b      	ldr	r3, [r5, #4]
  200450:	689b      	ldr	r3, [r3, #8]
  200452:	b10b      	cbz	r3, 200458 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
  200454:	4802      	ldr	r0, [pc, #8]	; (200460 <VectorB8+0x60>)
  200456:	4798      	blx	r3
}
  200458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  20045c:	f7ff bfa0 	b.w	2003a0 <_port_irq_epilogue>
  200460:	20000810 	.word	0x20000810
	...

00200470 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  200470:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200472:	4b0b      	ldr	r3, [pc, #44]	; (2004a0 <VectorB4+0x30>)
  200474:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200476:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200478:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20047a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20047c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20047e:	d107      	bne.n	200490 <VectorB4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200480:	2002      	movs	r0, #2
  200482:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200484:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200486:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200488:	68d1      	ldr	r1, [r2, #12]
  20048a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20048e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200490:	685b      	ldr	r3, [r3, #4]
  200492:	4803      	ldr	r0, [pc, #12]	; (2004a0 <VectorB4+0x30>)
  200494:	685b      	ldr	r3, [r3, #4]
  200496:	4798      	blx	r3
}
  200498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20049c:	f7ff bf80 	b.w	2003a0 <_port_irq_epilogue>
  2004a0:	20000800 	.word	0x20000800
	...

002004b0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
  2004b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  2004b4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  2004b8:	692b      	ldr	r3, [r5, #16]
  2004ba:	079b      	lsls	r3, r3, #30
  2004bc:	d403      	bmi.n	2004c6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
  2004be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  2004c2:	f7ff bf6d 	b.w	2003a0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  2004c6:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2004c8:	2620      	movs	r6, #32
  2004ca:	612f      	str	r7, [r5, #16]
  2004cc:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
  2004d0:	4c1b      	ldr	r4, [pc, #108]	; (200540 <VectorB0+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  2004d2:	6a68      	ldr	r0, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  2004d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  2004d6:	f104 081c 	add.w	r8, r4, #28
  vtp = ch.vtlist.next;
  2004da:	69e3      	ldr	r3, [r4, #28]
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  2004dc:	eba0 0e02 	sub.w	lr, r0, r2
  2004e0:	6899      	ldr	r1, [r3, #8]
  2004e2:	458e      	cmp	lr, r1
  2004e4:	d318      	bcc.n	200518 <VectorB0+0x68>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
  2004e6:	440a      	add	r2, r1

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004e8:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
  2004ea:	f8d3 900c 	ldr.w	r9, [r3, #12]
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2004ee:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
  2004f0:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004f2:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
  2004f6:	61e1      	str	r1, [r4, #28]
    vtp->func = NULL;
  2004f8:	60df      	str	r7, [r3, #12]
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2004fa:	d01f      	beq.n	20053c <VectorB0+0x8c>
  2004fc:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
  200500:	6918      	ldr	r0, [r3, #16]
  200502:	47c8      	blx	r9
  200504:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
  200508:	69e3      	ldr	r3, [r4, #28]
  20050a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  20050c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  20050e:	6899      	ldr	r1, [r3, #8]
  200510:	eba0 0e02 	sub.w	lr, r0, r2
  200514:	4571      	cmp	r1, lr
  200516:	d9e6      	bls.n	2004e6 <VectorB0+0x36>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  200518:	4543      	cmp	r3, r8
  20051a:	d008      	beq.n	20052e <VectorB0+0x7e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
  20051c:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  200522:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
  200524:	2a02      	cmp	r2, #2
  200526:	bf2c      	ite	cs
  200528:	1882      	addcs	r2, r0, r2
  20052a:	1c82      	addcc	r2, r0, #2
  20052c:	635a      	str	r2, [r3, #52]	; 0x34
  20052e:	2300      	movs	r3, #0
  200530:	f383 8811 	msr	BASEPRI, r3
}
  200534:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  200538:	f7ff bf32 	b.w	2003a0 <_port_irq_epilogue>
  STM32_ST_TIM->DIER = 0;
  20053c:	60ef      	str	r7, [r5, #12]
  20053e:	e7dd      	b.n	2004fc <VectorB0+0x4c>
  200540:	2000088c 	.word	0x2000088c
	...

00200550 <SVC_Handler>:
void SVC_Handler(void) {
  200550:	b480      	push	{r7}
  200552:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200554:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200558:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20055a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20055e:	2300      	movs	r3, #0
  200560:	f383 8811 	msr	BASEPRI, r3
}
  200564:	46bd      	mov	sp, r7
  200566:	bc80      	pop	{r7}
  200568:	4770      	bx	lr
  20056a:	bf00      	nop
  20056c:	0000      	movs	r0, r0
	...

00200570 <wakeup>:
  200570:	2320      	movs	r3, #32
  200572:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200576:	f890 3020 	ldrb.w	r3, [r0, #32]
  20057a:	2b07      	cmp	r3, #7
  20057c:	d80e      	bhi.n	20059c <wakeup+0x2c>
  20057e:	e8df f003 	tbb	[pc, r3]
  200582:	0d28      	.short	0x0d28
  200584:	0408240d 	.word	0x0408240d
  200588:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20058a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20058c:	6893      	ldr	r3, [r2, #8]
  20058e:	3301      	adds	r3, #1
  200590:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200592:	e890 000c 	ldmia.w	r0, {r2, r3}
  200596:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200598:	6802      	ldr	r2, [r0, #0]
  20059a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20059c:	2200      	movs	r2, #0
  20059e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  2005a0:	4b0e      	ldr	r3, [pc, #56]	; (2005dc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  2005a2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  2005a6:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  2005a8:	f04f 34ff 	mov.w	r4, #4294967295
  2005ac:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  2005ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2005b0:	689a      	ldr	r2, [r3, #8]
  2005b2:	428a      	cmp	r2, r1
  2005b4:	d2fb      	bcs.n	2005ae <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  2005b6:	685a      	ldr	r2, [r3, #4]
  2005b8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  2005ba:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  2005bc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  2005be:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2005c0:	6058      	str	r0, [r3, #4]
  2005c2:	f381 8811 	msr	BASEPRI, r1
}
  2005c6:	bc10      	pop	{r4}
  2005c8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2005ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2005cc:	2200      	movs	r2, #0
  2005ce:	601a      	str	r2, [r3, #0]
  2005d0:	e7e4      	b.n	20059c <wakeup+0x2c>
  2005d2:	2300      	movs	r3, #0
  2005d4:	f383 8811 	msr	BASEPRI, r3
  2005d8:	4770      	bx	lr
  2005da:	bf00      	nop
  2005dc:	2000088c 	.word	0x2000088c

002005e0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2005e0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2005e2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2005e4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2005e6:	4b08      	ldr	r3, [pc, #32]	; (200608 <chSchReadyI+0x28>)
  2005e8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2005ea:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2005ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2005f0:	689a      	ldr	r2, [r3, #8]
  2005f2:	428a      	cmp	r2, r1
  2005f4:	d2fb      	bcs.n	2005ee <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2005f6:	685a      	ldr	r2, [r3, #4]
}
  2005f8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2005fa:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2005fc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2005fe:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200600:	605c      	str	r4, [r3, #4]
}
  200602:	bc10      	pop	{r4}
  200604:	4770      	bx	lr
  200606:	bf00      	nop
  200608:	2000088c 	.word	0x2000088c
  20060c:	00000000 	.word	0x00000000

00200610 <chEvtBroadcastFlagsI.constprop.19>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  200610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  200612:	4f17      	ldr	r7, [pc, #92]	; (200670 <chEvtBroadcastFlagsI.constprop.19+0x60>)
  200614:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  200618:	42bc      	cmp	r4, r7
  20061a:	d021      	beq.n	200660 <chEvtBroadcastFlagsI.constprop.19+0x50>
  20061c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20061e:	2600      	movs	r6, #0
  200620:	e002      	b.n	200628 <chEvtBroadcastFlagsI.constprop.19+0x18>
    elp = elp->next;
  200622:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  200624:	42bc      	cmp	r4, r7
  200626:	d01b      	beq.n	200660 <chEvtBroadcastFlagsI.constprop.19+0x50>
    elp->flags |= flags;
  200628:	68e3      	ldr	r3, [r4, #12]
  20062a:	432b      	orrs	r3, r5
  20062c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  20062e:	b115      	cbz	r5, 200636 <chEvtBroadcastFlagsI.constprop.19+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  200630:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  200632:	4213      	tst	r3, r2
  200634:	d0f5      	beq.n	200622 <chEvtBroadcastFlagsI.constprop.19+0x12>
      chEvtSignalI(elp->listener, elp->events);
  200636:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  200638:	68a3      	ldr	r3, [r4, #8]
  20063a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20063c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  200640:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  200642:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  200644:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  200646:	d00c      	beq.n	200662 <chEvtBroadcastFlagsI.constprop.19+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200648:	2a0b      	cmp	r2, #11
  20064a:	d1ea      	bne.n	200622 <chEvtBroadcastFlagsI.constprop.19+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20064c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20064e:	ea32 0303 	bics.w	r3, r2, r3
  200652:	d1e6      	bne.n	200622 <chEvtBroadcastFlagsI.constprop.19+0x12>
    tp->u.rdymsg = MSG_OK;
  200654:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  200656:	f7ff ffc3 	bl	2005e0 <chSchReadyI>
    elp = elp->next;
  20065a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20065c:	42bc      	cmp	r4, r7
  20065e:	d1e3      	bne.n	200628 <chEvtBroadcastFlagsI.constprop.19+0x18>
  200660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200662:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  200664:	4213      	tst	r3, r2
  200666:	d0dc      	beq.n	200622 <chEvtBroadcastFlagsI.constprop.19+0x12>
    tp->u.rdymsg = MSG_OK;
  200668:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20066a:	f7ff ffb9 	bl	2005e0 <chSchReadyI>
  20066e:	e7f4      	b.n	20065a <chEvtBroadcastFlagsI.constprop.19+0x4a>
  200670:	2000082c 	.word	0x2000082c
	...

00200680 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
  200680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200684:	4c5f      	ldr	r4, [pc, #380]	; (200804 <VectorDC+0x184>)
  200686:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200688:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20068a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20068c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20068e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200690:	d152      	bne.n	200738 <VectorDC+0xb8>
  if (isr & USART_ISR_LBDF) {
  200692:	05eb      	lsls	r3, r5, #23
  200694:	d445      	bmi.n	200722 <VectorDC+0xa2>
  if (isr & USART_ISR_RXNE) {
  200696:	06a8      	lsls	r0, r5, #26
  200698:	d417      	bmi.n	2006ca <VectorDC+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20069a:	0639      	lsls	r1, r7, #24
  20069c:	d501      	bpl.n	2006a2 <VectorDC+0x22>
  20069e:	062a      	lsls	r2, r5, #24
  2006a0:	d465      	bmi.n	20076e <VectorDC+0xee>
  if (isr & USART_ISR_TC) {
  2006a2:	066b      	lsls	r3, r5, #25
  2006a4:	d50d      	bpl.n	2006c2 <VectorDC+0x42>
  2006a6:	2320      	movs	r3, #32
  2006a8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  2006ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2006ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  2006b0:	429a      	cmp	r2, r3
  2006b2:	f000 8086 	beq.w	2007c2 <VectorDC+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  2006b6:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  2006ba:	2300      	movs	r3, #0
  2006bc:	6037      	str	r7, [r6, #0]
  2006be:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
  2006c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  2006c6:	f7ff be6b 	b.w	2003a0 <_port_irq_epilogue>
  2006ca:	2320      	movs	r3, #32
  2006cc:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2006d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
  2006d2:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2006d6:	6963      	ldr	r3, [r4, #20]
  2006d8:	ea01 0802 	and.w	r8, r1, r2
  2006dc:	2b00      	cmp	r3, #0
  2006de:	d078      	beq.n	2007d2 <VectorDC+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  2006e0:	6a23      	ldr	r3, [r4, #32]
  2006e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2006e4:	4293      	cmp	r3, r2
  2006e6:	d078      	beq.n	2007da <VectorDC+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  2006e8:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2006ea:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  2006ec:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  2006ee:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  2006f0:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2006f2:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  2006f6:	6a22      	ldr	r2, [r4, #32]
  2006f8:	69e3      	ldr	r3, [r4, #28]
  2006fa:	429a      	cmp	r2, r3
  2006fc:	d25e      	bcs.n	2007bc <VectorDC+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  2006fe:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200700:	4a41      	ldr	r2, [pc, #260]	; (200808 <VectorDC+0x188>)
  200702:	4293      	cmp	r3, r2
  200704:	d009      	beq.n	20071a <VectorDC+0x9a>
  tqp->next             = tp->queue.next;
  200706:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  200708:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20070c:	4618      	mov	r0, r3
  20070e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  200710:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200712:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200716:	f7ff ff63 	bl	2005e0 <chSchReadyI>
  20071a:	2300      	movs	r3, #0
  20071c:	f383 8811 	msr	BASEPRI, r3
  200720:	e7bb      	b.n	20069a <VectorDC+0x1a>
  200722:	2320      	movs	r3, #32
  200724:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  200728:	f44f 7000 	mov.w	r0, #512	; 0x200
  20072c:	f7ff ff70 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
  200730:	2300      	movs	r3, #0
  200732:	f383 8811 	msr	BASEPRI, r3
  200736:	e7ae      	b.n	200696 <VectorDC+0x16>
    sts |= SD_OVERRUN_ERROR;
  200738:	f015 0f08 	tst.w	r5, #8
  20073c:	bf0c      	ite	eq
  20073e:	2000      	moveq	r0, #0
  200740:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  200742:	07eb      	lsls	r3, r5, #31
  200744:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200748:	bf48      	it	mi
  20074a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20074e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  200750:	bf48      	it	mi
  200752:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  200756:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  200758:	bf48      	it	mi
  20075a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  20075e:	f383 8811 	msr	BASEPRI, r3
  200762:	f7ff ff55 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
  200766:	2300      	movs	r3, #0
  200768:	f383 8811 	msr	BASEPRI, r3
  20076c:	e791      	b.n	200692 <VectorDC+0x12>
  20076e:	2320      	movs	r3, #32
  200770:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200774:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200776:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200778:	429a      	cmp	r2, r3
  20077a:	d036      	beq.n	2007ea <VectorDC+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20077c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20077e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200780:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200782:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200784:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200786:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200788:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20078a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  20078e:	d301      	bcc.n	200794 <VectorDC+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200792:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200794:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200796:	4a1d      	ldr	r2, [pc, #116]	; (20080c <VectorDC+0x18c>)
  200798:	4293      	cmp	r3, r2
  20079a:	d009      	beq.n	2007b0 <VectorDC+0x130>
  tqp->next             = tp->queue.next;
  20079c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  20079e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2007a2:	4618      	mov	r0, r3
  2007a4:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2007a6:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2007a8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2007ac:	f7ff ff18 	bl	2005e0 <chSchReadyI>
      u->TDR = b;
  2007b0:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  2007b4:	2300      	movs	r3, #0
  2007b6:	f383 8811 	msr	BASEPRI, r3
  2007ba:	e772      	b.n	2006a2 <VectorDC+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  2007bc:	69a3      	ldr	r3, [r4, #24]
  2007be:	6223      	str	r3, [r4, #32]
  2007c0:	e79d      	b.n	2006fe <VectorDC+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  2007c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2007c4:	2b00      	cmp	r3, #0
  2007c6:	f43f af76 	beq.w	2006b6 <VectorDC+0x36>
  2007ca:	2010      	movs	r0, #16
  2007cc:	f7ff ff20 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
  2007d0:	e771      	b.n	2006b6 <VectorDC+0x36>
  2007d2:	2004      	movs	r0, #4
  2007d4:	f7ff ff1c 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
  2007d8:	e782      	b.n	2006e0 <VectorDC+0x60>
  if (iqIsFullI(iqp)) {
  2007da:	6962      	ldr	r2, [r4, #20]
  2007dc:	2a00      	cmp	r2, #0
  2007de:	d083      	beq.n	2006e8 <VectorDC+0x68>
  2007e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  2007e4:	f7ff ff14 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
  2007e8:	e797      	b.n	20071a <VectorDC+0x9a>
  if (oqIsEmptyI(oqp)) {
  2007ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2007ec:	2a00      	cmp	r2, #0
  2007ee:	d0c5      	beq.n	20077c <VectorDC+0xfc>
  2007f0:	2008      	movs	r0, #8
  2007f2:	f7ff ff0d 	bl	200610 <chEvtBroadcastFlagsI.constprop.19>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2007f6:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2007fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2007fe:	6033      	str	r3, [r6, #0]
  200800:	e7d8      	b.n	2007b4 <VectorDC+0x134>
  200802:	bf00      	nop
  200804:	2000082c 	.word	0x2000082c
  200808:	20000838 	.word	0x20000838
  20080c:	2000085c 	.word	0x2000085c

00200810 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200810:	e7fe      	b.n	200810 <BusFault_Handler>
  200812:	bf00      	nop
	...

00200820 <chSchGoSleepS>:
  thread_t *otp = currp;
  200820:	4b08      	ldr	r3, [pc, #32]	; (200844 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200822:	681a      	ldr	r2, [r3, #0]
  200824:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200826:	b430      	push	{r4, r5}
  otp->state = newstate;
  200828:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  20082c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  20082e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200830:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200832:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200834:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200836:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20083a:	619a      	str	r2, [r3, #24]
}
  20083c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  20083e:	f7ff bd49 	b.w	2002d4 <_port_switch>
  200842:	bf00      	nop
  200844:	2000088c 	.word	0x2000088c
	...

00200850 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  200850:	2900      	cmp	r1, #0
  200852:	d058      	beq.n	200906 <chThdEnqueueTimeoutS+0xb6>
  tp->queue.prev             = tqp->prev;
  200854:	6842      	ldr	r2, [r0, #4]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  200856:	b5f0      	push	{r4, r5, r6, r7, lr}
  queue_insert(currp, tqp);
  200858:	4c44      	ldr	r4, [pc, #272]	; (20096c <chThdEnqueueTimeoutS+0x11c>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20085a:	b087      	sub	sp, #28
  queue_insert(currp, tqp);
  20085c:	69a3      	ldr	r3, [r4, #24]
  20085e:	e883 0005 	stmia.w	r3, {r0, r2}
  tp->queue.prev->queue.next = tp;
  200862:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
  200864:	6043      	str	r3, [r0, #4]
  if (TIME_INFINITE != time) {
  200866:	1c4b      	adds	r3, r1, #1
  200868:	d046      	beq.n	2008f8 <chThdEnqueueTimeoutS+0xa8>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20086a:	4625      	mov	r5, r4
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
  20086c:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
  20086e:	4a40      	ldr	r2, [pc, #256]	; (200970 <chThdEnqueueTimeoutS+0x120>)
  return (systime_t)STM32_ST_TIM->CNT;
  200870:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200874:	f855 3f1c 	ldr.w	r3, [r5, #28]!
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
  200878:	bf08      	it	eq
  20087a:	2102      	moveq	r1, #2
  vtp->par = par;
  20087c:	69a0      	ldr	r0, [r4, #24]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20087e:	42ab      	cmp	r3, r5
  vtp->func = vtfunc;
  200880:	9204      	str	r2, [sp, #16]
  vtp->par = par;
  200882:	9005      	str	r0, [sp, #20]
  200884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200886:	d05d      	beq.n	200944 <chThdEnqueueTimeoutS+0xf4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
  200888:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  20088a:	1a12      	subs	r2, r2, r0

    if (delta < now - ch.vtlist.lasttime) {
  20088c:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
  20088e:	689a      	ldr	r2, [r3, #8]
    if (delta < now - ch.vtlist.lasttime) {
  200890:	d22e      	bcs.n	2008f0 <chThdEnqueueTimeoutS+0xa0>
      p = p->next;
    }
    else if (delta < p->delta) {
  200892:	4291      	cmp	r1, r2
  200894:	d33a      	bcc.n	20090c <chThdEnqueueTimeoutS+0xbc>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  200896:	4291      	cmp	r1, r2
  200898:	d904      	bls.n	2008a4 <chThdEnqueueTimeoutS+0x54>
    delta -= p->delta;
    p = p->next;
  20089a:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  20089c:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
  20089e:	689a      	ldr	r2, [r3, #8]
  2008a0:	428a      	cmp	r2, r1
  2008a2:	d3fa      	bcc.n	20089a <chThdEnqueueTimeoutS+0x4a>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  2008a4:	685a      	ldr	r2, [r3, #4]
  vtp->prev->next = vtp;
  2008a6:	ae01      	add	r6, sp, #4
  vtp->next = p;
  2008a8:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2008aa:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->prev = vtp->next->prev;
  2008ae:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
  2008b0:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
  2008b2:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
  2008b4:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
  2008b6:	689a      	ldr	r2, [r3, #8]
  2008b8:	1a51      	subs	r1, r2, r1
  2008ba:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2008bc:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
  2008be:	2004      	movs	r0, #4
  2008c0:	f7ff ffae 	bl	200820 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2008c4:	9b04      	ldr	r3, [sp, #16]
  2008c6:	b17b      	cbz	r3, 2008e8 <chThdEnqueueTimeoutS+0x98>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  2008c8:	69e3      	ldr	r3, [r4, #28]
  2008ca:	42b3      	cmp	r3, r6
  2008cc:	d021      	beq.n	200912 <chThdEnqueueTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  2008ce:	9a02      	ldr	r2, [sp, #8]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
  2008d0:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
  2008d2:	9b01      	ldr	r3, [sp, #4]
  2008d4:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
  2008d6:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  2008d8:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
  2008da:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
  2008dc:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  2008de:	d003      	beq.n	2008e8 <chThdEnqueueTimeoutS+0x98>
      vtp->next->delta += vtp->delta;
  2008e0:	689a      	ldr	r2, [r3, #8]
  2008e2:	9903      	ldr	r1, [sp, #12]
  2008e4:	440a      	add	r2, r1
  2008e6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
  2008e8:	69a3      	ldr	r3, [r4, #24]
  2008ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
  2008ec:	b007      	add	sp, #28
  2008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
  2008f0:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
  2008f2:	1a89      	subs	r1, r1, r2
  2008f4:	689a      	ldr	r2, [r3, #8]
  2008f6:	e7ce      	b.n	200896 <chThdEnqueueTimeoutS+0x46>
    chSchGoSleepS(newstate);
  2008f8:	2004      	movs	r0, #4
  2008fa:	f7ff ff91 	bl	200820 <chSchGoSleepS>
  return currp->u.rdymsg;
  2008fe:	69a3      	ldr	r3, [r4, #24]
  200900:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200902:	b007      	add	sp, #28
  200904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
  200906:	f04f 30ff 	mov.w	r0, #4294967295
  20090a:	4770      	bx	lr
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
  20090c:	4408      	add	r0, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20090e:	6378      	str	r0, [r7, #52]	; 0x34
  200910:	e7c1      	b.n	200896 <chThdEnqueueTimeoutS+0x46>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  200912:	9a01      	ldr	r2, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
  200914:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200916:	42aa      	cmp	r2, r5
  ch.vtlist.next = vtp->next;
  200918:	61e2      	str	r2, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  20091a:	6055      	str	r5, [r2, #4]
  vtp->func = NULL;
  20091c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20091e:	d021      	beq.n	200964 <chThdEnqueueTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  200920:	6893      	ldr	r3, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  200922:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  200926:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  200928:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  20092a:	4403      	add	r3, r0
  20092c:	6093      	str	r3, [r2, #8]
  20092e:	6a68      	ldr	r0, [r5, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  200930:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  200932:	4293      	cmp	r3, r2
  200934:	d9d8      	bls.n	2008e8 <chThdEnqueueTimeoutS+0x98>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  200936:	1a9b      	subs	r3, r3, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
  200938:	2b02      	cmp	r3, #2
  20093a:	bf2c      	ite	cs
  20093c:	18c3      	addcs	r3, r0, r3
  20093e:	1c83      	addcc	r3, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  200940:	636b      	str	r3, [r5, #52]	; 0x34
  200942:	e7d1      	b.n	2008e8 <chThdEnqueueTimeoutS+0x98>
      ch.vtlist.next = vtp;
  200944:	ae01      	add	r6, sp, #4
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
  200946:	eb02 0e01 	add.w	lr, r2, r1
  STM32_ST_TIM->SR     = 0;
  20094a:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  20094c:	2302      	movs	r3, #2
      vtp->next = (virtual_timer_t *)&ch.vtlist;
  20094e:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  200950:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
  200952:	9103      	str	r1, [sp, #12]
      ch.vtlist.lasttime = now;
  200954:	62a2      	str	r2, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  200956:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
      ch.vtlist.next = vtp;
  20095a:	61e6      	str	r6, [r4, #28]
  STM32_ST_TIM->SR     = 0;
  20095c:	6138      	str	r0, [r7, #16]
      ch.vtlist.prev = vtp;
  20095e:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  200960:	60fb      	str	r3, [r7, #12]
  200962:	e7ac      	b.n	2008be <chThdEnqueueTimeoutS+0x6e>
  STM32_ST_TIM->DIER = 0;
  200964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200968:	60d3      	str	r3, [r2, #12]
  20096a:	e7bd      	b.n	2008e8 <chThdEnqueueTimeoutS+0x98>
  20096c:	2000088c 	.word	0x2000088c
  200970:	00200571 	.word	0x00200571
	...

00200980 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  200980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200984:	4699      	mov	r9, r3
  200986:	b083      	sub	sp, #12
  200988:	4604      	mov	r4, r0
  20098a:	460e      	mov	r6, r1
  20098c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20098e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200992:	2320      	movs	r3, #32
  200994:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
  200998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  20099c:	9300      	str	r3, [sp, #0]
  size_t w = 0;
  20099e:	2700      	movs	r7, #0
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009a0:	f109 3bff 	add.w	fp, r9, #4294967295
  2009a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
  deadline = osalOsGetSystemTimeX() + timeout;
  2009a6:	444b      	add	r3, r9
  2009a8:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  2009aa:	68a3      	ldr	r3, [r4, #8]
  2009ac:	b313      	cbz	r3, 2009f4 <oqWriteTimeout+0x74>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  2009ae:	6961      	ldr	r1, [r4, #20]
  2009b0:	f106 0a01 	add.w	sl, r6, #1
    oqp->q_counter--;
  2009b4:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009b6:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  2009b8:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  2009ba:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  2009bc:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009be:	7833      	ldrb	r3, [r6, #0]
  2009c0:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  2009c2:	6961      	ldr	r1, [r4, #20]
  2009c4:	6923      	ldr	r3, [r4, #16]
  2009c6:	4299      	cmp	r1, r3
  2009c8:	d301      	bcc.n	2009ce <oqWriteTimeout+0x4e>
      oqp->q_wrptr = oqp->q_buffer;
  2009ca:	68e3      	ldr	r3, [r4, #12]
  2009cc:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  2009ce:	f1b8 0f00 	cmp.w	r8, #0
  2009d2:	d001      	beq.n	2009d8 <oqWriteTimeout+0x58>
      nfy(oqp);
  2009d4:	4620      	mov	r0, r4
  2009d6:	47c0      	blx	r8
  2009d8:	2300      	movs	r3, #0
  2009da:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  2009de:	3d01      	subs	r5, #1
    w++;
  2009e0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2009e4:	d018      	beq.n	200a18 <oqWriteTimeout+0x98>
  2009e6:	9b00      	ldr	r3, [sp, #0]
  2009e8:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2009ec:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009ee:	4656      	mov	r6, sl
    while (oqIsFullI(oqp)) {
  2009f0:	2b00      	cmp	r3, #0
  2009f2:	d1dc      	bne.n	2009ae <oqWriteTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009f4:	f11b 0f03 	cmn.w	fp, #3
  2009f8:	d812      	bhi.n	200a20 <oqWriteTimeout+0xa0>
  2009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  2009fe:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200a00:	9a01      	ldr	r2, [sp, #4]
  200a02:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
  200a04:	4589      	cmp	r9, r1
  200a06:	d305      	bcc.n	200a14 <oqWriteTimeout+0x94>
  return chThdEnqueueTimeoutS(tqp, time);
  200a08:	4620      	mov	r0, r4
  200a0a:	f7ff ff21 	bl	200850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200a0e:	2800      	cmp	r0, #0
  200a10:	d0cb      	beq.n	2009aa <oqWriteTimeout+0x2a>
  200a12:	2300      	movs	r3, #0
  200a14:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  200a18:	4638      	mov	r0, r7
  200a1a:	b003      	add	sp, #12
  200a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200a20:	4649      	mov	r1, r9
  200a22:	4620      	mov	r0, r4
  200a24:	f7ff ff14 	bl	200850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200a28:	2800      	cmp	r0, #0
  200a2a:	d0be      	beq.n	2009aa <oqWriteTimeout+0x2a>
  200a2c:	e7f1      	b.n	200a12 <oqWriteTimeout+0x92>
  200a2e:	bf00      	nop

00200a30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  200a30:	3030      	adds	r0, #48	; 0x30
  200a32:	f7ff bfa5 	b.w	200980 <oqWriteTimeout>
  200a36:	bf00      	nop
	...

00200a40 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200a40:	3030      	adds	r0, #48	; 0x30
  200a42:	f04f 33ff 	mov.w	r3, #4294967295
  200a46:	f7ff bf9b 	b.w	200980 <oqWriteTimeout>
  200a4a:	bf00      	nop
  200a4c:	0000      	movs	r0, r0
	...

00200a50 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  200a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200a52:	4604      	mov	r4, r0
  200a54:	460f      	mov	r7, r1
  200a56:	4616      	mov	r6, r2
  200a58:	2320      	movs	r3, #32
  200a5a:	f383 8811 	msr	BASEPRI, r3
  200a5e:	e003      	b.n	200a68 <oqPutTimeout+0x18>
  200a60:	f7ff fef6 	bl	200850 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200a64:	2800      	cmp	r0, #0
  200a66:	db19      	blt.n	200a9c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  200a68:	68a5      	ldr	r5, [r4, #8]
  200a6a:	4631      	mov	r1, r6
  200a6c:	4620      	mov	r0, r4
  200a6e:	2d00      	cmp	r5, #0
  200a70:	d0f6      	beq.n	200a60 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  200a72:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  200a74:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a76:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  200a78:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  200a7a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  200a7c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a7e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200a80:	6962      	ldr	r2, [r4, #20]
  200a82:	6923      	ldr	r3, [r4, #16]
  200a84:	429a      	cmp	r2, r3
  200a86:	d301      	bcc.n	200a8c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  200a88:	68e3      	ldr	r3, [r4, #12]
  200a8a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  200a8c:	69e3      	ldr	r3, [r4, #28]
  200a8e:	b10b      	cbz	r3, 200a94 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  200a90:	4620      	mov	r0, r4
  200a92:	4798      	blx	r3
  200a94:	2000      	movs	r0, #0
  200a96:	f380 8811 	msr	BASEPRI, r0
}
  200a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200a9c:	f385 8811 	msr	BASEPRI, r5
  200aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200aa2:	bf00      	nop
	...

00200ab0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200ab0:	3030      	adds	r0, #48	; 0x30
  200ab2:	f7ff bfcd 	b.w	200a50 <oqPutTimeout>
  200ab6:	bf00      	nop
	...

00200ac0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200ac0:	3030      	adds	r0, #48	; 0x30
  200ac2:	f04f 32ff 	mov.w	r2, #4294967295
  200ac6:	f7ff bfc3 	b.w	200a50 <oqPutTimeout>
  200aca:	bf00      	nop
  200acc:	0000      	movs	r0, r0
	...

00200ad0 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  200ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200ad4:	4699      	mov	r9, r3
  200ad6:	b083      	sub	sp, #12
  200ad8:	4604      	mov	r4, r0
  200ada:	460e      	mov	r6, r1
  200adc:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  200ade:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200ae2:	2320      	movs	r3, #32
  200ae4:	f383 8811 	msr	BASEPRI, r3
  200ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200aec:	9300      	str	r3, [sp, #0]
  size_t r = 0;
  200aee:	2700      	movs	r7, #0
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200af0:	f109 3bff 	add.w	fp, r9, #4294967295
  200af4:	6a53      	ldr	r3, [r2, #36]	; 0x24
  deadline = osalOsGetSystemTimeX() + timeout;
  200af6:	444b      	add	r3, r9
  200af8:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  200afa:	68a3      	ldr	r3, [r4, #8]
  200afc:	b313      	cbz	r3, 200b44 <iqReadTimeout+0x74>
    *bp++ = *iqp->q_rdptr++;
  200afe:	69a1      	ldr	r1, [r4, #24]
  200b00:	f106 0a01 	add.w	sl, r6, #1
    iqp->q_counter--;
  200b04:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b06:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  200b08:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  200b0a:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  200b0c:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b0e:	780b      	ldrb	r3, [r1, #0]
  200b10:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  200b12:	69a1      	ldr	r1, [r4, #24]
  200b14:	6923      	ldr	r3, [r4, #16]
  200b16:	4299      	cmp	r1, r3
  200b18:	d301      	bcc.n	200b1e <iqReadTimeout+0x4e>
      iqp->q_rdptr = iqp->q_buffer;
  200b1a:	68e3      	ldr	r3, [r4, #12]
  200b1c:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  200b1e:	f1b8 0f00 	cmp.w	r8, #0
  200b22:	d001      	beq.n	200b28 <iqReadTimeout+0x58>
      nfy(iqp);
  200b24:	4620      	mov	r0, r4
  200b26:	47c0      	blx	r8
  200b28:	2300      	movs	r3, #0
  200b2a:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  200b2e:	3d01      	subs	r5, #1
    r++;
  200b30:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200b34:	d018      	beq.n	200b68 <iqReadTimeout+0x98>
  200b36:	9b00      	ldr	r3, [sp, #0]
  200b38:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  200b3c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200b3e:	4656      	mov	r6, sl
    while (iqIsEmptyI(iqp)) {
  200b40:	2b00      	cmp	r3, #0
  200b42:	d1dc      	bne.n	200afe <iqReadTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b44:	f11b 0f03 	cmn.w	fp, #3
  200b48:	d812      	bhi.n	200b70 <iqReadTimeout+0xa0>
  200b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200b4e:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200b50:	9a01      	ldr	r2, [sp, #4]
  200b52:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
  200b54:	4589      	cmp	r9, r1
  200b56:	d305      	bcc.n	200b64 <iqReadTimeout+0x94>
  200b58:	4620      	mov	r0, r4
  200b5a:	f7ff fe79 	bl	200850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b5e:	2800      	cmp	r0, #0
  200b60:	d0cb      	beq.n	200afa <iqReadTimeout+0x2a>
  200b62:	2300      	movs	r3, #0
  200b64:	f383 8811 	msr	BASEPRI, r3
}
  200b68:	4638      	mov	r0, r7
  200b6a:	b003      	add	sp, #12
  200b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200b70:	4649      	mov	r1, r9
  200b72:	4620      	mov	r0, r4
  200b74:	f7ff fe6c 	bl	200850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b78:	2800      	cmp	r0, #0
  200b7a:	d0be      	beq.n	200afa <iqReadTimeout+0x2a>
  200b7c:	e7f1      	b.n	200b62 <iqReadTimeout+0x92>
  200b7e:	bf00      	nop

00200b80 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  200b80:	300c      	adds	r0, #12
  200b82:	f7ff bfa5 	b.w	200ad0 <iqReadTimeout>
  200b86:	bf00      	nop
	...

00200b90 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200b90:	300c      	adds	r0, #12
  200b92:	f04f 33ff 	mov.w	r3, #4294967295
  200b96:	f7ff bf9b 	b.w	200ad0 <iqReadTimeout>
  200b9a:	bf00      	nop
  200b9c:	0000      	movs	r0, r0
	...

00200ba0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  200ba0:	b570      	push	{r4, r5, r6, lr}
  200ba2:	2320      	movs	r3, #32
  200ba4:	4604      	mov	r4, r0
  200ba6:	460e      	mov	r6, r1
  200ba8:	f383 8811 	msr	BASEPRI, r3
  200bac:	e003      	b.n	200bb6 <iqGetTimeout+0x16>
  200bae:	f7ff fe4f 	bl	200850 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200bb2:	2800      	cmp	r0, #0
  200bb4:	db19      	blt.n	200bea <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  200bb6:	68a5      	ldr	r5, [r4, #8]
  200bb8:	4631      	mov	r1, r6
  200bba:	4620      	mov	r0, r4
  200bbc:	2d00      	cmp	r5, #0
  200bbe:	d0f6      	beq.n	200bae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  200bc0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  200bc2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200bc4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200bc6:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  200bc8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200bca:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  200bcc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  200bce:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200bd0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  200bd2:	d301      	bcc.n	200bd8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  200bd4:	68e3      	ldr	r3, [r4, #12]
  200bd6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  200bd8:	69e3      	ldr	r3, [r4, #28]
  200bda:	b10b      	cbz	r3, 200be0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  200bdc:	4620      	mov	r0, r4
  200bde:	4798      	blx	r3
  200be0:	2300      	movs	r3, #0
  200be2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  200be6:	4628      	mov	r0, r5
}
  200be8:	bd70      	pop	{r4, r5, r6, pc}
  200bea:	f385 8811 	msr	BASEPRI, r5
  200bee:	bd70      	pop	{r4, r5, r6, pc}

00200bf0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  200bf0:	300c      	adds	r0, #12
  200bf2:	f7ff bfd5 	b.w	200ba0 <iqGetTimeout>
  200bf6:	bf00      	nop
	...

00200c00 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200c00:	300c      	adds	r0, #12
  200c02:	f04f 31ff 	mov.w	r1, #4294967295
  200c06:	f7ff bfcb 	b.w	200ba0 <iqGetTimeout>
  200c0a:	bf00      	nop
  200c0c:	0000      	movs	r0, r0
	...

00200c10 <main>:
};

// Delay in sec = tick/freq

int main(void)
{
  200c10:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200c14:	f04f 31ff 	mov.w	r1, #4294967295
  200c18:	4bc9      	ldr	r3, [pc, #804]	; (200f40 <main+0x330>)
  200c1a:	2200      	movs	r2, #0
  PWR->CR1 |= PWR_CR1_DBP;
  200c1c:	4cc9      	ldr	r4, [pc, #804]	; (200f44 <main+0x334>)
  rccResetAHB1(~0);
  200c1e:	6918      	ldr	r0, [r3, #16]
  200c20:	6119      	str	r1, [r3, #16]
  200c22:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200c24:	6958      	ldr	r0, [r3, #20]
  200c26:	6159      	str	r1, [r3, #20]
  200c28:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200c2a:	6a18      	ldr	r0, [r3, #32]
  200c2c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200c30:	6218      	str	r0, [r3, #32]
  200c32:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200c34:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200c36:	6259      	str	r1, [r3, #36]	; 0x24
  200c38:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200c3a:	6821      	ldr	r1, [r4, #0]
  200c3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  200c40:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200c42:	6f19      	ldr	r1, [r3, #112]	; 0x70
  200c44:	f401 7140 	and.w	r1, r1, #768	; 0x300
  200c48:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  200c4c:	d003      	beq.n	200c56 <main+0x46>
    RCC->BDCR = RCC_BDCR_BDRST;
  200c4e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  200c52:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200c54:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200c56:	4bba      	ldr	r3, [pc, #744]	; (200f40 <main+0x330>)
  200c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200c5a:	461e      	mov	r6, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200c5c:	f042 0219 	orr.w	r2, r2, #25
  200c60:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200c62:	6f33      	ldr	r3, [r6, #112]	; 0x70
  200c64:	079b      	lsls	r3, r3, #30
  200c66:	d5fc      	bpl.n	200c62 <main+0x52>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200c68:	4db6      	ldr	r5, [pc, #728]	; (200f44 <main+0x334>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200c6a:	f240 78ff 	movw	r8, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  200c6e:	2400      	movs	r4, #0
  200c70:	4ab5      	ldr	r2, [pc, #724]	; (200f48 <main+0x338>)
  200c72:	6868      	ldr	r0, [r5, #4]
  gpiop->ODR     = config->odr;
  200c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
  200c78:	f8df a310 	ldr.w	sl, [pc, #784]	; 200f8c <main+0x37c>
  gpiop->ODR     = config->odr;
  200c7c:	f64b 7c7e 	movw	ip, #49022	; 0xbf7e
  200c80:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  gpiop->AFRL    = config->afrl;
  200c84:	f8df 9308 	ldr.w	r9, [pc, #776]	; 200f90 <main+0x380>
  gpiop->AFRH    = config->afrh;
  200c88:	f44f 0e30 	mov.w	lr, #11534336	; 0xb00000
  gpiop->OSPEEDR = config->ospeedr;
  200c8c:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  200c90:	6068      	str	r0, [r5, #4]
  200c92:	f04f 30ff 	mov.w	r0, #4294967295
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200c96:	6b35      	ldr	r5, [r6, #48]	; 0x30
  gpiop->OSPEEDR = config->ospeedr;
  200c98:	f46f 1b40 	mvn.w	fp, #3145728	; 0x300000
  sdp->vmt = &vmt;
  200c9c:	4bab      	ldr	r3, [pc, #684]	; (200f4c <main+0x33c>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200c9e:	ea45 0508 	orr.w	r5, r5, r8
  200ca2:	6335      	str	r5, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200ca4:	6d35      	ldr	r5, [r6, #80]	; 0x50
  200ca6:	ea45 0508 	orr.w	r5, r5, r8
  gpiop->AFRH    = config->afrh;
  200caa:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 200f94 <main+0x384>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200cae:	6535      	str	r5, [r6, #80]	; 0x50
  gpiop->MODER   = config->moder;
  200cb0:	f640 2508 	movw	r5, #2568	; 0xa08
  gpiop->OTYPER  = config->otyper;
  200cb4:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200cb6:	6090      	str	r0, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  200cb8:	f8c2 a00c 	str.w	sl, [r2, #12]
  gpiop->AFRH    = config->afrh;
  200cbc:	f04f 0a77 	mov.w	sl, #119	; 0x77
  gpiop->ODR     = config->odr;
  200cc0:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
  200cc2:	f8c2 9020 	str.w	r9, [r2, #32]
  PWMD4.channels = STM32_TIM4_CHANNELS;
  200cc6:	f04f 0904 	mov.w	r9, #4
  gpiop->AFRH    = config->afrh;
  200cca:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200cce:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 200f98 <main+0x388>
  200cd2:	f8c2 8000 	str.w	r8, [r2]
  gpiop->PUPDR   = config->pupdr;
  200cd6:	f108 58d5 	add.w	r8, r8, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  200cda:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
  200cde:	f508 28d2 	add.w	r8, r8, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  200ce2:	f8c2 0408 	str.w	r0, [r2, #1032]	; 0x408
  gpiop->MODER   = config->moder;
  200ce6:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
  gpiop->PUPDR   = config->pupdr;
  200cea:	f208 582c 	addw	r8, r8, #1324	; 0x52c
  200cee:	f8c2 840c 	str.w	r8, [r2, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  200cf2:	f04f 6808 	mov.w	r8, #142606336	; 0x8800000
  gpiop->ODR     = config->odr;
  200cf6:	f8c2 c414 	str.w	ip, [r2, #1044]	; 0x414
  200cfa:	469c      	mov	ip, r3
  gpiop->AFRL    = config->afrl;
  200cfc:	f8c2 4420 	str.w	r4, [r2, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200d00:	f8c2 e424 	str.w	lr, [r2, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200d04:	f8df e294 	ldr.w	lr, [pc, #660]	; 200f9c <main+0x38c>
  200d08:	f8c2 e400 	str.w	lr, [r2, #1024]	; 0x400
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  200d0c:	2201      	movs	r2, #1
  gpiop->OTYPER  = config->otyper;
  200d0e:	f8df e290 	ldr.w	lr, [pc, #656]	; 200fa0 <main+0x390>
  200d12:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200d16:	f8ce 7008 	str.w	r7, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  200d1a:	4f8d      	ldr	r7, [pc, #564]	; (200f50 <main+0x340>)
  200d1c:	f8ce 700c 	str.w	r7, [lr, #12]
  gpiop->AFRL    = config->afrl;
  200d20:	4f8c      	ldr	r7, [pc, #560]	; (200f54 <main+0x344>)
  gpiop->ODR     = config->odr;
  200d22:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
  200d26:	f8ce 7020 	str.w	r7, [lr, #32]
  tqp->next = (thread_t *)tqp;
  200d2a:	f103 070c 	add.w	r7, r3, #12
  gpiop->AFRH    = config->afrh;
  200d2e:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200d32:	f8ce 5000 	str.w	r5, [lr]
  gpiop->OTYPER  = config->otyper;
  200d36:	4d88      	ldr	r5, [pc, #544]	; (200f58 <main+0x348>)
  gpiop->PUPDR   = config->pupdr;
  200d38:	f8df e268 	ldr.w	lr, [pc, #616]	; 200fa4 <main+0x394>
  gpiop->OTYPER  = config->otyper;
  200d3c:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200d3e:	f8c5 b008 	str.w	fp, [r5, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200d42:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
  gpiop->PUPDR   = config->pupdr;
  200d46:	f8c5 e00c 	str.w	lr, [r5, #12]
  gpiop->ODR     = config->odr;
  200d4a:	6169      	str	r1, [r5, #20]
  gpiop->OSPEEDR = config->ospeedr;
  200d4c:	f8df e258 	ldr.w	lr, [pc, #600]	; 200fa8 <main+0x398>
  gpiop->AFRL    = config->afrl;
  200d50:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200d52:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  oqp->q_counter = size;
  200d56:	f04f 0a10 	mov.w	sl, #16
  gpiop->MODER   = config->moder;
  200d5a:	6028      	str	r0, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
  200d5c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
  200d60:	f8c5 4404 	str.w	r4, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200d64:	f8c5 e408 	str.w	lr, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200d68:	f8c5 040c 	str.w	r0, [r5, #1036]	; 0x40c
  gpiop->OTYPER  = config->otyper;
  200d6c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 200fac <main+0x39c>
  gpiop->ODR     = config->odr;
  200d70:	f8c5 1414 	str.w	r1, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200d74:	f8c5 4420 	str.w	r4, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200d78:	f8c5 4424 	str.w	r4, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200d7c:	f8c5 4400 	str.w	r4, [r5, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  200d80:	4d76      	ldr	r5, [pc, #472]	; (200f5c <main+0x34c>)
  gpiop->OTYPER  = config->otyper;
  200d82:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200d86:	f8ce 5008 	str.w	r5, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  200d8a:	f8ce 000c 	str.w	r0, [lr, #12]
  gpiop->OSPEEDR = config->ospeedr;
  200d8e:	200f      	movs	r0, #15
  gpiop->ODR     = config->odr;
  200d90:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->OTYPER  = config->otyper;
  200d94:	4d72      	ldr	r5, [pc, #456]	; (200f60 <main+0x350>)
  gpiop->AFRL    = config->afrl;
  200d96:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
  200d9a:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200d9e:	f8ce 4000 	str.w	r4, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  200da2:	f8df e20c 	ldr.w	lr, [pc, #524]	; 200fb0 <main+0x3a0>
  gpiop->OTYPER  = config->otyper;
  200da6:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200da8:	f8c5 e008 	str.w	lr, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  200dac:	f8df e204 	ldr.w	lr, [pc, #516]	; 200fb4 <main+0x3a4>
  200db0:	f8c5 e00c 	str.w	lr, [r5, #12]
  gpiop->AFRH    = config->afrh;
  200db4:	f8df e200 	ldr.w	lr, [pc, #512]	; 200fb8 <main+0x3a8>
  gpiop->ODR     = config->odr;
  200db8:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200dba:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200dbc:	f8c5 e024 	str.w	lr, [r5, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200dc0:	f04f 0e80 	mov.w	lr, #128	; 0x80
  gpiop->MODER   = config->moder;
  200dc4:	f8c5 8000 	str.w	r8, [r5]
  gpiop->OTYPER  = config->otyper;
  200dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  gpiop->PUPDR   = config->pupdr;
  200dcc:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 200fbc <main+0x3ac>
  gpiop->OTYPER  = config->otyper;
  200dd0:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200dd2:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  200dd4:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  200dd8:	f8c5 800c 	str.w	r8, [r5, #12]
  gpiop->OTYPER  = config->otyper;
  200ddc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 200fc0 <main+0x3b0>
  gpiop->ODR     = config->odr;
  200de0:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200de2:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200de4:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200de6:	602c      	str	r4, [r5, #0]
  gpiop->OTYPER  = config->otyper;
  200de8:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200dec:	f8c8 4008 	str.w	r4, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
  200df0:	f8c8 000c 	str.w	r0, [r8, #12]
  gpiop->ODR     = config->odr;
  200df4:	f8c8 1014 	str.w	r1, [r8, #20]
  gpiop->AFRL    = config->afrl;
  200df8:	f8c8 4020 	str.w	r4, [r8, #32]
  sdp->state = SD_STOP;
  200dfc:	721a      	strb	r2, [r3, #8]
  gpiop->AFRH    = config->afrh;
  200dfe:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  200e02:	60df      	str	r7, [r3, #12]
  gpiop->MODER   = config->moder;
  200e04:	f8c8 4000 	str.w	r4, [r8]
  GPTD3.tim = STM32_TIM3;
  200e08:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 200fc4 <main+0x3b4>
  tqp->prev = (thread_t *)tqp;
  200e0c:	611f      	str	r7, [r3, #16]
  gpiop->OTYPER  = config->otyper;
  200e0e:	f8c5 4804 	str.w	r4, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200e12:	f8c5 4808 	str.w	r4, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200e16:	f8c5 080c 	str.w	r0, [r5, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  200e1a:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  200e1e:	f8c5 4820 	str.w	r4, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200e22:	f8c5 4824 	str.w	r4, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200e26:	f8c5 4800 	str.w	r4, [r5, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  200e2a:	f8c5 4c04 	str.w	r4, [r5, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
  200e2e:	f8c5 4c08 	str.w	r4, [r5, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
  200e32:	f8c5 0c0c 	str.w	r0, [r5, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
  200e36:	f8c5 1c14 	str.w	r1, [r5, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
  200e3a:	f8c5 4c20 	str.w	r4, [r5, #3104]	; 0xc20
  200e3e:	4949      	ldr	r1, [pc, #292]	; (200f64 <main+0x354>)
  gptp->config = NULL;
  200e40:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->AFRH    = config->afrh;
  200e44:	f8c5 4c24 	str.w	r4, [r5, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
  200e48:	f8c5 4c00 	str.w	r4, [r5, #3072]	; 0xc00
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  200e4c:	4d46      	ldr	r5, [pc, #280]	; (200f68 <main+0x358>)
  200e4e:	f8c8 100c 	str.w	r1, [r8, #12]
  200e52:	f885 9010 	strb.w	r9, [r5, #16]
  iqp->q_buffer  = bp;
  200e56:	4945      	ldr	r1, [pc, #276]	; (200f6c <main+0x35c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200e58:	f8df 916c 	ldr.w	r9, [pc, #364]	; 200fc8 <main+0x3b8>
  sdp->vmt = &vmt;
  200e5c:	4f44      	ldr	r7, [pc, #272]	; (200f70 <main+0x360>)
  PWMD4.tim = STM32_TIM4;
  200e5e:	4845      	ldr	r0, [pc, #276]	; (200f74 <main+0x364>)
  iqp->q_counter = 0;
  200e60:	615c      	str	r4, [r3, #20]
  iqp->q_buffer  = bp;
  200e62:	6199      	str	r1, [r3, #24]
  200e64:	f84c 7b04 	str.w	r7, [ip], #4

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  200e68:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  200e6c:	f8c3 c004 	str.w	ip, [r3, #4]
  200e70:	f642 2c2f 	movw	ip, #10799	; 0x2a2f
  gptp->state  = GPT_STOP;
  200e74:	f888 2000 	strb.w	r2, [r8]
  200e78:	702a      	strb	r2, [r5, #0]
  200e7a:	61a8      	str	r0, [r5, #24]
  iqp->q_top     = bp + size;
  200e7c:	eb01 000a 	add.w	r0, r1, sl
  pwmp->config   = NULL;
  200e80:	606c      	str	r4, [r5, #4]
  pwmp->enabled  = 0;
  200e82:	60ec      	str	r4, [r5, #12]
  iqp->q_rdptr   = bp;
  200e84:	6259      	str	r1, [r3, #36]	; 0x24
  oqp->q_counter = size;
  200e86:	f8c3 a038 	str.w	sl, [r3, #56]	; 0x38
  200e8a:	f889 b327 	strb.w	fp, [r9, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200e8e:	f8c9 e184 	str.w	lr, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200e92:	f8c9 e004 	str.w	lr, [r9, #4]
  ST_ENABLE_CLOCK();
  200e96:	f8d6 a040 	ldr.w	sl, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
  200e9a:	f8df b130 	ldr.w	fp, [pc, #304]	; 200fcc <main+0x3bc>
  iqp->q_wrptr   = bp;
  200e9e:	6219      	str	r1, [r3, #32]
  ST_ENABLE_CLOCK();
  200ea0:	ea4a 0102 	orr.w	r1, sl, r2
  iqp->q_top     = bp + size;
  200ea4:	61d8      	str	r0, [r3, #28]
  tqp->next = (thread_t *)tqp;
  200ea6:	f103 0a30 	add.w	sl, r3, #48	; 0x30
  200eaa:	6431      	str	r1, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
  200eac:	f8db 0008 	ldr.w	r0, [fp, #8]
  oqp->q_buffer  = bp;
  200eb0:	4931      	ldr	r1, [pc, #196]	; (200f78 <main+0x368>)
  200eb2:	4310      	orrs	r0, r2
  iqp->q_notify  = infy;
  200eb4:	629c      	str	r4, [r3, #40]	; 0x28
  iqp->q_link    = link;
  200eb6:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
  200eb8:	651b      	str	r3, [r3, #80]	; 0x50
  200eba:	f8cb 0008 	str.w	r0, [fp, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  200ebe:	f04f 30ff 	mov.w	r0, #4294967295
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  200ec2:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
  oqp->q_top     = bp + size;
  200ec6:	f101 0b10 	add.w	fp, r1, #16
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  200eca:	62f8      	str	r0, [r7, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ecc:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  oqp->q_buffer  = bp;
  200ed0:	63d9      	str	r1, [r3, #60]	; 0x3c
  halInit();

  GPTDriver *delayDriver    = &GPTD3;
  PWMDriver *pwmDriver      = &PWMD4;

  palSetLineMode( LINE_QSPI_BK1_IO1, PAL_MODE_ALTERNATE(2) );   // PD12
  200ed2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  STM32_ST_TIM->CCMR1  = 0;
  200ed6:	61bc      	str	r4, [r7, #24]
  oqp->q_rdptr   = bp;
  200ed8:	6499      	str	r1, [r3, #72]	; 0x48
  STM32_ST_TIM->CCR[0] = 0;
  200eda:	637c      	str	r4, [r7, #52]	; 0x34
  oqp->q_wrptr   = bp;
  200edc:	6459      	str	r1, [r3, #68]	; 0x44
  oqp->q_notify  = onfy;
  200ede:	4927      	ldr	r1, [pc, #156]	; (200f7c <main+0x36c>)
  STM32_ST_TIM->DIER   = 0;
  200ee0:	60fc      	str	r4, [r7, #12]
  oqp->q_top     = bp + size;
  200ee2:	f8c3 b040 	str.w	fp, [r3, #64]	; 0x40
  STM32_ST_TIM->CR2    = 0;
  200ee6:	607c      	str	r4, [r7, #4]
  oqp->q_notify  = onfy;
  200ee8:	64d9      	str	r1, [r3, #76]	; 0x4c

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
  200eea:	4925      	ldr	r1, [pc, #148]	; (200f80 <main+0x370>)
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  200eec:	617a      	str	r2, [r7, #20]
  200eee:	6559      	str	r1, [r3, #84]	; 0x54
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  200ef0:	603a      	str	r2, [r7, #0]
  SD3.clock = STM32_USART3CLK;
  200ef2:	4a24      	ldr	r2, [pc, #144]	; (200f84 <main+0x374>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200ef4:	f889 e31c 	strb.w	lr, [r9, #796]	; 0x31c
  200ef8:	659a      	str	r2, [r3, #88]	; 0x58
  200efa:	f8c3 a030 	str.w	sl, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200efe:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200f02:	f8c9 c180 	str.w	ip, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200f06:	f8c9 c000 	str.w	ip, [r9]
  200f0a:	f7ff f9f9 	bl	200300 <_pal_lld_setgroupmode.constprop.3>
  palSetLineMode(  LINE_ZIO_D28, PAL_MODE_ALTERNATE(2) );       // PD13
  200f0e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  200f12:	f7ff f9f5 	bl	200300 <_pal_lld_setgroupmode.constprop.3>
  200f16:	2320      	movs	r3, #32
  200f18:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  200f1c:	481a      	ldr	r0, [pc, #104]	; (200f88 <main+0x378>)
  if (pwmp->state == PWM_STOP) {
  200f1e:	782b      	ldrb	r3, [r5, #0]
  pwmp->period = config->period;
  200f20:	6841      	ldr	r1, [r0, #4]
  200f22:	2b01      	cmp	r3, #1
  pwmp->config = config;
  200f24:	6068      	str	r0, [r5, #4]
  pwmp->period = config->period;
  200f26:	60a9      	str	r1, [r5, #8]
  200f28:	f000 80ed 	beq.w	201106 <main+0x4f6>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  200f2c:	69ab      	ldr	r3, [r5, #24]
  200f2e:	601c      	str	r4, [r3, #0]
    if (pwmp->channels > 4) {
  200f30:	7c2a      	ldrb	r2, [r5, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  200f32:	635c      	str	r4, [r3, #52]	; 0x34
    if (pwmp->channels > 4) {
  200f34:	2a04      	cmp	r2, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  200f36:	639c      	str	r4, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  200f38:	63dc      	str	r4, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  200f3a:	641c      	str	r4, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  200f3c:	d94a      	bls.n	200fd4 <main+0x3c4>
  200f3e:	e047      	b.n	200fd0 <main+0x3c0>
  200f40:	40023800 	.word	0x40023800
  200f44:	40007000 	.word	0x40007000
  200f48:	40020000 	.word	0x40020000
  200f4c:	2000082c 	.word	0x2000082c
  200f50:	01555051 	.word	0x01555051
  200f54:	00bb00b0 	.word	0x00bb00b0
  200f58:	40020c00 	.word	0x40020c00
  200f5c:	003fcfff 	.word	0x003fcfff
  200f60:	40021800 	.word	0x40021800
  200f64:	40000400 	.word	0x40000400
  200f68:	20000810 	.word	0x20000810
  200f6c:	20000904 	.word	0x20000904
  200f70:	0800145c 	.word	0x0800145c
  200f74:	40000800 	.word	0x40000800
  200f78:	20000914 	.word	0x20000914
  200f7c:	00200391 	.word	0x00200391
  200f80:	40004800 	.word	0x40004800
  200f84:	0337f980 	.word	0x0337f980
  200f88:	20020010 	.word	0x20020010
  200f8c:	40005551 	.word	0x40005551
  200f90:	b0000bb0 	.word	0xb0000bb0
  200f94:	000aaa0a 	.word	0x000aaa0a
  200f98:	2aae8028 	.word	0x2aae8028
  200f9c:	18004001 	.word	0x18004001
  200fa0:	40020800 	.word	0x40020800
  200fa4:	55505555 	.word	0x55505555
  200fa8:	cffffff3 	.word	0xcffffff3
  200fac:	40021400 	.word	0x40021400
  200fb0:	3cccf000 	.word	0x3cccf000
  200fb4:	51155555 	.word	0x51155555
  200fb8:	00b0b000 	.word	0x00b0b000
  200fbc:	55555550 	.word	0x55555550
  200fc0:	40022000 	.word	0x40022000
  200fc4:	20000800 	.word	0x20000800
  200fc8:	e000e100 	.word	0xe000e100
  200fcc:	e0042000 	.word	0xe0042000
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  200fd0:	659c      	str	r4, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  200fd2:	65dc      	str	r4, [r3, #92]	; 0x5c
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  200fd4:	2400      	movs	r4, #0
  200fd6:	696a      	ldr	r2, [r5, #20]
  200fd8:	625c      	str	r4, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200fda:	6806      	ldr	r6, [r0, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  200fdc:	1e4f      	subs	r7, r1, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200fde:	68c4      	ldr	r4, [r0, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200fe0:	fbb2 f1f6 	udiv	r1, r2, r6
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200fe4:	f004 020f 	and.w	r2, r4, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200fe8:	3901      	subs	r1, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
  200fea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200fec:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
  200fee:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  200ff0:	62df      	str	r7, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  200ff2:	605c      	str	r4, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200ff4:	d003      	beq.n	200ffe <main+0x3ee>
  ccer = 0;
  200ff6:	2a02      	cmp	r2, #2
  200ff8:	bf0c      	ite	eq
  200ffa:	2203      	moveq	r2, #3
  200ffc:	2200      	movne	r2, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  200ffe:	6941      	ldr	r1, [r0, #20]
  201000:	f001 010f 	and.w	r1, r1, #15
  201004:	2901      	cmp	r1, #1
  201006:	d003      	beq.n	201010 <main+0x400>
  201008:	2902      	cmp	r1, #2
  20100a:	d103      	bne.n	201014 <main+0x404>
    ccer |= STM32_TIM_CCER_CC2P;
  20100c:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  201010:	f042 0210 	orr.w	r2, r2, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  201014:	69c1      	ldr	r1, [r0, #28]
  201016:	f001 010f 	and.w	r1, r1, #15
  20101a:	2901      	cmp	r1, #1
  20101c:	d003      	beq.n	201026 <main+0x416>
  20101e:	2902      	cmp	r1, #2
  201020:	d103      	bne.n	20102a <main+0x41a>
    ccer |= STM32_TIM_CCER_CC3P;
  201022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  201026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  20102a:	6a41      	ldr	r1, [r0, #36]	; 0x24
  20102c:	f001 010f 	and.w	r1, r1, #15
  201030:	2901      	cmp	r1, #1
  201032:	d003      	beq.n	20103c <main+0x42c>
  201034:	2902      	cmp	r1, #2
  201036:	d103      	bne.n	201040 <main+0x430>
    ccer |= STM32_TIM_CCER_CC4P;
  201038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  20103c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201040:	6c00      	ldr	r0, [r0, #64]	; 0x40
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201042:	2100      	movs	r1, #0
  pwmp->tim->CCER  = ccer;
  201044:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201046:	2601      	movs	r6, #1
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  201048:	2485      	movs	r4, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  20104a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  20104e:	2202      	movs	r2, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201050:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201052:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201054:	60d8      	str	r0, [r3, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  201056:	601c      	str	r4, [r3, #0]
  pwmp->enabled = 0;
  201058:	60e9      	str	r1, [r5, #12]
  pwmp->state = PWM_READY;
  20105a:	702a      	strb	r2, [r5, #0]
  20105c:	f381 8811 	msr	BASEPRI, r1
  201060:	2320      	movs	r3, #32
  201062:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  201066:	f898 3000 	ldrb.w	r3, [r8]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  20106a:	4836      	ldr	r0, [pc, #216]	; (201144 <main+0x534>)
  20106c:	42b3      	cmp	r3, r6
  20106e:	f8c8 0004 	str.w	r0, [r8, #4]
  201072:	d030      	beq.n	2010d6 <main+0x4c6>
  201074:	f8d8 3008 	ldr.w	r3, [r8, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  201078:	6804      	ldr	r4, [r0, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  20107a:	2100      	movs	r1, #0
  20107c:	f8d8 200c 	ldr.w	r2, [r8, #12]
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  201080:	2602      	movs	r6, #2
  gptp->tim->CR2 = gptp->config->cr2;
  201082:	6887      	ldr	r7, [r0, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  201084:	fbb3 f3f4 	udiv	r3, r3, r4
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  201088:	68c4      	ldr	r4, [r0, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  20108a:	3b01      	subs	r3, #1
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  20108c:	6011      	str	r1, [r2, #0]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  20108e:	b29b      	uxth	r3, r3
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  201090:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  gptp->tim->CR2 = gptp->config->cr2;
  201094:	6057      	str	r7, [r2, #4]
  201096:	f888 6000 	strb.w	r6, [r8]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  20109a:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  20109c:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  20109e:	60d4      	str	r4, [r2, #12]
  2010a0:	f381 8811 	msr	BASEPRI, r1
  2010a4:	2220      	movs	r2, #32
  2010a6:	f382 8811 	msr	BASEPRI, r2

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  2010aa:	68eb      	ldr	r3, [r5, #12]
    pwmp->tim->CCR[channel] = width;
  2010ac:	f641 1464 	movw	r4, #6500	; 0x1964
  2010b0:	69a8      	ldr	r0, [r5, #24]
  2010b2:	f043 0301 	orr.w	r3, r3, #1
  2010b6:	6344      	str	r4, [r0, #52]	; 0x34
  2010b8:	60eb      	str	r3, [r5, #12]
  2010ba:	f381 8811 	msr	BASEPRI, r1
  2010be:	f382 8811 	msr	BASEPRI, r2
  2010c2:	68eb      	ldr	r3, [r5, #12]
  2010c4:	f241 30d8 	movw	r0, #5080	; 0x13d8
  2010c8:	69aa      	ldr	r2, [r5, #24]
  2010ca:	4333      	orrs	r3, r6
  2010cc:	6390      	str	r0, [r2, #56]	; 0x38
  2010ce:	60eb      	str	r3, [r5, #12]
  2010d0:	f381 8811 	msr	BASEPRI, r1
  2010d4:	e7fe      	b.n	2010d4 <main+0x4c4>
      rccEnableTIM3(FALSE);
  2010d6:	4a1c      	ldr	r2, [pc, #112]	; (201148 <main+0x538>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2010d8:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
      gptp->clock = STM32_TIMCLK1;
  2010dc:	4b1b      	ldr	r3, [pc, #108]	; (20114c <main+0x53c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2010de:	f04f 0e70 	mov.w	lr, #112	; 0x70
      rccEnableTIM3(FALSE);
  2010e2:	6c16      	ldr	r6, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  2010e4:	f8c8 3008 	str.w	r3, [r8, #8]
      rccEnableTIM3(FALSE);
  2010e8:	f046 0602 	orr.w	r6, r6, #2
  2010ec:	4c18      	ldr	r4, [pc, #96]	; (201150 <main+0x540>)
  2010ee:	6416      	str	r6, [r2, #64]	; 0x40
      rccResetTIM3();
  2010f0:	6a16      	ldr	r6, [r2, #32]
  2010f2:	f046 0602 	orr.w	r6, r6, #2
  2010f6:	6216      	str	r6, [r2, #32]
  2010f8:	6211      	str	r1, [r2, #32]
  2010fa:	f884 e31d 	strb.w	lr, [r4, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2010fe:	f8c4 7180 	str.w	r7, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201102:	6027      	str	r7, [r4, #0]
  201104:	e7b8      	b.n	201078 <main+0x468>
      rccEnableTIM4(FALSE);
  201106:	6c32      	ldr	r2, [r6, #64]	; 0x40
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201108:	f646 0e68 	movw	lr, #26728	; 0x6868
  20110c:	69ab      	ldr	r3, [r5, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20110e:	f04f 0a70 	mov.w	sl, #112	; 0x70
      rccEnableTIM4(FALSE);
  201112:	f042 0204 	orr.w	r2, r2, #4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  201116:	f8df c03c 	ldr.w	ip, [pc, #60]	; 201154 <main+0x544>
      rccEnableTIM4(FALSE);
  20111a:	6432      	str	r2, [r6, #64]	; 0x40
      rccResetTIM4();
  20111c:	6a32      	ldr	r2, [r6, #32]
  20111e:	f042 0204 	orr.w	r2, r2, #4
  201122:	6232      	str	r2, [r6, #32]
      pwmp->clock = STM32_TIMCLK1;
  201124:	4a09      	ldr	r2, [pc, #36]	; (20114c <main+0x53c>)
      rccResetTIM4();
  201126:	6234      	str	r4, [r6, #32]
  201128:	f889 a31e 	strb.w	sl, [r9, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20112c:	f8c9 7180 	str.w	r7, [r9, #384]	; 0x180
      pwmp->clock = STM32_TIMCLK1;
  201130:	616a      	str	r2, [r5, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201132:	f8c9 7000 	str.w	r7, [r9]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201136:	f8c3 e018 	str.w	lr, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  20113a:	f8c3 e01c 	str.w	lr, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  20113e:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
  201142:	e74a      	b.n	200fda <main+0x3ca>
  201144:	20020000 	.word	0x20020000
  201148:	40023800 	.word	0x40023800
  20114c:	066ff300 	.word	0x066ff300
  201150:	e000e100 	.word	0xe000e100
  201154:	01016868 	.word	0x01016868
	...

00201160 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  201160:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201162:	4b33      	ldr	r3, [pc, #204]	; (201230 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201164:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  201168:	4a32      	ldr	r2, [pc, #200]	; (201234 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20116a:	4c33      	ldr	r4, [pc, #204]	; (201238 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20116c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20116e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  201170:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201172:	681a      	ldr	r2, [r3, #0]
  201174:	f042 0201 	orr.w	r2, r2, #1
  201178:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20117a:	680b      	ldr	r3, [r1, #0]
  20117c:	079b      	lsls	r3, r3, #30
  20117e:	d5fc      	bpl.n	20117a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201180:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201182:	4a2b      	ldr	r2, [pc, #172]	; (201230 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201184:	f023 0303 	bic.w	r3, r3, #3
  201188:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20118a:	688b      	ldr	r3, [r1, #8]
  20118c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20118e:	6893      	ldr	r3, [r2, #8]
  201190:	f013 030c 	ands.w	r3, r3, #12
  201194:	d1fb      	bne.n	20118e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201196:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201198:	4925      	ldr	r1, [pc, #148]	; (201230 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20119a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  20119e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2011a0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2011a2:	6813      	ldr	r3, [r2, #0]
  2011a4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2011a8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2011aa:	680b      	ldr	r3, [r1, #0]
  2011ac:	039d      	lsls	r5, r3, #14
  2011ae:	d5fc      	bpl.n	2011aa <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2011b0:	4b22      	ldr	r3, [pc, #136]	; (20123c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2011b2:	4820      	ldr	r0, [pc, #128]	; (201234 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2011b4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2011b6:	680b      	ldr	r3, [r1, #0]
  2011b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2011bc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2011be:	6843      	ldr	r3, [r0, #4]
  2011c0:	045c      	lsls	r4, r3, #17
  2011c2:	d5fc      	bpl.n	2011be <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  2011c4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2011c6:	4a1b      	ldr	r2, [pc, #108]	; (201234 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  2011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2011cc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2011ce:	6853      	ldr	r3, [r2, #4]
  2011d0:	03d9      	lsls	r1, r3, #15
  2011d2:	d5fc      	bpl.n	2011ce <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2011d4:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2011d6:	4917      	ldr	r1, [pc, #92]	; (201234 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2011dc:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2011de:	684b      	ldr	r3, [r1, #4]
  2011e0:	039a      	lsls	r2, r3, #14
  2011e2:	d5fc      	bpl.n	2011de <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  2011e4:	4a12      	ldr	r2, [pc, #72]	; (201230 <__early_init+0xd0>)
  2011e6:	6813      	ldr	r3, [r2, #0]
  2011e8:	019b      	lsls	r3, r3, #6
  2011ea:	d5fc      	bpl.n	2011e6 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2011ec:	4b14      	ldr	r3, [pc, #80]	; (201240 <__early_init+0xe0>)
  2011ee:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  2011f2:	4d14      	ldr	r5, [pc, #80]	; (201244 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  2011f4:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  2011f8:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  2011fa:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  2011fc:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201200:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201204:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201206:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201208:	4909      	ldr	r1, [pc, #36]	; (201230 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20120a:	f043 0302 	orr.w	r3, r3, #2
  20120e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201210:	688b      	ldr	r3, [r1, #8]
  201212:	f003 030c 	and.w	r3, r3, #12
  201216:	2b08      	cmp	r3, #8
  201218:	d1fa      	bne.n	201210 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20121a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201220:	644b      	str	r3, [r1, #68]	; 0x44
  201222:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201228:	bc30      	pop	{r4, r5}
  20122a:	664b      	str	r3, [r1, #100]	; 0x64
  20122c:	4770      	bx	lr
  20122e:	bf00      	nop
  201230:	40023800 	.word	0x40023800
  201234:	40007000 	.word	0x40007000
  201238:	10000400 	.word	0x10000400
  20123c:	09006c10 	.word	0x09006c10
  201240:	40023c00 	.word	0x40023c00
  201244:	30999400 	.word	0x30999400
	...

00201250 <chThdExit>:
void chThdExit(msg_t msg) {
  201250:	b538      	push	{r3, r4, r5, lr}
  201252:	2220      	movs	r2, #32
  201254:	4603      	mov	r3, r0
  201256:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20125a:	4a10      	ldr	r2, [pc, #64]	; (20129c <chThdExit+0x4c>)
  20125c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20125e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201262:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201264:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201266:	4285      	cmp	r5, r0
  201268:	d006      	beq.n	201278 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20126a:	6803      	ldr	r3, [r0, #0]
  20126c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20126e:	f7ff f9b7 	bl	2005e0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201272:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201274:	42a8      	cmp	r0, r5
  201276:	d1f8      	bne.n	20126a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201278:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20127c:	b943      	cbnz	r3, 201290 <chThdExit+0x40>
  20127e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201282:	079b      	lsls	r3, r3, #30
  201284:	d104      	bne.n	201290 <chThdExit+0x40>
    REG_REMOVE(tp);
  201286:	6922      	ldr	r2, [r4, #16]
  201288:	6963      	ldr	r3, [r4, #20]
  20128a:	611a      	str	r2, [r3, #16]
  20128c:	6922      	ldr	r2, [r4, #16]
  20128e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201290:	200f      	movs	r0, #15
}
  201292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201296:	f7ff bac3 	b.w	200820 <chSchGoSleepS>
  20129a:	bf00      	nop
  20129c:	2000088c 	.word	0x2000088c

002012a0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2012a0:	4a0e      	ldr	r2, [pc, #56]	; (2012dc <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2012a2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2012a4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2012a6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2012a8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2012aa:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2012ac:	6994      	ldr	r4, [r2, #24]
  2012ae:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2012b0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2012b2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2012b6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2012ba:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2012bc:	6190      	str	r0, [r2, #24]
  2012be:	e000      	b.n	2012c2 <chSchDoReschedule+0x22>
  2012c0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  2012c2:	689a      	ldr	r2, [r3, #8]
  2012c4:	4291      	cmp	r1, r2
  2012c6:	d3fb      	bcc.n	2012c0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  2012c8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  2012ca:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  2012cc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2012ce:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2012d0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2012d2:	605c      	str	r4, [r3, #4]
}
  2012d4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2012d6:	f7fe bffd 	b.w	2002d4 <_port_switch>
  2012da:	bf00      	nop
  2012dc:	2000088c 	.word	0x2000088c

002012e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2012e2:	4f12      	ldr	r7, [pc, #72]	; (20132c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  2012e4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  2012e6:	4d12      	ldr	r5, [pc, #72]	; (201330 <__init_ram_areas+0x50>)
  2012e8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  2012ec:	4c11      	ldr	r4, [pc, #68]	; (201334 <__init_ram_areas+0x54>)
  2012ee:	4b12      	ldr	r3, [pc, #72]	; (201338 <__init_ram_areas+0x58>)
  2012f0:	4912      	ldr	r1, [pc, #72]	; (20133c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  2012f2:	429c      	cmp	r4, r3
  2012f4:	d911      	bls.n	20131a <__init_ram_areas+0x3a>
  2012f6:	3904      	subs	r1, #4
  2012f8:	461a      	mov	r2, r3
      *p = *tp;
  2012fa:	f851 0f04 	ldr.w	r0, [r1, #4]!
  2012fe:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201302:	4294      	cmp	r4, r2
  201304:	d8f9      	bhi.n	2012fa <__init_ram_areas+0x1a>
  201306:	43da      	mvns	r2, r3
  201308:	4414      	add	r4, r2
  20130a:	f024 0403 	bic.w	r4, r4, #3
  20130e:	3404      	adds	r4, #4
  201310:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201312:	429d      	cmp	r5, r3
  201314:	d903      	bls.n	20131e <__init_ram_areas+0x3e>
      *p = 0;
  201316:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20131a:	429d      	cmp	r5, r3
  20131c:	d8fb      	bhi.n	201316 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20131e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201320:	4577      	cmp	r7, lr
  201322:	d202      	bcs.n	20132a <__init_ram_areas+0x4a>
  201324:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201328:	e7e3      	b.n	2012f2 <__init_ram_areas+0x12>
  20132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20132c:	080013dc 	.word	0x080013dc
  201330:	20020054 	.word	0x20020054
  201334:	20020054 	.word	0x20020054
  201338:	20020054 	.word	0x20020054
  20133c:	080014d0 	.word	0x080014d0

00201340 <__default_exit>:
void __default_exit(void) {
  201340:	e7fe      	b.n	201340 <__default_exit>
  201342:	bf00      	nop
	...

00201350 <__late_init>:
void __late_init(void) {}
  201350:	4770      	bx	lr
  201352:	bf00      	nop
	...

00201360 <__core_init>:
void __core_init(void) {
  201360:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201366:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20136a:	4c1b      	ldr	r4, [pc, #108]	; (2013d8 <__core_init+0x78>)
  20136c:	2200      	movs	r2, #0
  20136e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201372:	6963      	ldr	r3, [r4, #20]
  201374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201378:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20137a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20137e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201382:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201386:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20138a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  20138e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201392:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201396:	f3c3 334e 	ubfx	r3, r3, #13, #15
  20139a:	07b7      	lsls	r7, r6, #30
  20139c:	015d      	lsls	r5, r3, #5
  20139e:	ea05 000e 	and.w	r0, r5, lr
  2013a2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2013a4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2013a6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2013aa:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2013ac:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2013b0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2013b4:	1c53      	adds	r3, r2, #1
  2013b6:	d1f6      	bne.n	2013a6 <__core_init+0x46>
  2013b8:	3d20      	subs	r5, #32
    } while(sets--);
  2013ba:	f115 0f20 	cmn.w	r5, #32
  2013be:	d1ee      	bne.n	20139e <__core_init+0x3e>
  2013c0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2013c4:	6963      	ldr	r3, [r4, #20]
  2013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2013ca:	6163      	str	r3, [r4, #20]
  2013cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2013d0:	f3bf 8f6f 	isb	sy
  2013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2013d6:	bf00      	nop
  2013d8:	e000ed00 	.word	0xe000ed00
