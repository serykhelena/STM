
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 f83f 	bl	2012a0 <__core_init>
  200222:	f000 ff3d 	bl	2010a0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f000 ffd9 	bl	201220 <__init_ram_areas>
  20026e:	f001 f80f 	bl	201290 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 fca5 	bl	200bd0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f000 bff3 	b.w	201280 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080013bc 	.word	0x080013bc
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020044 	.word	0x20020044
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000914 	.word	0x20000914
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f000 ff4e 	bl	201190 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 ff74 	bl	2011e0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <_pal_lld_setgroupmode.constprop.3>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  200300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200304:	2502      	movs	r5, #2
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200306:	2100      	movs	r1, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  200308:	f04f 080f 	mov.w	r8, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20030c:	4c1f      	ldr	r4, [pc, #124]	; (20038c <_pal_lld_setgroupmode.constprop.3+0x8c>)
      altrmask = altr << ((bit & 7) * 4);
  20030e:	46ac      	mov	ip, r5
      m1 = 1 << bit;
  200310:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  200314:	2703      	movs	r7, #3
  200316:	e00f      	b.n	200338 <_pal_lld_setgroupmode.constprop.3+0x38>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200318:	6a26      	ldr	r6, [r4, #32]
  20031a:	ea26 0202 	bic.w	r2, r6, r2
  20031e:	ea42 0209 	orr.w	r2, r2, r9
  200322:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  200324:	6822      	ldr	r2, [r4, #0]
  200326:	4013      	ands	r3, r2
  200328:	432b      	orrs	r3, r5
  20032a:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20032c:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  20032e:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  200332:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  200336:	d027      	beq.n	200388 <_pal_lld_setgroupmode.constprop.3+0x88>
      m2 = 3 << (bit * 2);
  200338:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  20033a:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  20033e:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  200342:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  200346:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  20034a:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20034e:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  200352:	d0eb      	beq.n	20032c <_pal_lld_setgroupmode.constprop.3+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200354:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  200358:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  20035a:	fa0c f902 	lsl.w	r9, ip, r2
      m4 = 15 << ((bit & 7) * 4);
  20035e:	fa08 f202 	lsl.w	r2, r8, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200362:	ea2a 0606 	bic.w	r6, sl, r6
  200366:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  200368:	68a6      	ldr	r6, [r4, #8]
  20036a:	ea06 0603 	and.w	r6, r6, r3
  20036e:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  200370:	68e6      	ldr	r6, [r4, #12]
  200372:	ea06 0603 	and.w	r6, r6, r3
  200376:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  200378:	d9ce      	bls.n	200318 <_pal_lld_setgroupmode.constprop.3+0x18>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20037a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20037c:	ea26 0202 	bic.w	r2, r6, r2
  200380:	ea42 0209 	orr.w	r2, r2, r9
  200384:	6262      	str	r2, [r4, #36]	; 0x24
  200386:	e7cd      	b.n	200324 <_pal_lld_setgroupmode.constprop.3+0x24>
  }
}
  200388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20038c:	40020c00 	.word	0x40020c00

00200390 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
  200390:	4a02      	ldr	r2, [pc, #8]	; (20039c <notify3+0xc>)
  200392:	6813      	ldr	r3, [r2, #0]
  200394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200398:	6013      	str	r3, [r2, #0]
  20039a:	4770      	bx	lr
  20039c:	40004800 	.word	0x40004800

002003a0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2003a0:	2320      	movs	r3, #32
  2003a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2003a6:	4b11      	ldr	r3, [pc, #68]	; (2003ec <_port_irq_epilogue+0x4c>)
  2003a8:	685b      	ldr	r3, [r3, #4]
  2003aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2003ae:	d102      	bne.n	2003b6 <_port_irq_epilogue+0x16>
  2003b0:	f383 8811 	msr	BASEPRI, r3
  2003b4:	4770      	bx	lr
void _port_irq_epilogue(void) {
  2003b6:	b480      	push	{r7}
  2003b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2003ba:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2003be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2003c2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2003c6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2003ca:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2003ce:	4a08      	ldr	r2, [pc, #32]	; (2003f0 <_port_irq_epilogue+0x50>)
  2003d0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2003d2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2003d4:	6889      	ldr	r1, [r1, #8]
  2003d6:	6892      	ldr	r2, [r2, #8]
  2003d8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2003da:	bf8c      	ite	hi
  2003dc:	4a05      	ldrhi	r2, [pc, #20]	; (2003f4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2003de:	4a06      	ldrls	r2, [pc, #24]	; (2003f8 <_port_irq_epilogue+0x58>)
  2003e0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003e4:	46bd      	mov	sp, r7
  2003e6:	bc80      	pop	{r7}
  2003e8:	4770      	bx	lr
  2003ea:	bf00      	nop
  2003ec:	e000ed00 	.word	0xe000ed00
  2003f0:	2000087c 	.word	0x2000087c
  2003f4:	002002f5 	.word	0x002002f5
  2003f8:	002002f8 	.word	0x002002f8
  2003fc:	00000000 	.word	0x00000000

00200400 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  200400:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  200402:	4d17      	ldr	r5, [pc, #92]	; (200460 <VectorB8+0x60>)
  200404:	69ab      	ldr	r3, [r5, #24]
  200406:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200408:	68da      	ldr	r2, [r3, #12]
  20040a:	4014      	ands	r4, r2
  20040c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  20040e:	43d2      	mvns	r2, r2
  200410:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200412:	07a3      	lsls	r3, r4, #30
  200414:	d504      	bpl.n	200420 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
  200416:	686b      	ldr	r3, [r5, #4]
  200418:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  20041a:	b10b      	cbz	r3, 200420 <VectorB8+0x20>
    pwmp->config->channels[0].callback(pwmp);
  20041c:	4628      	mov	r0, r5
  20041e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200420:	0760      	lsls	r0, r4, #29
  200422:	d504      	bpl.n	20042e <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  200424:	686b      	ldr	r3, [r5, #4]
  200426:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200428:	b10b      	cbz	r3, 20042e <VectorB8+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  20042a:	480d      	ldr	r0, [pc, #52]	; (200460 <VectorB8+0x60>)
  20042c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  20042e:	0721      	lsls	r1, r4, #28
  200430:	d504      	bpl.n	20043c <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  200432:	686b      	ldr	r3, [r5, #4]
  200434:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200436:	b10b      	cbz	r3, 20043c <VectorB8+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  200438:	4809      	ldr	r0, [pc, #36]	; (200460 <VectorB8+0x60>)
  20043a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  20043c:	06e2      	lsls	r2, r4, #27
  20043e:	d504      	bpl.n	20044a <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200440:	686b      	ldr	r3, [r5, #4]
  200442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200444:	b10b      	cbz	r3, 20044a <VectorB8+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200446:	4806      	ldr	r0, [pc, #24]	; (200460 <VectorB8+0x60>)
  200448:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20044a:	07e3      	lsls	r3, r4, #31
  20044c:	d504      	bpl.n	200458 <VectorB8+0x58>
  20044e:	686b      	ldr	r3, [r5, #4]
  200450:	689b      	ldr	r3, [r3, #8]
  200452:	b10b      	cbz	r3, 200458 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
  200454:	4802      	ldr	r0, [pc, #8]	; (200460 <VectorB8+0x60>)
  200456:	4798      	blx	r3
}
  200458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  20045c:	f7ff bfa0 	b.w	2003a0 <_port_irq_epilogue>
  200460:	20000800 	.word	0x20000800
	...

00200470 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
  200470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  200474:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  200478:	692b      	ldr	r3, [r5, #16]
  20047a:	079b      	lsls	r3, r3, #30
  20047c:	d403      	bmi.n	200486 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
  20047e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  200482:	f7ff bf8d 	b.w	2003a0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  200486:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200488:	2620      	movs	r6, #32
  20048a:	612f      	str	r7, [r5, #16]
  20048c:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
  200490:	4c1b      	ldr	r4, [pc, #108]	; (200500 <VectorB0+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  200492:	6a68      	ldr	r0, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  200494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  200496:	f104 081c 	add.w	r8, r4, #28
  vtp = ch.vtlist.next;
  20049a:	69e3      	ldr	r3, [r4, #28]
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  20049c:	eba0 0e02 	sub.w	lr, r0, r2
  2004a0:	6899      	ldr	r1, [r3, #8]
  2004a2:	458e      	cmp	lr, r1
  2004a4:	d318      	bcc.n	2004d8 <VectorB0+0x68>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
  2004a6:	440a      	add	r2, r1

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004a8:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
  2004aa:	f8d3 900c 	ldr.w	r9, [r3, #12]
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2004ae:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
  2004b0:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004b2:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
  2004b6:	61e1      	str	r1, [r4, #28]
    vtp->func = NULL;
  2004b8:	60df      	str	r7, [r3, #12]
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2004ba:	d01f      	beq.n	2004fc <VectorB0+0x8c>
  2004bc:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
  2004c0:	6918      	ldr	r0, [r3, #16]
  2004c2:	47c8      	blx	r9
  2004c4:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
  2004c8:	69e3      	ldr	r3, [r4, #28]
  2004ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  2004cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  2004ce:	6899      	ldr	r1, [r3, #8]
  2004d0:	eba0 0e02 	sub.w	lr, r0, r2
  2004d4:	4571      	cmp	r1, lr
  2004d6:	d9e6      	bls.n	2004a6 <VectorB0+0x36>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2004d8:	4543      	cmp	r3, r8
  2004da:	d008      	beq.n	2004ee <VectorB0+0x7e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
  2004dc:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  2004de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2004e2:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
  2004e4:	2a02      	cmp	r2, #2
  2004e6:	bf2c      	ite	cs
  2004e8:	1882      	addcs	r2, r0, r2
  2004ea:	1c82      	addcc	r2, r0, #2
  2004ec:	635a      	str	r2, [r3, #52]	; 0x34
  2004ee:	2300      	movs	r3, #0
  2004f0:	f383 8811 	msr	BASEPRI, r3
}
  2004f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  2004f8:	f7ff bf52 	b.w	2003a0 <_port_irq_epilogue>
  STM32_ST_TIM->DIER = 0;
  2004fc:	60ef      	str	r7, [r5, #12]
  2004fe:	e7dd      	b.n	2004bc <VectorB0+0x4c>
  200500:	2000087c 	.word	0x2000087c
	...

00200510 <SVC_Handler>:
void SVC_Handler(void) {
  200510:	b480      	push	{r7}
  200512:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200514:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200518:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20051a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20051e:	2300      	movs	r3, #0
  200520:	f383 8811 	msr	BASEPRI, r3
}
  200524:	46bd      	mov	sp, r7
  200526:	bc80      	pop	{r7}
  200528:	4770      	bx	lr
  20052a:	bf00      	nop
  20052c:	0000      	movs	r0, r0
	...

00200530 <wakeup>:
  200530:	2320      	movs	r3, #32
  200532:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200536:	f890 3020 	ldrb.w	r3, [r0, #32]
  20053a:	2b07      	cmp	r3, #7
  20053c:	d80e      	bhi.n	20055c <wakeup+0x2c>
  20053e:	e8df f003 	tbb	[pc, r3]
  200542:	0d28      	.short	0x0d28
  200544:	0408240d 	.word	0x0408240d
  200548:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20054a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20054c:	6893      	ldr	r3, [r2, #8]
  20054e:	3301      	adds	r3, #1
  200550:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200552:	e890 000c 	ldmia.w	r0, {r2, r3}
  200556:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200558:	6802      	ldr	r2, [r0, #0]
  20055a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20055c:	2200      	movs	r2, #0
  20055e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200560:	4b0e      	ldr	r3, [pc, #56]	; (20059c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200562:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200566:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200568:	f04f 34ff 	mov.w	r4, #4294967295
  20056c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20056e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200570:	689a      	ldr	r2, [r3, #8]
  200572:	428a      	cmp	r2, r1
  200574:	d2fb      	bcs.n	20056e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200576:	685a      	ldr	r2, [r3, #4]
  200578:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20057a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20057c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20057e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200580:	6058      	str	r0, [r3, #4]
  200582:	f381 8811 	msr	BASEPRI, r1
}
  200586:	bc10      	pop	{r4}
  200588:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20058a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20058c:	2200      	movs	r2, #0
  20058e:	601a      	str	r2, [r3, #0]
  200590:	e7e4      	b.n	20055c <wakeup+0x2c>
  200592:	2300      	movs	r3, #0
  200594:	f383 8811 	msr	BASEPRI, r3
  200598:	4770      	bx	lr
  20059a:	bf00      	nop
  20059c:	2000087c 	.word	0x2000087c

002005a0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2005a0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2005a2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2005a4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2005a6:	4b08      	ldr	r3, [pc, #32]	; (2005c8 <chSchReadyI+0x28>)
  2005a8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2005aa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2005ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2005b0:	689a      	ldr	r2, [r3, #8]
  2005b2:	428a      	cmp	r2, r1
  2005b4:	d2fb      	bcs.n	2005ae <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2005b6:	685a      	ldr	r2, [r3, #4]
}
  2005b8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2005ba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2005bc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2005be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2005c0:	605c      	str	r4, [r3, #4]
}
  2005c2:	bc10      	pop	{r4}
  2005c4:	4770      	bx	lr
  2005c6:	bf00      	nop
  2005c8:	2000087c 	.word	0x2000087c
  2005cc:	00000000 	.word	0x00000000

002005d0 <chEvtBroadcastFlagsI.constprop.16>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2005d2:	4f17      	ldr	r7, [pc, #92]	; (200630 <chEvtBroadcastFlagsI.constprop.16+0x60>)
  2005d4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2005d8:	42bc      	cmp	r4, r7
  2005da:	d021      	beq.n	200620 <chEvtBroadcastFlagsI.constprop.16+0x50>
  2005dc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2005de:	2600      	movs	r6, #0
  2005e0:	e002      	b.n	2005e8 <chEvtBroadcastFlagsI.constprop.16+0x18>
    elp = elp->next;
  2005e2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2005e4:	42bc      	cmp	r4, r7
  2005e6:	d01b      	beq.n	200620 <chEvtBroadcastFlagsI.constprop.16+0x50>
    elp->flags |= flags;
  2005e8:	68e3      	ldr	r3, [r4, #12]
  2005ea:	432b      	orrs	r3, r5
  2005ec:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2005ee:	b115      	cbz	r5, 2005f6 <chEvtBroadcastFlagsI.constprop.16+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2005f0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2005f2:	4213      	tst	r3, r2
  2005f4:	d0f5      	beq.n	2005e2 <chEvtBroadcastFlagsI.constprop.16+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2005f6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2005f8:	68a3      	ldr	r3, [r4, #8]
  2005fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2005fc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  200600:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  200602:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  200604:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  200606:	d00c      	beq.n	200622 <chEvtBroadcastFlagsI.constprop.16+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200608:	2a0b      	cmp	r2, #11
  20060a:	d1ea      	bne.n	2005e2 <chEvtBroadcastFlagsI.constprop.16+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20060c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20060e:	ea32 0303 	bics.w	r3, r2, r3
  200612:	d1e6      	bne.n	2005e2 <chEvtBroadcastFlagsI.constprop.16+0x12>
    tp->u.rdymsg = MSG_OK;
  200614:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  200616:	f7ff ffc3 	bl	2005a0 <chSchReadyI>
    elp = elp->next;
  20061a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20061c:	42bc      	cmp	r4, r7
  20061e:	d1e3      	bne.n	2005e8 <chEvtBroadcastFlagsI.constprop.16+0x18>
  200620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200622:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  200624:	4213      	tst	r3, r2
  200626:	d0dc      	beq.n	2005e2 <chEvtBroadcastFlagsI.constprop.16+0x12>
    tp->u.rdymsg = MSG_OK;
  200628:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20062a:	f7ff ffb9 	bl	2005a0 <chSchReadyI>
  20062e:	e7f4      	b.n	20061a <chEvtBroadcastFlagsI.constprop.16+0x4a>
  200630:	2000081c 	.word	0x2000081c
	...

00200640 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
  200640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200644:	4c5f      	ldr	r4, [pc, #380]	; (2007c4 <VectorDC+0x184>)
  200646:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200648:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20064a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20064c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20064e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200650:	d152      	bne.n	2006f8 <VectorDC+0xb8>
  if (isr & USART_ISR_LBDF) {
  200652:	05eb      	lsls	r3, r5, #23
  200654:	d445      	bmi.n	2006e2 <VectorDC+0xa2>
  if (isr & USART_ISR_RXNE) {
  200656:	06a8      	lsls	r0, r5, #26
  200658:	d417      	bmi.n	20068a <VectorDC+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20065a:	0639      	lsls	r1, r7, #24
  20065c:	d501      	bpl.n	200662 <VectorDC+0x22>
  20065e:	062a      	lsls	r2, r5, #24
  200660:	d465      	bmi.n	20072e <VectorDC+0xee>
  if (isr & USART_ISR_TC) {
  200662:	066b      	lsls	r3, r5, #25
  200664:	d50d      	bpl.n	200682 <VectorDC+0x42>
  200666:	2320      	movs	r3, #32
  200668:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20066c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20066e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200670:	429a      	cmp	r2, r3
  200672:	f000 8086 	beq.w	200782 <VectorDC+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200676:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20067a:	2300      	movs	r3, #0
  20067c:	6037      	str	r7, [r6, #0]
  20067e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
  200682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200686:	f7ff be8b 	b.w	2003a0 <_port_irq_epilogue>
  20068a:	2320      	movs	r3, #32
  20068c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200690:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200692:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200696:	6963      	ldr	r3, [r4, #20]
  200698:	ea01 0802 	and.w	r8, r1, r2
  20069c:	2b00      	cmp	r3, #0
  20069e:	d078      	beq.n	200792 <VectorDC+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  2006a0:	6a23      	ldr	r3, [r4, #32]
  2006a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2006a4:	4293      	cmp	r3, r2
  2006a6:	d078      	beq.n	20079a <VectorDC+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  2006a8:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2006aa:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  2006ac:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  2006ae:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  2006b0:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2006b2:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  2006b6:	6a22      	ldr	r2, [r4, #32]
  2006b8:	69e3      	ldr	r3, [r4, #28]
  2006ba:	429a      	cmp	r2, r3
  2006bc:	d25e      	bcs.n	20077c <VectorDC+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  2006be:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  2006c0:	4a41      	ldr	r2, [pc, #260]	; (2007c8 <VectorDC+0x188>)
  2006c2:	4293      	cmp	r3, r2
  2006c4:	d009      	beq.n	2006da <VectorDC+0x9a>
  tqp->next             = tp->queue.next;
  2006c6:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2006c8:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2006cc:	4618      	mov	r0, r3
  2006ce:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2006d0:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2006d2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2006d6:	f7ff ff63 	bl	2005a0 <chSchReadyI>
  2006da:	2300      	movs	r3, #0
  2006dc:	f383 8811 	msr	BASEPRI, r3
  2006e0:	e7bb      	b.n	20065a <VectorDC+0x1a>
  2006e2:	2320      	movs	r3, #32
  2006e4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
  2006ec:	f7ff ff70 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
  2006f0:	2300      	movs	r3, #0
  2006f2:	f383 8811 	msr	BASEPRI, r3
  2006f6:	e7ae      	b.n	200656 <VectorDC+0x16>
    sts |= SD_OVERRUN_ERROR;
  2006f8:	f015 0f08 	tst.w	r5, #8
  2006fc:	bf0c      	ite	eq
  2006fe:	2000      	moveq	r0, #0
  200700:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  200702:	07eb      	lsls	r3, r5, #31
  200704:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200708:	bf48      	it	mi
  20070a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20070e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  200710:	bf48      	it	mi
  200712:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  200716:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  200718:	bf48      	it	mi
  20071a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  20071e:	f383 8811 	msr	BASEPRI, r3
  200722:	f7ff ff55 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
  200726:	2300      	movs	r3, #0
  200728:	f383 8811 	msr	BASEPRI, r3
  20072c:	e791      	b.n	200652 <VectorDC+0x12>
  20072e:	2320      	movs	r3, #32
  200730:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200734:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200736:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200738:	429a      	cmp	r2, r3
  20073a:	d036      	beq.n	2007aa <VectorDC+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20073c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20073e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200740:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200742:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200744:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200746:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200748:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20074a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  20074e:	d301      	bcc.n	200754 <VectorDC+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  200750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200752:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200754:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200756:	4a1d      	ldr	r2, [pc, #116]	; (2007cc <VectorDC+0x18c>)
  200758:	4293      	cmp	r3, r2
  20075a:	d009      	beq.n	200770 <VectorDC+0x130>
  tqp->next             = tp->queue.next;
  20075c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  20075e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200762:	4618      	mov	r0, r3
  200764:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200766:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  200768:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20076c:	f7ff ff18 	bl	2005a0 <chSchReadyI>
      u->TDR = b;
  200770:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200774:	2300      	movs	r3, #0
  200776:	f383 8811 	msr	BASEPRI, r3
  20077a:	e772      	b.n	200662 <VectorDC+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20077c:	69a3      	ldr	r3, [r4, #24]
  20077e:	6223      	str	r3, [r4, #32]
  200780:	e79d      	b.n	2006be <VectorDC+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  200782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200784:	2b00      	cmp	r3, #0
  200786:	f43f af76 	beq.w	200676 <VectorDC+0x36>
  20078a:	2010      	movs	r0, #16
  20078c:	f7ff ff20 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
  200790:	e771      	b.n	200676 <VectorDC+0x36>
  200792:	2004      	movs	r0, #4
  200794:	f7ff ff1c 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
  200798:	e782      	b.n	2006a0 <VectorDC+0x60>
  if (iqIsFullI(iqp)) {
  20079a:	6962      	ldr	r2, [r4, #20]
  20079c:	2a00      	cmp	r2, #0
  20079e:	d083      	beq.n	2006a8 <VectorDC+0x68>
  2007a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  2007a4:	f7ff ff14 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
  2007a8:	e797      	b.n	2006da <VectorDC+0x9a>
  if (oqIsEmptyI(oqp)) {
  2007aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2007ac:	2a00      	cmp	r2, #0
  2007ae:	d0c5      	beq.n	20073c <VectorDC+0xfc>
  2007b0:	2008      	movs	r0, #8
  2007b2:	f7ff ff0d 	bl	2005d0 <chEvtBroadcastFlagsI.constprop.16>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2007b6:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2007ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2007be:	6033      	str	r3, [r6, #0]
  2007c0:	e7d8      	b.n	200774 <VectorDC+0x134>
  2007c2:	bf00      	nop
  2007c4:	2000081c 	.word	0x2000081c
  2007c8:	20000828 	.word	0x20000828
  2007cc:	2000084c 	.word	0x2000084c

002007d0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  2007d0:	e7fe      	b.n	2007d0 <BusFault_Handler>
  2007d2:	bf00      	nop
	...

002007e0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2007e0:	4b08      	ldr	r3, [pc, #32]	; (200804 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2007e2:	681a      	ldr	r2, [r3, #0]
  2007e4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2007e6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2007e8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2007ec:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2007ee:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2007f0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2007f2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2007f4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2007f6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2007fa:	619a      	str	r2, [r3, #24]
}
  2007fc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2007fe:	f7ff bd69 	b.w	2002d4 <_port_switch>
  200802:	bf00      	nop
  200804:	2000087c 	.word	0x2000087c
	...

00200810 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  200810:	2900      	cmp	r1, #0
  200812:	d058      	beq.n	2008c6 <chThdEnqueueTimeoutS+0xb6>
  tp->queue.prev             = tqp->prev;
  200814:	6842      	ldr	r2, [r0, #4]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  200816:	b5f0      	push	{r4, r5, r6, r7, lr}
  queue_insert(currp, tqp);
  200818:	4c44      	ldr	r4, [pc, #272]	; (20092c <chThdEnqueueTimeoutS+0x11c>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20081a:	b087      	sub	sp, #28
  queue_insert(currp, tqp);
  20081c:	69a3      	ldr	r3, [r4, #24]
  20081e:	e883 0005 	stmia.w	r3, {r0, r2}
  tp->queue.prev->queue.next = tp;
  200822:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
  200824:	6043      	str	r3, [r0, #4]
  if (TIME_INFINITE != time) {
  200826:	1c4b      	adds	r3, r1, #1
  200828:	d046      	beq.n	2008b8 <chThdEnqueueTimeoutS+0xa8>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20082a:	4625      	mov	r5, r4
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
  20082c:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
  20082e:	4a40      	ldr	r2, [pc, #256]	; (200930 <chThdEnqueueTimeoutS+0x120>)
  return (systime_t)STM32_ST_TIM->CNT;
  200830:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200834:	f855 3f1c 	ldr.w	r3, [r5, #28]!
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
  200838:	bf08      	it	eq
  20083a:	2102      	moveq	r1, #2
  vtp->par = par;
  20083c:	69a0      	ldr	r0, [r4, #24]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20083e:	42ab      	cmp	r3, r5
  vtp->func = vtfunc;
  200840:	9204      	str	r2, [sp, #16]
  vtp->par = par;
  200842:	9005      	str	r0, [sp, #20]
  200844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200846:	d05d      	beq.n	200904 <chThdEnqueueTimeoutS+0xf4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
  200848:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  20084a:	1a12      	subs	r2, r2, r0

    if (delta < now - ch.vtlist.lasttime) {
  20084c:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
  20084e:	689a      	ldr	r2, [r3, #8]
    if (delta < now - ch.vtlist.lasttime) {
  200850:	d22e      	bcs.n	2008b0 <chThdEnqueueTimeoutS+0xa0>
      p = p->next;
    }
    else if (delta < p->delta) {
  200852:	4291      	cmp	r1, r2
  200854:	d33a      	bcc.n	2008cc <chThdEnqueueTimeoutS+0xbc>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  200856:	4291      	cmp	r1, r2
  200858:	d904      	bls.n	200864 <chThdEnqueueTimeoutS+0x54>
    delta -= p->delta;
    p = p->next;
  20085a:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  20085c:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
  20085e:	689a      	ldr	r2, [r3, #8]
  200860:	428a      	cmp	r2, r1
  200862:	d3fa      	bcc.n	20085a <chThdEnqueueTimeoutS+0x4a>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  200864:	685a      	ldr	r2, [r3, #4]
  vtp->prev->next = vtp;
  200866:	ae01      	add	r6, sp, #4
  vtp->next = p;
  200868:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  20086a:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->prev = vtp->next->prev;
  20086e:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
  200870:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
  200872:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
  200874:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
  200876:	689a      	ldr	r2, [r3, #8]
  200878:	1a51      	subs	r1, r2, r1
  20087a:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  20087c:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
  20087e:	2004      	movs	r0, #4
  200880:	f7ff ffae 	bl	2007e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  200884:	9b04      	ldr	r3, [sp, #16]
  200886:	b17b      	cbz	r3, 2008a8 <chThdEnqueueTimeoutS+0x98>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  200888:	69e3      	ldr	r3, [r4, #28]
  20088a:	42b3      	cmp	r3, r6
  20088c:	d021      	beq.n	2008d2 <chThdEnqueueTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  20088e:	9a02      	ldr	r2, [sp, #8]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
  200890:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
  200892:	9b01      	ldr	r3, [sp, #4]
  200894:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
  200896:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  200898:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
  20089a:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
  20089c:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  20089e:	d003      	beq.n	2008a8 <chThdEnqueueTimeoutS+0x98>
      vtp->next->delta += vtp->delta;
  2008a0:	689a      	ldr	r2, [r3, #8]
  2008a2:	9903      	ldr	r1, [sp, #12]
  2008a4:	440a      	add	r2, r1
  2008a6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
  2008a8:	69a3      	ldr	r3, [r4, #24]
  2008aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
  2008ac:	b007      	add	sp, #28
  2008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
  2008b0:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
  2008b2:	1a89      	subs	r1, r1, r2
  2008b4:	689a      	ldr	r2, [r3, #8]
  2008b6:	e7ce      	b.n	200856 <chThdEnqueueTimeoutS+0x46>
    chSchGoSleepS(newstate);
  2008b8:	2004      	movs	r0, #4
  2008ba:	f7ff ff91 	bl	2007e0 <chSchGoSleepS>
  return currp->u.rdymsg;
  2008be:	69a3      	ldr	r3, [r4, #24]
  2008c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2008c2:	b007      	add	sp, #28
  2008c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
  2008c6:	f04f 30ff 	mov.w	r0, #4294967295
  2008ca:	4770      	bx	lr
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
  2008cc:	4408      	add	r0, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  2008ce:	6378      	str	r0, [r7, #52]	; 0x34
  2008d0:	e7c1      	b.n	200856 <chThdEnqueueTimeoutS+0x46>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  2008d2:	9a01      	ldr	r2, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
  2008d4:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2008d6:	42aa      	cmp	r2, r5
  ch.vtlist.next = vtp->next;
  2008d8:	61e2      	str	r2, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  2008da:	6055      	str	r5, [r2, #4]
  vtp->func = NULL;
  2008dc:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2008de:	d021      	beq.n	200924 <chThdEnqueueTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  2008e0:	6893      	ldr	r3, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  2008e2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  2008e6:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  2008e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  2008ea:	4403      	add	r3, r0
  2008ec:	6093      	str	r3, [r2, #8]
  2008ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  2008f0:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  2008f2:	4293      	cmp	r3, r2
  2008f4:	d9d8      	bls.n	2008a8 <chThdEnqueueTimeoutS+0x98>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  2008f6:	1a9b      	subs	r3, r3, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
  2008f8:	2b02      	cmp	r3, #2
  2008fa:	bf2c      	ite	cs
  2008fc:	18c3      	addcs	r3, r0, r3
  2008fe:	1c83      	addcc	r3, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  200900:	636b      	str	r3, [r5, #52]	; 0x34
  200902:	e7d1      	b.n	2008a8 <chThdEnqueueTimeoutS+0x98>
      ch.vtlist.next = vtp;
  200904:	ae01      	add	r6, sp, #4
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
  200906:	eb02 0e01 	add.w	lr, r2, r1
  STM32_ST_TIM->SR     = 0;
  20090a:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  20090c:	2302      	movs	r3, #2
      vtp->next = (virtual_timer_t *)&ch.vtlist;
  20090e:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  200910:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
  200912:	9103      	str	r1, [sp, #12]
      ch.vtlist.lasttime = now;
  200914:	62a2      	str	r2, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  200916:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
      ch.vtlist.next = vtp;
  20091a:	61e6      	str	r6, [r4, #28]
  STM32_ST_TIM->SR     = 0;
  20091c:	6138      	str	r0, [r7, #16]
      ch.vtlist.prev = vtp;
  20091e:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  200920:	60fb      	str	r3, [r7, #12]
  200922:	e7ac      	b.n	20087e <chThdEnqueueTimeoutS+0x6e>
  STM32_ST_TIM->DIER = 0;
  200924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200928:	60d3      	str	r3, [r2, #12]
  20092a:	e7bd      	b.n	2008a8 <chThdEnqueueTimeoutS+0x98>
  20092c:	2000087c 	.word	0x2000087c
  200930:	00200531 	.word	0x00200531
	...

00200940 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  200940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200944:	4699      	mov	r9, r3
  200946:	b083      	sub	sp, #12
  200948:	4604      	mov	r4, r0
  20094a:	460e      	mov	r6, r1
  20094c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20094e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200952:	2320      	movs	r3, #32
  200954:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
  200958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  20095c:	9300      	str	r3, [sp, #0]
  size_t w = 0;
  20095e:	2700      	movs	r7, #0
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200960:	f109 3bff 	add.w	fp, r9, #4294967295
  200964:	6a53      	ldr	r3, [r2, #36]	; 0x24
  deadline = osalOsGetSystemTimeX() + timeout;
  200966:	444b      	add	r3, r9
  200968:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20096a:	68a3      	ldr	r3, [r4, #8]
  20096c:	b313      	cbz	r3, 2009b4 <oqWriteTimeout+0x74>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  20096e:	6961      	ldr	r1, [r4, #20]
  200970:	f106 0a01 	add.w	sl, r6, #1
    oqp->q_counter--;
  200974:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  200976:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  200978:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20097a:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  20097c:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20097e:	7833      	ldrb	r3, [r6, #0]
  200980:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  200982:	6961      	ldr	r1, [r4, #20]
  200984:	6923      	ldr	r3, [r4, #16]
  200986:	4299      	cmp	r1, r3
  200988:	d301      	bcc.n	20098e <oqWriteTimeout+0x4e>
      oqp->q_wrptr = oqp->q_buffer;
  20098a:	68e3      	ldr	r3, [r4, #12]
  20098c:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  20098e:	f1b8 0f00 	cmp.w	r8, #0
  200992:	d001      	beq.n	200998 <oqWriteTimeout+0x58>
      nfy(oqp);
  200994:	4620      	mov	r0, r4
  200996:	47c0      	blx	r8
  200998:	2300      	movs	r3, #0
  20099a:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  20099e:	3d01      	subs	r5, #1
    w++;
  2009a0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2009a4:	d018      	beq.n	2009d8 <oqWriteTimeout+0x98>
  2009a6:	9b00      	ldr	r3, [sp, #0]
  2009a8:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2009ac:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2009ae:	4656      	mov	r6, sl
    while (oqIsFullI(oqp)) {
  2009b0:	2b00      	cmp	r3, #0
  2009b2:	d1dc      	bne.n	20096e <oqWriteTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2009b4:	f11b 0f03 	cmn.w	fp, #3
  2009b8:	d812      	bhi.n	2009e0 <oqWriteTimeout+0xa0>
  2009ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  2009be:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2009c0:	9a01      	ldr	r2, [sp, #4]
  2009c2:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
  2009c4:	4589      	cmp	r9, r1
  2009c6:	d305      	bcc.n	2009d4 <oqWriteTimeout+0x94>
  return chThdEnqueueTimeoutS(tqp, time);
  2009c8:	4620      	mov	r0, r4
  2009ca:	f7ff ff21 	bl	200810 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2009ce:	2800      	cmp	r0, #0
  2009d0:	d0cb      	beq.n	20096a <oqWriteTimeout+0x2a>
  2009d2:	2300      	movs	r3, #0
  2009d4:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  2009d8:	4638      	mov	r0, r7
  2009da:	b003      	add	sp, #12
  2009dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2009e0:	4649      	mov	r1, r9
  2009e2:	4620      	mov	r0, r4
  2009e4:	f7ff ff14 	bl	200810 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2009e8:	2800      	cmp	r0, #0
  2009ea:	d0be      	beq.n	20096a <oqWriteTimeout+0x2a>
  2009ec:	e7f1      	b.n	2009d2 <oqWriteTimeout+0x92>
  2009ee:	bf00      	nop

002009f0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2009f0:	3030      	adds	r0, #48	; 0x30
  2009f2:	f7ff bfa5 	b.w	200940 <oqWriteTimeout>
  2009f6:	bf00      	nop
	...

00200a00 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200a00:	3030      	adds	r0, #48	; 0x30
  200a02:	f04f 33ff 	mov.w	r3, #4294967295
  200a06:	f7ff bf9b 	b.w	200940 <oqWriteTimeout>
  200a0a:	bf00      	nop
  200a0c:	0000      	movs	r0, r0
	...

00200a10 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  200a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  200a12:	4604      	mov	r4, r0
  200a14:	460f      	mov	r7, r1
  200a16:	4616      	mov	r6, r2
  200a18:	2320      	movs	r3, #32
  200a1a:	f383 8811 	msr	BASEPRI, r3
  200a1e:	e003      	b.n	200a28 <oqPutTimeout+0x18>
  200a20:	f7ff fef6 	bl	200810 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200a24:	2800      	cmp	r0, #0
  200a26:	db19      	blt.n	200a5c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  200a28:	68a5      	ldr	r5, [r4, #8]
  200a2a:	4631      	mov	r1, r6
  200a2c:	4620      	mov	r0, r4
  200a2e:	2d00      	cmp	r5, #0
  200a30:	d0f6      	beq.n	200a20 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  200a32:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  200a34:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a36:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  200a38:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  200a3a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  200a3c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  200a3e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200a40:	6962      	ldr	r2, [r4, #20]
  200a42:	6923      	ldr	r3, [r4, #16]
  200a44:	429a      	cmp	r2, r3
  200a46:	d301      	bcc.n	200a4c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  200a48:	68e3      	ldr	r3, [r4, #12]
  200a4a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  200a4c:	69e3      	ldr	r3, [r4, #28]
  200a4e:	b10b      	cbz	r3, 200a54 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  200a50:	4620      	mov	r0, r4
  200a52:	4798      	blx	r3
  200a54:	2000      	movs	r0, #0
  200a56:	f380 8811 	msr	BASEPRI, r0
}
  200a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200a5c:	f385 8811 	msr	BASEPRI, r5
  200a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200a62:	bf00      	nop
	...

00200a70 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200a70:	3030      	adds	r0, #48	; 0x30
  200a72:	f7ff bfcd 	b.w	200a10 <oqPutTimeout>
  200a76:	bf00      	nop
	...

00200a80 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200a80:	3030      	adds	r0, #48	; 0x30
  200a82:	f04f 32ff 	mov.w	r2, #4294967295
  200a86:	f7ff bfc3 	b.w	200a10 <oqPutTimeout>
  200a8a:	bf00      	nop
  200a8c:	0000      	movs	r0, r0
	...

00200a90 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  200a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200a94:	4699      	mov	r9, r3
  200a96:	b083      	sub	sp, #12
  200a98:	4604      	mov	r4, r0
  200a9a:	460e      	mov	r6, r1
  200a9c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  200a9e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  200aa2:	2320      	movs	r3, #32
  200aa4:	f383 8811 	msr	BASEPRI, r3
  200aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200aac:	9300      	str	r3, [sp, #0]
  size_t r = 0;
  200aae:	2700      	movs	r7, #0
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200ab0:	f109 3bff 	add.w	fp, r9, #4294967295
  200ab4:	6a53      	ldr	r3, [r2, #36]	; 0x24
  deadline = osalOsGetSystemTimeX() + timeout;
  200ab6:	444b      	add	r3, r9
  200ab8:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  200aba:	68a3      	ldr	r3, [r4, #8]
  200abc:	b313      	cbz	r3, 200b04 <iqReadTimeout+0x74>
    *bp++ = *iqp->q_rdptr++;
  200abe:	69a1      	ldr	r1, [r4, #24]
  200ac0:	f106 0a01 	add.w	sl, r6, #1
    iqp->q_counter--;
  200ac4:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200ac6:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  200ac8:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  200aca:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  200acc:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200ace:	780b      	ldrb	r3, [r1, #0]
  200ad0:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  200ad2:	69a1      	ldr	r1, [r4, #24]
  200ad4:	6923      	ldr	r3, [r4, #16]
  200ad6:	4299      	cmp	r1, r3
  200ad8:	d301      	bcc.n	200ade <iqReadTimeout+0x4e>
      iqp->q_rdptr = iqp->q_buffer;
  200ada:	68e3      	ldr	r3, [r4, #12]
  200adc:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  200ade:	f1b8 0f00 	cmp.w	r8, #0
  200ae2:	d001      	beq.n	200ae8 <iqReadTimeout+0x58>
      nfy(iqp);
  200ae4:	4620      	mov	r0, r4
  200ae6:	47c0      	blx	r8
  200ae8:	2300      	movs	r3, #0
  200aea:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  200aee:	3d01      	subs	r5, #1
    r++;
  200af0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  200af4:	d018      	beq.n	200b28 <iqReadTimeout+0x98>
  200af6:	9b00      	ldr	r3, [sp, #0]
  200af8:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  200afc:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  200afe:	4656      	mov	r6, sl
    while (iqIsEmptyI(iqp)) {
  200b00:	2b00      	cmp	r3, #0
  200b02:	d1dc      	bne.n	200abe <iqReadTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200b04:	f11b 0f03 	cmn.w	fp, #3
  200b08:	d812      	bhi.n	200b30 <iqReadTimeout+0xa0>
  200b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  200b0e:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  200b10:	9a01      	ldr	r2, [sp, #4]
  200b12:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
  200b14:	4589      	cmp	r9, r1
  200b16:	d305      	bcc.n	200b24 <iqReadTimeout+0x94>
  200b18:	4620      	mov	r0, r4
  200b1a:	f7ff fe79 	bl	200810 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b1e:	2800      	cmp	r0, #0
  200b20:	d0cb      	beq.n	200aba <iqReadTimeout+0x2a>
  200b22:	2300      	movs	r3, #0
  200b24:	f383 8811 	msr	BASEPRI, r3
}
  200b28:	4638      	mov	r0, r7
  200b2a:	b003      	add	sp, #12
  200b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200b30:	4649      	mov	r1, r9
  200b32:	4620      	mov	r0, r4
  200b34:	f7ff fe6c 	bl	200810 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  200b38:	2800      	cmp	r0, #0
  200b3a:	d0be      	beq.n	200aba <iqReadTimeout+0x2a>
  200b3c:	e7f1      	b.n	200b22 <iqReadTimeout+0x92>
  200b3e:	bf00      	nop

00200b40 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  200b40:	300c      	adds	r0, #12
  200b42:	f7ff bfa5 	b.w	200a90 <iqReadTimeout>
  200b46:	bf00      	nop
	...

00200b50 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200b50:	300c      	adds	r0, #12
  200b52:	f04f 33ff 	mov.w	r3, #4294967295
  200b56:	f7ff bf9b 	b.w	200a90 <iqReadTimeout>
  200b5a:	bf00      	nop
  200b5c:	0000      	movs	r0, r0
	...

00200b60 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  200b60:	b570      	push	{r4, r5, r6, lr}
  200b62:	2320      	movs	r3, #32
  200b64:	4604      	mov	r4, r0
  200b66:	460e      	mov	r6, r1
  200b68:	f383 8811 	msr	BASEPRI, r3
  200b6c:	e003      	b.n	200b76 <iqGetTimeout+0x16>
  200b6e:	f7ff fe4f 	bl	200810 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  200b72:	2800      	cmp	r0, #0
  200b74:	db19      	blt.n	200baa <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  200b76:	68a5      	ldr	r5, [r4, #8]
  200b78:	4631      	mov	r1, r6
  200b7a:	4620      	mov	r0, r4
  200b7c:	2d00      	cmp	r5, #0
  200b7e:	d0f6      	beq.n	200b6e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  200b80:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  200b82:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200b84:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200b86:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  200b88:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  200b8a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  200b8c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  200b8e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  200b90:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  200b92:	d301      	bcc.n	200b98 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  200b94:	68e3      	ldr	r3, [r4, #12]
  200b96:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  200b98:	69e3      	ldr	r3, [r4, #28]
  200b9a:	b10b      	cbz	r3, 200ba0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  200b9c:	4620      	mov	r0, r4
  200b9e:	4798      	blx	r3
  200ba0:	2300      	movs	r3, #0
  200ba2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  200ba6:	4628      	mov	r0, r5
}
  200ba8:	bd70      	pop	{r4, r5, r6, pc}
  200baa:	f385 8811 	msr	BASEPRI, r5
  200bae:	bd70      	pop	{r4, r5, r6, pc}

00200bb0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  200bb0:	300c      	adds	r0, #12
  200bb2:	f7ff bfd5 	b.w	200b60 <iqGetTimeout>
  200bb6:	bf00      	nop
	...

00200bc0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200bc0:	300c      	adds	r0, #12
  200bc2:	f04f 31ff 	mov.w	r1, #4294967295
  200bc6:	f7ff bfcb 	b.w	200b60 <iqGetTimeout>
  200bca:	bf00      	nop
  200bcc:	0000      	movs	r0, r0
	...

00200bd0 <main>:
};

// Delay in sec = tick/freq

int main(void)
{
  200bd0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200bd4:	f04f 31ff 	mov.w	r1, #4294967295
  200bd8:	4bcc      	ldr	r3, [pc, #816]	; (200f0c <main+0x33c>)
  200bda:	2200      	movs	r2, #0
  PWR->CR1 |= PWR_CR1_DBP;
  200bdc:	4ccc      	ldr	r4, [pc, #816]	; (200f10 <main+0x340>)
  rccResetAHB1(~0);
  200bde:	6918      	ldr	r0, [r3, #16]
  200be0:	6119      	str	r1, [r3, #16]
  200be2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200be4:	6958      	ldr	r0, [r3, #20]
  200be6:	6159      	str	r1, [r3, #20]
  200be8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200bea:	6a18      	ldr	r0, [r3, #32]
  200bec:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200bf0:	6218      	str	r0, [r3, #32]
  200bf2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200bf4:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200bf6:	6259      	str	r1, [r3, #36]	; 0x24
  200bf8:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  200bfa:	6821      	ldr	r1, [r4, #0]
  200bfc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  200c00:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  200c02:	6f19      	ldr	r1, [r3, #112]	; 0x70
  200c04:	f401 7140 	and.w	r1, r1, #768	; 0x300
  200c08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  200c0c:	d003      	beq.n	200c16 <main+0x46>
    RCC->BDCR = RCC_BDCR_BDRST;
  200c0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  200c12:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  200c14:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200c16:	4bbd      	ldr	r3, [pc, #756]	; (200f0c <main+0x33c>)
  200c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200c1a:	461d      	mov	r5, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  200c1c:	f042 0219 	orr.w	r2, r2, #25
  200c20:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  200c22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  200c24:	079b      	lsls	r3, r3, #30
  200c26:	d5fc      	bpl.n	200c22 <main+0x52>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  200c28:	4fb9      	ldr	r7, [pc, #740]	; (200f10 <main+0x340>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200c2a:	f240 7eff 	movw	lr, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  200c2e:	2400      	movs	r4, #0
  200c30:	49b8      	ldr	r1, [pc, #736]	; (200f14 <main+0x344>)
  200c32:	6878      	ldr	r0, [r7, #4]
  gpiop->ODR     = config->odr;
  200c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
  200c38:	f8df c30c 	ldr.w	ip, [pc, #780]	; 200f48 <main+0x378>
  gpiop->AFRH    = config->afrh;
  200c3c:	f44f 0a30 	mov.w	sl, #11534336	; 0xb00000
  200c40:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  200c44:	f8df b304 	ldr.w	fp, [pc, #772]	; 200f4c <main+0x37c>
  gpiop->MODER   = config->moder;
  200c48:	f640 2908 	movw	r9, #2568	; 0xa08
  sdp->vmt = &vmt;
  200c4c:	4bb2      	ldr	r3, [pc, #712]	; (200f18 <main+0x348>)
  200c4e:	6078      	str	r0, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200c50:	f04f 30ff 	mov.w	r0, #4294967295
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200c54:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  iqp->q_buffer  = bp;
  200c56:	4eb1      	ldr	r6, [pc, #708]	; (200f1c <main+0x34c>)
  200c58:	ea47 070e 	orr.w	r7, r7, lr
  200c5c:	632f      	str	r7, [r5, #48]	; 0x30
  gpiop->OSPEEDR = config->ospeedr;
  200c5e:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200c62:	f8d5 8050 	ldr.w	r8, [r5, #80]	; 0x50
  200c66:	ea48 080e 	orr.w	r8, r8, lr
  gpiop->AFRL    = config->afrl;
  200c6a:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 200f50 <main+0x380>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200c6e:	f8c5 8050 	str.w	r8, [r5, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
  200c72:	f46f 1840 	mvn.w	r8, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200c76:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200c78:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
  200c7a:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200c7e:	f04f 0c77 	mov.w	ip, #119	; 0x77
  gpiop->ODR     = config->odr;
  200c82:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
  200c84:	f8c1 e020 	str.w	lr, [r1, #32]
  gpiop->MODER   = config->moder;
  200c88:	f44f 2e20 	mov.w	lr, #655360	; 0xa0000
  gpiop->AFRH    = config->afrh;
  200c8c:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200c90:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 200f54 <main+0x384>
  200c94:	f8c1 b000 	str.w	fp, [r1]
  gpiop->PUPDR   = config->pupdr;
  200c98:	f10b 5bd5 	add.w	fp, fp, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  200c9c:	f8c1 4404 	str.w	r4, [r1, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
  200ca0:	f50b 2bd2 	add.w	fp, fp, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  200ca4:	f8c1 0408 	str.w	r0, [r1, #1032]	; 0x408
  gpiop->ODR     = config->odr;
  200ca8:	f64b 707e 	movw	r0, #49022	; 0xbf7e
  gpiop->PUPDR   = config->pupdr;
  200cac:	f20b 5b2c 	addw	fp, fp, #1324	; 0x52c
  200cb0:	f8c1 b40c 	str.w	fp, [r1, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  200cb4:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->PUPDR   = config->pupdr;
  200cb8:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  gpiop->AFRL    = config->afrl;
  200cbc:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200cc0:	f8c1 a424 	str.w	sl, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200cc4:	f8df a290 	ldr.w	sl, [pc, #656]	; 200f58 <main+0x388>
  gpiop->PUPDR   = config->pupdr;
  200cc8:	f8df b290 	ldr.w	fp, [pc, #656]	; 200f5c <main+0x38c>
  gpiop->MODER   = config->moder;
  200ccc:	f8c1 a400 	str.w	sl, [r1, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
  200cd4:	604c      	str	r4, [r1, #4]
  gpiop->MODER   = config->moder;
  200cd6:	f04f 6a08 	mov.w	sl, #142606336	; 0x8800000
  gpiop->OSPEEDR = config->ospeedr;
  200cda:	608f      	str	r7, [r1, #8]
  200cdc:	270f      	movs	r7, #15
  gpiop->PUPDR   = config->pupdr;
  200cde:	f8c1 b00c 	str.w	fp, [r1, #12]
  gpiop->AFRL    = config->afrl;
  200ce2:	f8df b27c 	ldr.w	fp, [pc, #636]	; 200f60 <main+0x390>
  gpiop->ODR     = config->odr;
  200ce6:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
  200ce8:	f8c1 b020 	str.w	fp, [r1, #32]
  iqp->q_top     = bp + size;
  200cec:	f106 0b10 	add.w	fp, r6, #16
  gpiop->AFRH    = config->afrh;
  200cf0:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200cf2:	f8c1 9000 	str.w	r9, [r1]
  gpiop->PUPDR   = config->pupdr;
  200cf6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 200f64 <main+0x394>
  gpiop->OTYPER  = config->otyper;
  200cfa:	f8c1 4404 	str.w	r4, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200cfe:	f8c1 8408 	str.w	r8, [r1, #1032]	; 0x408
  200d02:	4698      	mov	r8, r3
  gpiop->PUPDR   = config->pupdr;
  200d04:	f8c1 940c 	str.w	r9, [r1, #1036]	; 0x40c
  PWMD4.channels = STM32_TIM4_CHANNELS;
  200d08:	f04f 0904 	mov.w	r9, #4
  gpiop->ODR     = config->odr;
  200d0c:	f8c1 2414 	str.w	r2, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200d10:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200d14:	f8c1 c424 	str.w	ip, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200d18:	f8c1 e400 	str.w	lr, [r1, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  200d1c:	f8df e248 	ldr.w	lr, [pc, #584]	; 200f68 <main+0x398>
  gpiop->OTYPER  = config->otyper;
  200d20:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200d24:	f8c1 e808 	str.w	lr, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200d28:	f8c1 080c 	str.w	r0, [r1, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  200d2c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 200f6c <main+0x39c>
  gpiop->ODR     = config->odr;
  200d30:	f8c1 2814 	str.w	r2, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  200d34:	f8c1 4820 	str.w	r4, [r1, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200d38:	f8c1 4824 	str.w	r4, [r1, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200d3c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  200d40:	4977      	ldr	r1, [pc, #476]	; (200f20 <main+0x350>)
  gpiop->OTYPER  = config->otyper;
  200d42:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->PUPDR   = config->pupdr;
  200d46:	f8df c228 	ldr.w	ip, [pc, #552]	; 200f70 <main+0x3a0>
  gpiop->OSPEEDR = config->ospeedr;
  200d4a:	f8ce 1008 	str.w	r1, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  200d4e:	f8ce 000c 	str.w	r0, [lr, #12]
  gpiop->OTYPER  = config->otyper;
  200d52:	4974      	ldr	r1, [pc, #464]	; (200f24 <main+0x354>)
  gpiop->ODR     = config->odr;
  200d54:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
  200d58:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
  200d5c:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200d60:	f8ce 4000 	str.w	r4, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  200d64:	f8df e20c 	ldr.w	lr, [pc, #524]	; 200f74 <main+0x3a4>
  gpiop->OTYPER  = config->otyper;
  200d68:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200d6a:	f8c1 e008 	str.w	lr, [r1, #8]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  200d6e:	f04f 0e01 	mov.w	lr, #1
  gpiop->PUPDR   = config->pupdr;
  200d72:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->AFRH    = config->afrh;
  200d76:	f8df c200 	ldr.w	ip, [pc, #512]	; 200f78 <main+0x3a8>
  gpiop->ODR     = config->odr;
  200d7a:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
  200d7c:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
  200d7e:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200d82:	f103 0c0c 	add.w	ip, r3, #12
  gpiop->MODER   = config->moder;
  200d86:	f8c1 a000 	str.w	sl, [r1]
  oqp->q_counter = size;
  200d8a:	f04f 0a10 	mov.w	sl, #16
  gpiop->OTYPER  = config->otyper;
  200d8e:	f8c1 4404 	str.w	r4, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200d92:	f8c1 7408 	str.w	r7, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200d96:	4f64      	ldr	r7, [pc, #400]	; (200f28 <main+0x358>)
  200d98:	f8c1 740c 	str.w	r7, [r1, #1036]	; 0x40c

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200d9c:	27c0      	movs	r7, #192	; 0xc0
  gpiop->ODR     = config->odr;
  200d9e:	f8c1 2414 	str.w	r2, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200da2:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200da6:	f8c1 4424 	str.w	r4, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200daa:	f8c1 4400 	str.w	r4, [r1, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200dae:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200db2:	f8c1 4808 	str.w	r4, [r1, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200db6:	f8c1 080c 	str.w	r0, [r1, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  200dba:	f8c1 2814 	str.w	r2, [r1, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  200dbe:	f8c1 4820 	str.w	r4, [r1, #2080]	; 0x820
  iqp->q_buffer  = bp;
  200dc2:	619e      	str	r6, [r3, #24]
  gpiop->AFRH    = config->afrh;
  200dc4:	f8c1 4824 	str.w	r4, [r1, #2084]	; 0x824
  iqp->q_rdptr   = bp;
  200dc8:	625e      	str	r6, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200dca:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200dce:	2180      	movs	r1, #128	; 0x80
  iqp->q_wrptr   = bp;
  200dd0:	621e      	str	r6, [r3, #32]
  gpiop->OTYPER  = config->otyper;
  200dd2:	4e56      	ldr	r6, [pc, #344]	; (200f2c <main+0x35c>)
  iqp->q_top     = bp + size;
  200dd4:	f8c3 b01c 	str.w	fp, [r3, #28]
  sdp->state = SD_STOP;
  200dd8:	f883 e008 	strb.w	lr, [r3, #8]
  200ddc:	6074      	str	r4, [r6, #4]
  200dde:	f8c3 c00c 	str.w	ip, [r3, #12]
  gpiop->OSPEEDR = config->ospeedr;
  200de2:	60b4      	str	r4, [r6, #8]
  tqp->prev = (thread_t *)tqp;
  200de4:	f8c3 c010 	str.w	ip, [r3, #16]
  sdp->vmt = &vmt;
  200de8:	f8df c190 	ldr.w	ip, [pc, #400]	; 200f7c <main+0x3ac>
  gpiop->PUPDR   = config->pupdr;
  200dec:	60f0      	str	r0, [r6, #12]
  gpiop->ODR     = config->odr;
  200dee:	6172      	str	r2, [r6, #20]
  gpiop->AFRL    = config->afrl;
  200df0:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
  200df2:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200df4:	6034      	str	r4, [r6, #0]
  gpiop->OTYPER  = config->otyper;
  200df6:	f8c6 4404 	str.w	r4, [r6, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200dfa:	f8c6 4408 	str.w	r4, [r6, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200dfe:	f8c6 040c 	str.w	r0, [r6, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  200e02:	f8c6 2414 	str.w	r2, [r6, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200e06:	f8c6 4420 	str.w	r4, [r6, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200e0a:	f8c6 4424 	str.w	r4, [r6, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200e0e:	f8c6 4400 	str.w	r4, [r6, #1024]	; 0x400

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  200e12:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  200e16:	f848 cb04 	str.w	ip, [r8], #4
  200e1a:	f642 2c2f 	movw	ip, #10799	; 0x2a2f
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  200e1e:	f8c3 8004 	str.w	r8, [r3, #4]
  200e22:	f8df 815c 	ldr.w	r8, [pc, #348]	; 200f80 <main+0x3b0>
  PWMD4.tim = STM32_TIM4;
  200e26:	4a42      	ldr	r2, [pc, #264]	; (200f30 <main+0x360>)
  PWMD4.channels = STM32_TIM4_CHANNELS;
  200e28:	f888 9010 	strb.w	r9, [r8, #16]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200e2c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 200f84 <main+0x3b4>
  iqp->q_counter = 0;
  200e30:	615c      	str	r4, [r3, #20]
  PWMD4.tim = STM32_TIM4;
  200e32:	f8c8 2018 	str.w	r2, [r8, #24]
  200e36:	f888 e000 	strb.w	lr, [r8]
  pwmp->config   = NULL;
  200e3a:	f8c8 4004 	str.w	r4, [r8, #4]
  pwmp->enabled  = 0;
  200e3e:	f8c8 400c 	str.w	r4, [r8, #12]
  iqp->q_notify  = infy;
  200e42:	629c      	str	r4, [r3, #40]	; 0x28
  oqp->q_counter = size;
  200e44:	f8c3 a038 	str.w	sl, [r3, #56]	; 0x38
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200e48:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200e4c:	f889 7327 	strb.w	r7, [r9, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200e50:	f8c9 1184 	str.w	r1, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200e54:	f8c9 1004 	str.w	r1, [r9, #4]
  ST_ENABLE_CLOCK();
  200e58:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  ST_ENABLE_STOP();
  200e5a:	4836      	ldr	r0, [pc, #216]	; (200f34 <main+0x364>)
  ST_ENABLE_CLOCK();
  200e5c:	ea42 020e 	orr.w	r2, r2, lr
  iqp->q_link    = link;
  200e60:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
  200e62:	651b      	str	r3, [r3, #80]	; 0x50
  200e64:	642a      	str	r2, [r5, #64]	; 0x40
  ST_ENABLE_STOP();
  200e66:	6882      	ldr	r2, [r0, #8]
  oqp->q_buffer  = bp;
  200e68:	4f33      	ldr	r7, [pc, #204]	; (200f38 <main+0x368>)
  200e6a:	ea42 020e 	orr.w	r2, r2, lr
  200e6e:	63df      	str	r7, [r3, #60]	; 0x3c
  200e70:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  200e72:	f04f 32ff 	mov.w	r2, #4294967295
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  200e76:	f8c6 c028 	str.w	ip, [r6, #40]	; 0x28
  oqp->q_top     = bp + size;
  200e7a:	f107 0c10 	add.w	ip, r7, #16
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  200e7e:	62f2      	str	r2, [r6, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
  200e80:	f103 0230 	add.w	r2, r3, #48	; 0x30
  STM32_ST_TIM->CCMR1  = 0;
  200e84:	61b4      	str	r4, [r6, #24]
  halInit();

  //GPTDriver *delayDriver    = &GPTD4;
  PWMDriver *pwmDriver      = &PWMD4;

  palSetLineMode( LINE_QSPI_BK1_IO1, PAL_MODE_ALTERNATE(2) );   // PD12
  200e86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  STM32_ST_TIM->CCR[0] = 0;
  200e8a:	6374      	str	r4, [r6, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
  200e8c:	60f4      	str	r4, [r6, #12]
  STM32_ST_TIM->CR2    = 0;
  200e8e:	6074      	str	r4, [r6, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  200e90:	f8c6 e014 	str.w	lr, [r6, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  200e94:	f8c6 e000 	str.w	lr, [r6]
  oqp->q_notify  = onfy;
  200e98:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 200f88 <main+0x3b8>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200e9c:	f889 131c 	strb.w	r1, [r9, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ea0:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
  SD3.clock = STM32_USART3CLK;
  200ea4:	4925      	ldr	r1, [pc, #148]	; (200f3c <main+0x36c>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200ea6:	f8c9 a000 	str.w	sl, [r9]
  oqp->q_rdptr   = bp;
  200eaa:	649f      	str	r7, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
  200eac:	645f      	str	r7, [r3, #68]	; 0x44
  SD3.usart = USART3;
  200eae:	4f24      	ldr	r7, [pc, #144]	; (200f40 <main+0x370>)
  oqp->q_top     = bp + size;
  200eb0:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
  200eb4:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
  200eb8:	631a      	str	r2, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200eba:	635a      	str	r2, [r3, #52]	; 0x34
  200ebc:	655f      	str	r7, [r3, #84]	; 0x54
  SD3.clock = STM32_USART3CLK;
  200ebe:	6599      	str	r1, [r3, #88]	; 0x58
  200ec0:	f7ff fa1e 	bl	200300 <_pal_lld_setgroupmode.constprop.3>
  palSetLineMode(  LINE_ZIO_D28, PAL_MODE_ALTERNATE(2) );       // PD13
  200ec4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  200ec8:	f7ff fa1a 	bl	200300 <_pal_lld_setgroupmode.constprop.3>
  200ecc:	2320      	movs	r3, #32
  200ece:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  200ed2:	481c      	ldr	r0, [pc, #112]	; (200f44 <main+0x374>)
  if (pwmp->state == PWM_STOP) {
  200ed4:	f898 3000 	ldrb.w	r3, [r8]
  pwmp->period = config->period;
  200ed8:	6842      	ldr	r2, [r0, #4]
  200eda:	2b01      	cmp	r3, #1
  pwmp->config = config;
  200edc:	f8c8 0004 	str.w	r0, [r8, #4]
  pwmp->period = config->period;
  200ee0:	f8c8 2008 	str.w	r2, [r8, #8]
  200ee4:	f000 80b5 	beq.w	201052 <main+0x482>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  200ee8:	f8d8 3018 	ldr.w	r3, [r8, #24]
  200eec:	601c      	str	r4, [r3, #0]
    if (pwmp->channels > 4) {
  200eee:	f898 1010 	ldrb.w	r1, [r8, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  200ef2:	635c      	str	r4, [r3, #52]	; 0x34
    if (pwmp->channels > 4) {
  200ef4:	2904      	cmp	r1, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  200ef6:	639c      	str	r4, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  200ef8:	63dc      	str	r4, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  200efa:	641c      	str	r4, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  200efc:	d901      	bls.n	200f02 <main+0x332>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  200efe:	659c      	str	r4, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  200f00:	65dc      	str	r4, [r3, #92]	; 0x5c
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  200f02:	2400      	movs	r4, #0
  200f04:	f8d8 1014 	ldr.w	r1, [r8, #20]
  200f08:	625c      	str	r4, [r3, #36]	; 0x24
  200f0a:	e03f      	b.n	200f8c <main+0x3bc>
  200f0c:	40023800 	.word	0x40023800
  200f10:	40007000 	.word	0x40007000
  200f14:	40020000 	.word	0x40020000
  200f18:	2000081c 	.word	0x2000081c
  200f1c:	200008f4 	.word	0x200008f4
  200f20:	003fcfff 	.word	0x003fcfff
  200f24:	40021800 	.word	0x40021800
  200f28:	55555550 	.word	0x55555550
  200f2c:	40022400 	.word	0x40022400
  200f30:	40000800 	.word	0x40000800
  200f34:	e0042000 	.word	0xe0042000
  200f38:	20000904 	.word	0x20000904
  200f3c:	0337f980 	.word	0x0337f980
  200f40:	40004800 	.word	0x40004800
  200f44:	20020000 	.word	0x20020000
  200f48:	40005551 	.word	0x40005551
  200f4c:	000aaa0a 	.word	0x000aaa0a
  200f50:	b0000bb0 	.word	0xb0000bb0
  200f54:	2aae8028 	.word	0x2aae8028
  200f58:	18004001 	.word	0x18004001
  200f5c:	01555051 	.word	0x01555051
  200f60:	00bb00b0 	.word	0x00bb00b0
  200f64:	55505555 	.word	0x55505555
  200f68:	cffffff3 	.word	0xcffffff3
  200f6c:	40021400 	.word	0x40021400
  200f70:	51155555 	.word	0x51155555
  200f74:	3cccf000 	.word	0x3cccf000
  200f78:	00b0b000 	.word	0x00b0b000
  200f7c:	0800139c 	.word	0x0800139c
  200f80:	20000800 	.word	0x20000800
  200f84:	e000e100 	.word	0xe000e100
  200f88:	00200391 	.word	0x00200391
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200f8c:	6804      	ldr	r4, [r0, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  200f8e:	1e55      	subs	r5, r2, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200f90:	68c2      	ldr	r2, [r0, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
  200f92:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200f94:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200f98:	fbb1 f1f4 	udiv	r1, r1, r4
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200f9c:	2a01      	cmp	r2, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200f9e:	f101 31ff 	add.w	r1, r1, #4294967295
  pwmp->tim->PSC  = psc;
  200fa2:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  200fa4:	62dd      	str	r5, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  200fa6:	605e      	str	r6, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200fa8:	d003      	beq.n	200fb2 <main+0x3e2>
  ccer = 0;
  200faa:	2a02      	cmp	r2, #2
  200fac:	bf0c      	ite	eq
  200fae:	2203      	moveq	r2, #3
  200fb0:	2200      	movne	r2, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  200fb2:	6941      	ldr	r1, [r0, #20]
  200fb4:	f001 010f 	and.w	r1, r1, #15
  200fb8:	2901      	cmp	r1, #1
  200fba:	d003      	beq.n	200fc4 <main+0x3f4>
  200fbc:	2902      	cmp	r1, #2
  200fbe:	d103      	bne.n	200fc8 <main+0x3f8>
    ccer |= STM32_TIM_CCER_CC2P;
  200fc0:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  200fc4:	f042 0210 	orr.w	r2, r2, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  200fc8:	69c1      	ldr	r1, [r0, #28]
  200fca:	f001 010f 	and.w	r1, r1, #15
  200fce:	2901      	cmp	r1, #1
  200fd0:	d003      	beq.n	200fda <main+0x40a>
  200fd2:	2902      	cmp	r1, #2
  200fd4:	d103      	bne.n	200fde <main+0x40e>
    ccer |= STM32_TIM_CCER_CC3P;
  200fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  200fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  200fde:	6a41      	ldr	r1, [r0, #36]	; 0x24
  200fe0:	f001 010f 	and.w	r1, r1, #15
  200fe4:	2901      	cmp	r1, #1
  200fe6:	d003      	beq.n	200ff0 <main+0x420>
  200fe8:	2902      	cmp	r1, #2
  200fea:	d103      	bne.n	200ff4 <main+0x424>
    ccer |= STM32_TIM_CCER_CC4P;
  200fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  200ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  200ff4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  200ff6:	2601      	movs	r6, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  200ff8:	2000      	movs	r0, #0
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  200ffa:	2585      	movs	r5, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  200ffc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  201000:	2402      	movs	r4, #2
  pwmp->tim->CCER  = ccer;
  201002:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201004:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201006:	6118      	str	r0, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201008:	60d9      	str	r1, [r3, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  20100a:	601d      	str	r5, [r3, #0]
  pwmp->enabled = 0;
  20100c:	f8c8 000c 	str.w	r0, [r8, #12]
  pwmp->state = PWM_READY;
  201010:	f888 4000 	strb.w	r4, [r8]
  201014:	f380 8811 	msr	BASEPRI, r0
  201018:	2120      	movs	r1, #32
  20101a:	f381 8811 	msr	BASEPRI, r1

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  20101e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    pwmp->tim->CCR[channel] = width;
  201022:	f247 5230 	movw	r2, #30000	; 0x7530
  201026:	f8d8 4018 	ldr.w	r4, [r8, #24]
  20102a:	4333      	orrs	r3, r6
  20102c:	6362      	str	r2, [r4, #52]	; 0x34
  20102e:	f8c8 300c 	str.w	r3, [r8, #12]
  201032:	f380 8811 	msr	BASEPRI, r0
  201036:	f381 8811 	msr	BASEPRI, r1
  20103a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  20103e:	f8d8 1018 	ldr.w	r1, [r8, #24]
  201042:	f043 0302 	orr.w	r3, r3, #2
  201046:	638a      	str	r2, [r1, #56]	; 0x38
  201048:	f8c8 300c 	str.w	r3, [r8, #12]
  20104c:	f380 8811 	msr	BASEPRI, r0
  201050:	e7fe      	b.n	201050 <main+0x480>
      rccEnableTIM4(FALSE);
  201052:	6c29      	ldr	r1, [r5, #64]	; 0x40
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201054:	f646 0768 	movw	r7, #26728	; 0x6868
  201058:	f8d8 3018 	ldr.w	r3, [r8, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20105c:	f04f 0e70 	mov.w	lr, #112	; 0x70
      rccEnableTIM4(FALSE);
  201060:	f041 0104 	orr.w	r1, r1, #4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  201064:	f8df c02c 	ldr.w	ip, [pc, #44]	; 201094 <main+0x4c4>
      rccEnableTIM4(FALSE);
  201068:	6429      	str	r1, [r5, #64]	; 0x40
      rccResetTIM4();
  20106a:	6a29      	ldr	r1, [r5, #32]
  20106c:	f041 0104 	orr.w	r1, r1, #4
  201070:	6229      	str	r1, [r5, #32]
      pwmp->clock = STM32_TIMCLK1;
  201072:	4907      	ldr	r1, [pc, #28]	; (201090 <main+0x4c0>)
      rccResetTIM4();
  201074:	622c      	str	r4, [r5, #32]
  201076:	f889 e31e 	strb.w	lr, [r9, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20107a:	f8c9 6180 	str.w	r6, [r9, #384]	; 0x180
      pwmp->clock = STM32_TIMCLK1;
  20107e:	f8c8 1014 	str.w	r1, [r8, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201082:	f8c9 6000 	str.w	r6, [r9]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201086:	619f      	str	r7, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  201088:	61df      	str	r7, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  20108a:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
  20108e:	e77d      	b.n	200f8c <main+0x3bc>
  201090:	066ff300 	.word	0x066ff300
  201094:	01016868 	.word	0x01016868
	...

002010a0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  2010a0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2010a2:	4b33      	ldr	r3, [pc, #204]	; (201170 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  2010a4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  2010a8:	4a32      	ldr	r2, [pc, #200]	; (201174 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2010aa:	4c33      	ldr	r4, [pc, #204]	; (201178 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2010ac:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2010ae:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2010b0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2010b2:	681a      	ldr	r2, [r3, #0]
  2010b4:	f042 0201 	orr.w	r2, r2, #1
  2010b8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2010ba:	680b      	ldr	r3, [r1, #0]
  2010bc:	079b      	lsls	r3, r3, #30
  2010be:	d5fc      	bpl.n	2010ba <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2010c0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2010c2:	4a2b      	ldr	r2, [pc, #172]	; (201170 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2010c4:	f023 0303 	bic.w	r3, r3, #3
  2010c8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  2010ca:	688b      	ldr	r3, [r1, #8]
  2010cc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2010ce:	6893      	ldr	r3, [r2, #8]
  2010d0:	f013 030c 	ands.w	r3, r3, #12
  2010d4:	d1fb      	bne.n	2010ce <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2010d6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2010d8:	4925      	ldr	r1, [pc, #148]	; (201170 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2010da:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2010de:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2010e0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2010e2:	6813      	ldr	r3, [r2, #0]
  2010e4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2010e8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2010ea:	680b      	ldr	r3, [r1, #0]
  2010ec:	039d      	lsls	r5, r3, #14
  2010ee:	d5fc      	bpl.n	2010ea <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2010f0:	4b22      	ldr	r3, [pc, #136]	; (20117c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2010f2:	4820      	ldr	r0, [pc, #128]	; (201174 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2010f4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2010f6:	680b      	ldr	r3, [r1, #0]
  2010f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2010fc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2010fe:	6843      	ldr	r3, [r0, #4]
  201100:	045c      	lsls	r4, r3, #17
  201102:	d5fc      	bpl.n	2010fe <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201104:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201106:	4a1b      	ldr	r2, [pc, #108]	; (201174 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20110c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20110e:	6853      	ldr	r3, [r2, #4]
  201110:	03d9      	lsls	r1, r3, #15
  201112:	d5fc      	bpl.n	20110e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201114:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201116:	4917      	ldr	r1, [pc, #92]	; (201174 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20111c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20111e:	684b      	ldr	r3, [r1, #4]
  201120:	039a      	lsls	r2, r3, #14
  201122:	d5fc      	bpl.n	20111e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201124:	4a12      	ldr	r2, [pc, #72]	; (201170 <__early_init+0xd0>)
  201126:	6813      	ldr	r3, [r2, #0]
  201128:	019b      	lsls	r3, r3, #6
  20112a:	d5fc      	bpl.n	201126 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20112c:	4b14      	ldr	r3, [pc, #80]	; (201180 <__early_init+0xe0>)
  20112e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201132:	4d14      	ldr	r5, [pc, #80]	; (201184 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201134:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201138:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20113a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20113c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201140:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201144:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201146:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201148:	4909      	ldr	r1, [pc, #36]	; (201170 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20114a:	f043 0302 	orr.w	r3, r3, #2
  20114e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201150:	688b      	ldr	r3, [r1, #8]
  201152:	f003 030c 	and.w	r3, r3, #12
  201156:	2b08      	cmp	r3, #8
  201158:	d1fa      	bne.n	201150 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20115a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201160:	644b      	str	r3, [r1, #68]	; 0x44
  201162:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201168:	bc30      	pop	{r4, r5}
  20116a:	664b      	str	r3, [r1, #100]	; 0x64
  20116c:	4770      	bx	lr
  20116e:	bf00      	nop
  201170:	40023800 	.word	0x40023800
  201174:	40007000 	.word	0x40007000
  201178:	10000400 	.word	0x10000400
  20117c:	09006c10 	.word	0x09006c10
  201180:	40023c00 	.word	0x40023c00
  201184:	30999400 	.word	0x30999400
	...

00201190 <chThdExit>:
void chThdExit(msg_t msg) {
  201190:	b538      	push	{r3, r4, r5, lr}
  201192:	2220      	movs	r2, #32
  201194:	4603      	mov	r3, r0
  201196:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20119a:	4a10      	ldr	r2, [pc, #64]	; (2011dc <chThdExit+0x4c>)
  20119c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20119e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  2011a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  2011a4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  2011a6:	4285      	cmp	r5, r0
  2011a8:	d006      	beq.n	2011b8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  2011aa:	6803      	ldr	r3, [r0, #0]
  2011ac:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  2011ae:	f7ff f9f7 	bl	2005a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  2011b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  2011b4:	42a8      	cmp	r0, r5
  2011b6:	d1f8      	bne.n	2011aa <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  2011b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  2011bc:	b943      	cbnz	r3, 2011d0 <chThdExit+0x40>
  2011be:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  2011c2:	079b      	lsls	r3, r3, #30
  2011c4:	d104      	bne.n	2011d0 <chThdExit+0x40>
    REG_REMOVE(tp);
  2011c6:	6922      	ldr	r2, [r4, #16]
  2011c8:	6963      	ldr	r3, [r4, #20]
  2011ca:	611a      	str	r2, [r3, #16]
  2011cc:	6922      	ldr	r2, [r4, #16]
  2011ce:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  2011d0:	200f      	movs	r0, #15
}
  2011d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  2011d6:	f7ff bb03 	b.w	2007e0 <chSchGoSleepS>
  2011da:	bf00      	nop
  2011dc:	2000087c 	.word	0x2000087c

002011e0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2011e0:	4a0e      	ldr	r2, [pc, #56]	; (20121c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2011e2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2011e4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2011e6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2011e8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2011ea:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2011ec:	6994      	ldr	r4, [r2, #24]
  2011ee:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2011f0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2011f2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2011f6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2011fa:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2011fc:	6190      	str	r0, [r2, #24]
  2011fe:	e000      	b.n	201202 <chSchDoReschedule+0x22>
  201200:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201202:	689a      	ldr	r2, [r3, #8]
  201204:	4291      	cmp	r1, r2
  201206:	d3fb      	bcc.n	201200 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201208:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20120a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20120c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20120e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201210:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201212:	605c      	str	r4, [r3, #4]
}
  201214:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201216:	f7ff b85d 	b.w	2002d4 <_port_switch>
  20121a:	bf00      	nop
  20121c:	2000087c 	.word	0x2000087c

00201220 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201220:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201222:	4f12      	ldr	r7, [pc, #72]	; (20126c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201224:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201226:	4d12      	ldr	r5, [pc, #72]	; (201270 <__init_ram_areas+0x50>)
  201228:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20122c:	4c11      	ldr	r4, [pc, #68]	; (201274 <__init_ram_areas+0x54>)
  20122e:	4b12      	ldr	r3, [pc, #72]	; (201278 <__init_ram_areas+0x58>)
  201230:	4912      	ldr	r1, [pc, #72]	; (20127c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201232:	429c      	cmp	r4, r3
  201234:	d911      	bls.n	20125a <__init_ram_areas+0x3a>
  201236:	3904      	subs	r1, #4
  201238:	461a      	mov	r2, r3
      *p = *tp;
  20123a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20123e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201242:	4294      	cmp	r4, r2
  201244:	d8f9      	bhi.n	20123a <__init_ram_areas+0x1a>
  201246:	43da      	mvns	r2, r3
  201248:	4414      	add	r4, r2
  20124a:	f024 0403 	bic.w	r4, r4, #3
  20124e:	3404      	adds	r4, #4
  201250:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201252:	429d      	cmp	r5, r3
  201254:	d903      	bls.n	20125e <__init_ram_areas+0x3e>
      *p = 0;
  201256:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20125a:	429d      	cmp	r5, r3
  20125c:	d8fb      	bhi.n	201256 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20125e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201260:	4577      	cmp	r7, lr
  201262:	d202      	bcs.n	20126a <__init_ram_areas+0x4a>
  201264:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201268:	e7e3      	b.n	201232 <__init_ram_areas+0x12>
  20126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20126c:	0800131c 	.word	0x0800131c
  201270:	20020044 	.word	0x20020044
  201274:	20020044 	.word	0x20020044
  201278:	20020044 	.word	0x20020044
  20127c:	08001400 	.word	0x08001400

00201280 <__default_exit>:
void __default_exit(void) {
  201280:	e7fe      	b.n	201280 <__default_exit>
  201282:	bf00      	nop
	...

00201290 <__late_init>:
void __late_init(void) {}
  201290:	4770      	bx	lr
  201292:	bf00      	nop
	...

002012a0 <__core_init>:
void __core_init(void) {
  2012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2012a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2012a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2012aa:	4c1b      	ldr	r4, [pc, #108]	; (201318 <__core_init+0x78>)
  2012ac:	2200      	movs	r2, #0
  2012ae:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2012b2:	6963      	ldr	r3, [r4, #20]
  2012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2012b8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2012ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2012be:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2012c2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2012c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2012ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2012ce:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2012d2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2012d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2012da:	07b7      	lsls	r7, r6, #30
  2012dc:	015d      	lsls	r5, r3, #5
  2012de:	ea05 000e 	and.w	r0, r5, lr
  2012e2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2012e4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2012e6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2012ea:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2012ec:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2012f0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2012f4:	1c53      	adds	r3, r2, #1
  2012f6:	d1f6      	bne.n	2012e6 <__core_init+0x46>
  2012f8:	3d20      	subs	r5, #32
    } while(sets--);
  2012fa:	f115 0f20 	cmn.w	r5, #32
  2012fe:	d1ee      	bne.n	2012de <__core_init+0x3e>
  201300:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201304:	6963      	ldr	r3, [r4, #20]
  201306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20130a:	6163      	str	r3, [r4, #20]
  20130c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201310:	f3bf 8f6f 	isb	sy
  201314:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201316:	bf00      	nop
  201318:	e000ed00 	.word	0xe000ed00
