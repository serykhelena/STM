
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f002 f8bf 	bl	2023a0 <__core_init>
  200222:	f001 fadd 	bl	2017e0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f002 f859 	bl	202320 <__init_ram_areas>
  20026e:	f002 f88f 	bl	202390 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 f83d 	bl	200300 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f002 b873 	b.w	202380 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08002bb4 	.word	0x08002bb4
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000f10 	.word	0x20000f10
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 ffe6 	bl	2022c0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 fdd4 	bl	201ea0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <main>:
    chThdSleepSeconds(1);
  }
}

int main(void)
{
  200300:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  200304:	4f76      	ldr	r7, [pc, #472]	; (2004e0 <main+0x1e0>)
  200306:	b089      	sub	sp, #36	; 0x24
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
  200308:	2400      	movs	r4, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  20030a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  20030e:	f107 031c 	add.w	r3, r7, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  200312:	f04f 35ff 	mov.w	r5, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
  200316:	f04f 0800 	mov.w	r8, #0
  20031a:	f04f 0900 	mov.w	r9, #0
  chTMStartMeasurementX(&tm);
  20031e:	a802      	add	r0, sp, #8
  200320:	603f      	str	r7, [r7, #0]
  tqp->prev = (thread_t *)tqp;
  200322:	607f      	str	r7, [r7, #4]
  ch.vtlist.delta = (systime_t)-1;
  200324:	84ba      	strh	r2, [r7, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200326:	61fb      	str	r3, [r7, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200328:	623b      	str	r3, [r7, #32]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20032a:	613f      	str	r7, [r7, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20032c:	617f      	str	r7, [r7, #20]
  ch.rlist.prio = NOPRIO;
  20032e:	60bc      	str	r4, [r7, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200330:	84fc      	strh	r4, [r7, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200332:	673c      	str	r4, [r7, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200334:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  200336:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  200338:	9405      	str	r4, [sp, #20]
  tmp->best       = (rtcnt_t)-1;
  20033a:	9502      	str	r5, [sp, #8]
  tmp->cumulative = (rttime_t)0;
  20033c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  chTMStartMeasurementX(&tm);
  200340:	f002 f89e 	bl	202480 <chTMStartMeasurementX.constprop.33>
  chTMStopMeasurementX(&tm);
  200344:	a802      	add	r0, sp, #8
  200346:	f001 fd83 	bl	201e50 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20034a:	4b66      	ldr	r3, [pc, #408]	; (2004e4 <main+0x1e4>)
  20034c:	4966      	ldr	r1, [pc, #408]	; (2004e8 <main+0x1e8>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  20034e:	f64f 09ff 	movw	r9, #63743	; 0xf8ff
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  200352:	4a66      	ldr	r2, [pc, #408]	; (2004ec <main+0x1ec>)
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
  200354:	f107 002c 	add.w	r0, r7, #44	; 0x2c
  200358:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20035a:	f103 0810 	add.w	r8, r3, #16
  20035e:	4964      	ldr	r1, [pc, #400]	; (2004f0 <main+0x1f0>)
  tp->prio      = prio;
  200360:	f04f 0c80 	mov.w	ip, #128	; 0x80
  ch.tm.offset = tm.last;
  200364:	9e04      	ldr	r6, [sp, #16]
  200366:	6011      	str	r1, [r2, #0]
  endmem  = __heap_end__;
  200368:	4a62      	ldr	r2, [pc, #392]	; (2004f4 <main+0x1f4>)
  20036a:	4963      	ldr	r1, [pc, #396]	; (2004f8 <main+0x1f8>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  20036c:	f887 404d 	strb.w	r4, [r7, #77]	; 0x4d
  200370:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200372:	2201      	movs	r2, #1
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  200374:	4961      	ldr	r1, [pc, #388]	; (2004fc <main+0x1fc>)
  tp->mtxlist   = NULL;
  200376:	667c      	str	r4, [r7, #100]	; 0x64
  200378:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  20037c:	673e      	str	r6, [r7, #112]	; 0x70
  tp->name      = name;
  20037e:	4e60      	ldr	r6, [pc, #384]	; (200500 <main+0x200>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200380:	ea0e 0e09 	and.w	lr, lr, r9
  tp->prio      = prio;
  200384:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
  tp->name      = name;
  200388:	647e      	str	r6, [r7, #68]	; 0x44
  reg_value  =  (reg_value                                   |
  20038a:	4e5e      	ldr	r6, [pc, #376]	; (200504 <main+0x204>)
  tp->realprio  = prio;
  20038c:	f8c7 c068 	str.w	ip, [r7, #104]	; 0x68
  tlp->next = (thread_t *)tlp;
  200390:	f107 0c54 	add.w	ip, r7, #84	; 0x54
  200394:	ea4e 0606 	orr.w	r6, lr, r6
  REG_INSERT(tp);
  200398:	f8d7 e014 	ldr.w	lr, [r7, #20]
  tp->epending  = (eventmask_t)0;
  20039c:	663c      	str	r4, [r7, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  20039e:	619c      	str	r4, [r3, #24]
  tqp->next = (thread_t *)tqp;
  2003a0:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  2003a4:	f8c3 8014 	str.w	r8, [r3, #20]
  tp->refs      = (trefs_t)1;
  2003a8:	f887 204e 	strb.w	r2, [r7, #78]	; 0x4e
  REG_INSERT(tp);
  2003ac:	f8c7 e040 	str.w	lr, [r7, #64]	; 0x40
  2003b0:	63ff      	str	r7, [r7, #60]	; 0x3c
  2003b2:	f8ce 0010 	str.w	r0, [lr, #16]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2003b6:	f8df e178 	ldr.w	lr, [pc, #376]	; 200530 <main+0x230>
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  2003ba:	60ce      	str	r6, [r1, #12]
  tqp->next = (thread_t *)tqp;
  2003bc:	f107 0658 	add.w	r6, r7, #88	; 0x58
  H_NEXT(&default_heap.header) = NULL;
  2003c0:	609c      	str	r4, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
  2003c2:	60dc      	str	r4, [r3, #12]
  2003c4:	f8de 300c 	ldr.w	r3, [lr, #12]
  2003c8:	6178      	str	r0, [r7, #20]
  2003ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2003ce:	61b8      	str	r0, [r7, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  2003d0:	64bc      	str	r4, [r7, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  2003d2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
  tlp->next = (thread_t *)tlp;
  2003d6:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  2003da:	484b      	ldr	r0, [pc, #300]	; (200508 <main+0x208>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2003dc:	f8ce 300c 	str.w	r3, [lr, #12]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2003e0:	f04f 0e10 	mov.w	lr, #16
  DWT->LAR = 0xC5ACCE55U;
  2003e4:	4b49      	ldr	r3, [pc, #292]	; (20050c <main+0x20c>)
  tqp->next = (thread_t *)tqp;
  2003e6:	65be      	str	r6, [r7, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  2003e8:	65fe      	str	r6, [r7, #92]	; 0x5c
  2003ea:	2620      	movs	r6, #32
  2003ec:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  2003f0:	6818      	ldr	r0, [r3, #0]
  2003f2:	4310      	orrs	r0, r2
  2003f4:	6018      	str	r0, [r3, #0]
  2003f6:	f881 e01f 	strb.w	lr, [r1, #31]
  2003fa:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2003fe:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  200402:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200404:	f386 8811 	msr	BASEPRI, r6
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
  200408:	4b41      	ldr	r3, [pc, #260]	; (200510 <main+0x210>)
  tp->state     = CH_STATE_WTSTART;
  20040a:	f04f 0c02 	mov.w	ip, #2
  REG_INSERT(tp);
  20040e:	697e      	ldr	r6, [r7, #20]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200410:	f103 006c 	add.w	r0, r3, #108	; 0x6c
  REG_INSERT(tp);
  200414:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->prio      = prio;
  200418:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tqp->next = (thread_t *)tqp;
  20041c:	f103 08bc 	add.w	r8, r3, #188	; 0xbc
  tp->realprio  = prio;
  200420:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tlp->next = (thread_t *)tlp;
  200424:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
  tp->refs      = (trefs_t)1;
  200428:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  20042c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
  tp->state     = CH_STATE_WTSTART;
  200430:	f883 c0b0 	strb.w	ip, [r3, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200434:	4a37      	ldr	r2, [pc, #220]	; (200514 <main+0x214>)
  tp->name      = name;
  200436:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 200534 <main+0x234>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  20043a:	4837      	ldr	r0, [pc, #220]	; (200518 <main+0x218>)
  20043c:	671c      	str	r4, [r3, #112]	; 0x70
  20043e:	66d8      	str	r0, [r3, #108]	; 0x6c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
  200440:	4608      	mov	r0, r1
  REG_INSERT(tp);
  200442:	f8c3 60a4 	str.w	r6, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200446:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->mtxlist   = NULL;
  20044a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
  20044e:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  REG_INSERT(tp);
  200452:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200456:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->name      = name;
  20045a:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  20045e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  REG_INSERT(tp);
  200462:	6131      	str	r1, [r6, #16]
  200464:	f8c3 e0b8 	str.w	lr, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200468:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  20046c:	f8c3 80c0 	str.w	r8, [r3, #192]	; 0xc0
  200470:	6179      	str	r1, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
  200472:	f001 ffd5 	bl	202420 <chSchWakeupS.constprop.37>
  200476:	f384 8811 	msr	BASEPRI, r4
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  20047a:	4b28      	ldr	r3, [pc, #160]	; (20051c <main+0x21c>)
  PWR->CR1 |= PWR_CR1_DBP;
  20047c:	4928      	ldr	r1, [pc, #160]	; (200520 <main+0x220>)
  rccResetAHB1(~0);
  20047e:	691a      	ldr	r2, [r3, #16]
  200480:	611d      	str	r5, [r3, #16]
  200482:	611c      	str	r4, [r3, #16]
  rccResetAHB2(~0);
  200484:	695a      	ldr	r2, [r3, #20]
  200486:	615d      	str	r5, [r3, #20]
  200488:	615c      	str	r4, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  20048a:	6a1a      	ldr	r2, [r3, #32]
  20048c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
  200490:	621a      	str	r2, [r3, #32]
  200492:	621c      	str	r4, [r3, #32]
  rccResetAPB2(~0);
  200494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  200496:	625d      	str	r5, [r3, #36]	; 0x24
  200498:	625c      	str	r4, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  20049a:	680a      	ldr	r2, [r1, #0]
  20049c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  2004a0:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2004a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2004a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  2004a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  2004ac:	d003      	beq.n	2004b6 <main+0x1b6>
    RCC->BDCR = RCC_BDCR_BDRST;
  2004ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  2004b2:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2004b4:	671c      	str	r4, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2004b6:	4b19      	ldr	r3, [pc, #100]	; (20051c <main+0x21c>)
  2004b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2004ba:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2004bc:	f042 0219 	orr.w	r2, r2, #25
  2004c0:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2004c2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  2004c4:	079b      	lsls	r3, r3, #30
  2004c6:	d5fc      	bpl.n	2004c2 <main+0x1c2>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2004c8:	4815      	ldr	r0, [pc, #84]	; (200520 <main+0x220>)
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  2004ca:	f04f 0e00 	mov.w	lr, #0
  2004ce:	4915      	ldr	r1, [pc, #84]	; (200524 <main+0x224>)
  2004d0:	6842      	ldr	r2, [r0, #4]
    _stm32_dma_streams[i].stream->CR = 0U;
  2004d2:	4673      	mov	r3, lr
  2004d4:	4c14      	ldr	r4, [pc, #80]	; (200528 <main+0x228>)
  2004d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  2004da:	4d14      	ldr	r5, [pc, #80]	; (20052c <main+0x22c>)
  2004dc:	6042      	str	r2, [r0, #4]
  2004de:	e02d      	b.n	20053c <main+0x23c>
  2004e0:	20000e9c 	.word	0x20000e9c
  2004e4:	20000bb0 	.word	0x20000bb0
  2004e8:	00201b41 	.word	0x00201b41
  2004ec:	20000c54 	.word	0x20000c54
  2004f0:	20020000 	.word	0x20020000
  2004f4:	20000c50 	.word	0x20000c50
  2004f8:	20080000 	.word	0x20080000
  2004fc:	e000ed00 	.word	0xe000ed00
  200500:	080029a0 	.word	0x080029a0
  200504:	05fa0300 	.word	0x05fa0300
  200508:	c5acce55 	.word	0xc5acce55
  20050c:	e0001000 	.word	0xe0001000
  200510:	20000ad8 	.word	0x20000ad8
  200514:	002002e5 	.word	0x002002e5
  200518:	00201c01 	.word	0x00201c01
  20051c:	40023800 	.word	0x40023800
  200520:	40007000 	.word	0x40007000
  200524:	080028ec 	.word	0x080028ec
  200528:	40026010 	.word	0x40026010
  20052c:	20000bd0 	.word	0x20000bd0
  200530:	e000edf0 	.word	0xe000edf0
  200534:	08002ac0 	.word	0x08002ac0
  200538:	f851 4c0c 	ldr.w	r4, [r1, #-12]
  20053c:	6023      	str	r3, [r4, #0]
  20053e:	310c      	adds	r1, #12
    dma_isr_redir[i].dma_func = NULL;
  200540:	f845 303e 	str.w	r3, [r5, lr, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  200544:	f10e 0e01 	add.w	lr, lr, #1
  200548:	f1be 0f10 	cmp.w	lr, #16
  20054c:	d1f4      	bne.n	200538 <main+0x238>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  20054e:	f04f 36ff 	mov.w	r6, #4294967295
  200552:	49c9      	ldr	r1, [pc, #804]	; (200878 <main+0x578>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  200554:	4ac9      	ldr	r2, [pc, #804]	; (20087c <main+0x57c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200556:	f240 74ff 	movw	r4, #2047	; 0x7ff
  DMA1->LIFCR = 0xFFFFFFFFU;
  20055a:	608e      	str	r6, [r1, #8]
  gpiop->ODR     = config->odr;
  20055c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->HIFCR = 0xFFFFFFFFU;
  200560:	60ce      	str	r6, [r1, #12]
  200562:	f64b 797e 	movw	r9, #49022	; 0xbf7e
  DMA2->LIFCR = 0xFFFFFFFFU;
  200566:	6096      	str	r6, [r2, #8]
  gpiop->AFRH    = config->afrh;
  200568:	f44f 0830 	mov.w	r8, #11534336	; 0xb00000
  DMA2->HIFCR = 0xFFFFFFFFU;
  20056c:	60d6      	str	r6, [r2, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  20056e:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00
  200572:	4dc3      	ldr	r5, [pc, #780]	; (200880 <main+0x580>)
  gpiop->OSPEEDR = config->ospeedr;
  200574:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200578:	6b12      	ldr	r2, [r2, #48]	; 0x30
  gpiop->MODER   = config->moder;
  20057a:	f640 2b08 	movw	fp, #2568	; 0xa08
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  20057e:	49c1      	ldr	r1, [pc, #772]	; (200884 <main+0x584>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200580:	4322      	orrs	r2, r4
  200582:	632a      	str	r2, [r5, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200584:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  200586:	ea42 0a04 	orr.w	sl, r2, r4
  gpiop->OTYPER  = config->otyper;
  20058a:	4cbf      	ldr	r4, [pc, #764]	; (200888 <main+0x588>)
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
  20058c:	4abf      	ldr	r2, [pc, #764]	; (20088c <main+0x58c>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  20058e:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
  200592:	250f      	movs	r5, #15
  gpiop->PUPDR   = config->pupdr;
  200594:	f8df a364 	ldr.w	sl, [pc, #868]	; 2008fc <main+0x5fc>
  gpiop->OTYPER  = config->otyper;
  200598:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20059a:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  20059c:	f8c4 a00c 	str.w	sl, [r4, #12]
  gpiop->AFRL    = config->afrl;
  2005a0:	f8df a35c 	ldr.w	sl, [pc, #860]	; 200900 <main+0x600>
  gpiop->ODR     = config->odr;
  2005a4:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2005a6:	f8c4 a020 	str.w	sl, [r4, #32]
  gpiop->AFRH    = config->afrh;
  2005aa:	f8df a358 	ldr.w	sl, [pc, #856]	; 200904 <main+0x604>
  2005ae:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2005b2:	f8df a354 	ldr.w	sl, [pc, #852]	; 200908 <main+0x608>
  2005b6:	f8c4 a000 	str.w	sl, [r4]
  gpiop->OTYPER  = config->otyper;
  2005ba:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  2005be:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  2005c2:	f106 468a 	add.w	r6, r6, #1157627904	; 0x45000000
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  2005c6:	f8df a344 	ldr.w	sl, [pc, #836]	; 20090c <main+0x60c>
  2005ca:	f106 1655 	add.w	r6, r6, #5570645	; 0x550055
  2005ce:	f506 56a8 	add.w	r6, r6, #5376	; 0x1500
  2005d2:	f8c4 640c 	str.w	r6, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  2005d6:	4eae      	ldr	r6, [pc, #696]	; (200890 <main+0x590>)
  gpiop->ODR     = config->odr;
  2005d8:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2005dc:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2005e0:	f8c4 8424 	str.w	r8, [r4, #1060]	; 0x424
  gpiop->PUPDR   = config->pupdr;
  2005e4:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
  2005e8:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2005ec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->PUPDR   = config->pupdr;
  2005f0:	4ea8      	ldr	r6, [pc, #672]	; (200894 <main+0x594>)
  gpiop->OTYPER  = config->otyper;
  2005f2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2005f4:	f8c4 c008 	str.w	ip, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2005f8:	60e6      	str	r6, [r4, #12]
  gpiop->AFRL    = config->afrl;
  2005fa:	4ea7      	ldr	r6, [pc, #668]	; (200898 <main+0x598>)
  gpiop->ODR     = config->odr;
  2005fc:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2005fe:	6226      	str	r6, [r4, #32]
  gpiop->OSPEEDR = config->ospeedr;
  200600:	f46f 1640 	mvn.w	r6, #3145728	; 0x300000
  gpiop->AFRH    = config->afrh;
  200604:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200606:	f8c4 b000 	str.w	fp, [r4]
  20060a:	f04f 6b08 	mov.w	fp, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  20060e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200612:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  200616:	4ea1      	ldr	r6, [pc, #644]	; (20089c <main+0x59c>)
  200618:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 200910 <main+0x610>
  20061c:	f8c4 640c 	str.w	r6, [r4, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  200620:	2677      	movs	r6, #119	; 0x77
  gpiop->ODR     = config->odr;
  200622:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200626:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  20062a:	f8c4 6424 	str.w	r6, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  20062e:	f44f 2620 	mov.w	r6, #655360	; 0xa0000
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  200632:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 200914 <main+0x614>
  200636:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  20063a:	4e99      	ldr	r6, [pc, #612]	; (2008a0 <main+0x5a0>)
  gpiop->OTYPER  = config->otyper;
  20063c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  200640:	f8c4 6808 	str.w	r6, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200644:	f8c4 880c 	str.w	r8, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  200648:	4e96      	ldr	r6, [pc, #600]	; (2008a4 <main+0x5a4>)
  gpiop->ODR     = config->odr;
  20064a:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  20064e:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200652:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200656:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  20065a:	4c93      	ldr	r4, [pc, #588]	; (2008a8 <main+0x5a8>)
  gpiop->OTYPER  = config->otyper;
  20065c:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20065e:	60b4      	str	r4, [r6, #8]
  gpiop->OTYPER  = config->otyper;
  200660:	4c92      	ldr	r4, [pc, #584]	; (2008ac <main+0x5ac>)
  gpiop->PUPDR   = config->pupdr;
  200662:	f8c6 800c 	str.w	r8, [r6, #12]
  gpiop->ODR     = config->odr;
  200666:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
  200668:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
  20066a:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20066c:	6033      	str	r3, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
  20066e:	4e90      	ldr	r6, [pc, #576]	; (2008b0 <main+0x5b0>)
  gpiop->OTYPER  = config->otyper;
  200670:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200672:	60a6      	str	r6, [r4, #8]
  200674:	2601      	movs	r6, #1
  gpiop->PUPDR   = config->pupdr;
  200676:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->AFRH    = config->afrh;
  20067a:	f8df c29c 	ldr.w	ip, [pc, #668]	; 200918 <main+0x618>
  gpiop->ODR     = config->odr;
  20067e:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200680:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200682:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200686:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
  gpiop->MODER   = config->moder;
  20068a:	f8c4 b000 	str.w	fp, [r4]
  gpiop->PUPDR   = config->pupdr;
  20068e:	f8df b28c 	ldr.w	fp, [pc, #652]	; 20091c <main+0x61c>
  gpiop->OTYPER  = config->otyper;
  200692:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200696:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
  tqp->next = (thread_t *)tqp;
  20069a:	f101 0518 	add.w	r5, r1, #24
  gpiop->PUPDR   = config->pupdr;
  20069e:	f8c4 b40c 	str.w	fp, [r4, #1036]	; 0x40c
  iqp->q_top     = bp + size;
  2006a2:	f10a 0b10 	add.w	fp, sl, #16
  gpiop->ODR     = config->odr;
  2006a6:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2006aa:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2006ae:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2006b2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2006b6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  2006ba:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2006bc:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2006be:	f8c4 800c 	str.w	r8, [r4, #12]
  adcp->config   = NULL;
  2006c2:	604b      	str	r3, [r1, #4]
  gpiop->ODR     = config->odr;
  2006c4:	6160      	str	r0, [r4, #20]
  adcp->samples  = NULL;
  2006c6:	608b      	str	r3, [r1, #8]
  gpiop->AFRL    = config->afrl;
  2006c8:	6223      	str	r3, [r4, #32]
  adcp->depth    = 0;
  2006ca:	60cb      	str	r3, [r1, #12]
  gpiop->AFRH    = config->afrh;
  2006cc:	6263      	str	r3, [r4, #36]	; 0x24
  adcp->grpp     = NULL;
  2006ce:	610b      	str	r3, [r1, #16]
  gpiop->MODER   = config->moder;
  2006d0:	6023      	str	r3, [r4, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  2006d2:	614b      	str	r3, [r1, #20]
  gpiop->OTYPER  = config->otyper;
  2006d4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  2006d8:	620b      	str	r3, [r1, #32]
  gpiop->OSPEEDR = config->ospeedr;
  2006da:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  2006de:	618d      	str	r5, [r1, #24]
  gpiop->PUPDR   = config->pupdr;
  2006e0:	f8c4 840c 	str.w	r8, [r4, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  2006e4:	61cd      	str	r5, [r1, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2006e6:	f04f 0560 	mov.w	r5, #96	; 0x60
  gpiop->ODR     = config->odr;
  2006ea:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2006ee:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2006f2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2006f6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2006fa:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2006fe:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  200702:	f8c4 880c 	str.w	r8, [r4, #2060]	; 0x80c
  tqp->next = (thread_t *)tqp;
  200706:	f102 080c 	add.w	r8, r2, #12
  gpiop->ODR     = config->odr;
  20070a:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  20070e:	4610      	mov	r0, r2
  gpiop->AFRL    = config->afrl;
  200710:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  200714:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  200718:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  20071c:	f5a4 3480 	sub.w	r4, r4, #65536	; 0x10000
  adcp->state    = ADC_STOP;
  200720:	700e      	strb	r6, [r1, #0]
  200722:	628c      	str	r4, [r1, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  200724:	4c63      	ldr	r4, [pc, #396]	; (2008b4 <main+0x5b4>)
  200726:	62cc      	str	r4, [r1, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  200728:	4c63      	ldr	r4, [pc, #396]	; (2008b8 <main+0x5b8>)
  20072a:	630c      	str	r4, [r1, #48]	; 0x30
  20072c:	f102 0430 	add.w	r4, r2, #48	; 0x30
  200730:	4962      	ldr	r1, [pc, #392]	; (2008bc <main+0x5bc>)
  200732:	f881 5312 	strb.w	r5, [r1, #786]	; 0x312
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  200736:	f109 0510 	add.w	r5, r9, #16
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20073a:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20073e:	f8c1 c000 	str.w	ip, [r1]
  oqp->q_buffer  = bp;
  200742:	f8c2 903c 	str.w	r9, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  200746:	f8c2 9048 	str.w	r9, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  20074a:	f8c2 9044 	str.w	r9, [r2, #68]	; 0x44
  oqp->q_notify  = onfy;
  20074e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 200920 <main+0x620>
  200752:	6314      	str	r4, [r2, #48]	; 0x30
  200754:	f8c2 904c 	str.w	r9, [r2, #76]	; 0x4c
  200758:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 200924 <main+0x624>
  tqp->prev = (thread_t *)tqp;
  20075c:	6354      	str	r4, [r2, #52]	; 0x34
  20075e:	f840 9b04 	str.w	r9, [r0], #4
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  200762:	4c57      	ldr	r4, [pc, #348]	; (2008c0 <main+0x5c0>)
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
  200764:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 200928 <main+0x628>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  200768:	6050      	str	r0, [r2, #4]
  20076a:	4856      	ldr	r0, [pc, #344]	; (2008c4 <main+0x5c4>)
  20076c:	7026      	strb	r6, [r4, #0]
  extp->config = NULL;
  20076e:	6063      	str	r3, [r4, #4]
  200770:	f8c9 000c 	str.w	r0, [r9, #12]
#endif

#if STM32_ICU_USE_TIM8
  /* Driver initialization.*/
  icuObjectInit(&ICUD8);
  ICUD8.tim = STM32_TIM8;
  200774:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
  200778:	4c53      	ldr	r4, [pc, #332]	; (2008c8 <main+0x5c8>)
  iqp->q_counter = 0;
  20077a:	6153      	str	r3, [r2, #20]
  iqp->q_buffer  = bp;
  20077c:	f8c2 a018 	str.w	sl, [r2, #24]
  oqp->q_counter = size;
  200780:	f8c2 e038 	str.w	lr, [r2, #56]	; 0x38
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200784:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  iqp->q_rdptr   = bp;
  200788:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  20078c:	f8c2 a020 	str.w	sl, [r2, #32]
  200790:	60e0      	str	r0, [r4, #12]
#endif

#if STM32_ICU_USE_TIM9
  /* Driver initialization.*/
  icuObjectInit(&ICUD9);
  ICUD9.tim = STM32_TIM9;
  200792:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
  200796:	f8df a194 	ldr.w	sl, [pc, #404]	; 20092c <main+0x62c>
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  20079a:	7216      	strb	r6, [r2, #8]
  iqp->q_notify  = infy;
  20079c:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_top     = bp + size;
  20079e:	f8c2 b01c 	str.w	fp, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2007a2:	f04f 0b80 	mov.w	fp, #128	; 0x80
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  2007a6:	f889 6000 	strb.w	r6, [r9]
  gptp->config = NULL;
  2007aa:	f8c9 3004 	str.w	r3, [r9, #4]
  2007ae:	7026      	strb	r6, [r4, #0]
  icup->config = NULL;
  2007b0:	6063      	str	r3, [r4, #4]
  icup->state  = ICU_STOP;
  2007b2:	f88a 6000 	strb.w	r6, [sl]
  icup->config = NULL;
  2007b6:	f8ca 3004 	str.w	r3, [sl, #4]
  2007ba:	f8ca 000c 	str.w	r0, [sl, #12]
  2007be:	2020      	movs	r0, #32
  iqp->q_link    = link;
  2007c0:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_top     = bp + size;
  2007c2:	6415      	str	r5, [r2, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
  2007c4:	f8c2 800c 	str.w	r8, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  2007c8:	f8c2 8010 	str.w	r8, [r2, #16]
  oqp->q_link    = link;
  2007cc:	6512      	str	r2, [r2, #80]	; 0x50
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2007ce:	f881 e352 	strb.w	lr, [r1, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2007d2:	f8c1 c188 	str.w	ip, [r1, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2007d6:	f8c1 c008 	str.w	ip, [r1, #8]

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  2007da:	493c      	ldr	r1, [pc, #240]	; (2008cc <main+0x5cc>)
  SD7.clock = STM32_UART7CLK;
  2007dc:	4c3c      	ldr	r4, [pc, #240]	; (2008d0 <main+0x5d0>)
  SD7.usart = UART7;
  2007de:	6551      	str	r1, [r2, #84]	; 0x54
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  2007e0:	4e3c      	ldr	r6, [pc, #240]	; (2008d4 <main+0x5d4>)
  2007e2:	493d      	ldr	r1, [pc, #244]	; (2008d8 <main+0x5d8>)
  SD7.clock = STM32_UART7CLK;
  2007e4:	6594      	str	r4, [r2, #88]	; 0x58
  2007e6:	604e      	str	r6, [r1, #4]
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2007e8:	4c3c      	ldr	r4, [pc, #240]	; (2008dc <main+0x5dc>)
  SysTick->VAL = 0;
  2007ea:	608b      	str	r3, [r1, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2007ec:	2307      	movs	r3, #7
  2007ee:	600b      	str	r3, [r1, #0]
  2007f0:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
  2007f4:	f380 8811 	msr	BASEPRI, r0
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  2007f8:	7a13      	ldrb	r3, [r2, #8]
  2007fa:	2b01      	cmp	r3, #1
  2007fc:	d105      	bne.n	20080a <main+0x50a>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  2007fe:	4b20      	ldr	r3, [pc, #128]	; (200880 <main+0x580>)
  200800:	491f      	ldr	r1, [pc, #124]	; (200880 <main+0x580>)
  200802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  200804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  200808:	640b      	str	r3, [r1, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20080a:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20080c:	f244 0540 	movw	r5, #16448	; 0x4040
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200810:	4e33      	ldr	r6, [pc, #204]	; (2008e0 <main+0x5e0>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  200812:	2401      	movs	r4, #1
  USART_TypeDef *u = sdp->usart;
  200814:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  200816:	f240 102d 	movw	r0, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20081a:	fba6 6101 	umull	r6, r1, r6, r1
  u->ICR = 0xFFFFFFFFU;
  20081e:	f04f 36ff 	mov.w	r6, #4294967295
  200822:	f04f 0800 	mov.w	r8, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200826:	0c89      	lsrs	r1, r1, #18
  200828:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  20082a:	605d      	str	r5, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20082c:	609c      	str	r4, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20082e:	6018      	str	r0, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  200830:	621e      	str	r6, [r3, #32]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
  200832:	f04f 0302 	mov.w	r3, #2
    sdp->rxmask = 0xFF;
  200836:	f882 605c 	strb.w	r6, [r2, #92]	; 0x5c
  20083a:	7213      	strb	r3, [r2, #8]
  20083c:	f388 8811 	msr	BASEPRI, r8
    chSysInit();
    halInit();

    // Serial driver
    sdStart( &SD7, &sdcfg );
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  200840:	f240 4202 	movw	r2, #1026	; 0x402
  200844:	f44f 7180 	mov.w	r1, #256	; 0x100
  200848:	4826      	ldr	r0, [pc, #152]	; (2008e4 <main+0x5e4>)
  20084a:	f04f 0b20 	mov.w	fp, #32
  20084e:	f001 f8ef 	bl	201a30 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  200852:	f240 4202 	movw	r2, #1026	; 0x402
  200856:	2180      	movs	r1, #128	; 0x80
  200858:	4822      	ldr	r0, [pc, #136]	; (2008e4 <main+0x5e4>)
  20085a:	f001 f8e9 	bl	201a30 <_pal_lld_setgroupmode>
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
  20085e:	4c22      	ldr	r4, [pc, #136]	; (2008e8 <main+0x5e8>)
  200860:	4e22      	ldr	r6, [pc, #136]	; (2008ec <main+0x5ec>)
  200862:	4a23      	ldr	r2, [pc, #140]	; (2008f0 <main+0x5f0>)
  tqp->next = (thread_t *)tqp;
  200864:	f104 0e18 	add.w	lr, r4, #24
  200868:	4922      	ldr	r1, [pc, #136]	; (2008f4 <main+0x5f4>)
  20086a:	eb04 000b 	add.w	r0, r4, fp
  20086e:	4b22      	ldr	r3, [pc, #136]	; (2008f8 <main+0x5f8>)
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  200870:	f102 0cc8 	add.w	ip, r2, #200	; 0xc8
  200874:	e05c      	b.n	200930 <main+0x630>
  200876:	bf00      	nop
  200878:	40026000 	.word	0x40026000
  20087c:	40026400 	.word	0x40026400
  200880:	40023800 	.word	0x40023800
  200884:	20000800 	.word	0x20000800
  200888:	40020000 	.word	0x40020000
  20088c:	20000e3c 	.word	0x20000e3c
  200890:	18004001 	.word	0x18004001
  200894:	01555051 	.word	0x01555051
  200898:	00bb00b0 	.word	0x00bb00b0
  20089c:	55505555 	.word	0x55505555
  2008a0:	cffffff3 	.word	0xcffffff3
  2008a4:	40021400 	.word	0x40021400
  2008a8:	003fcfff 	.word	0x003fcfff
  2008ac:	40021800 	.word	0x40021800
  2008b0:	3cccf000 	.word	0x3cccf000
  2008b4:	08002970 	.word	0x08002970
  2008b8:	00022c16 	.word	0x00022c16
  2008bc:	e000e100 	.word	0xe000e100
  2008c0:	20000834 	.word	0x20000834
  2008c4:	40000800 	.word	0x40000800
  2008c8:	2000084c 	.word	0x2000084c
  2008cc:	40007800 	.word	0x40007800
  2008d0:	0337f980 	.word	0x0337f980
  2008d4:	00034bbf 	.word	0x00034bbf
  2008d8:	e000e010 	.word	0xe000e010
  2008dc:	e000ed00 	.word	0xe000ed00
  2008e0:	91a2b3c5 	.word	0x91a2b3c5
  2008e4:	40021000 	.word	0x40021000
  2008e8:	20000ca0 	.word	0x20000ca0
  2008ec:	20000cc8 	.word	0x20000cc8
  2008f0:	20000944 	.word	0x20000944
  2008f4:	2000087c 	.word	0x2000087c
  2008f8:	20000a0c 	.word	0x20000a0c
  2008fc:	40005551 	.word	0x40005551
  200900:	b0000bb0 	.word	0xb0000bb0
  200904:	000aaa0a 	.word	0x000aaa0a
  200908:	2aae8028 	.word	0x2aae8028
  20090c:	20000c58 	.word	0x20000c58
  200910:	51155555 	.word	0x51155555
  200914:	20000c68 	.word	0x20000c68
  200918:	00b0b000 	.word	0x00b0b000
  20091c:	55555550 	.word	0x55555550
  200920:	00200ec1 	.word	0x00200ec1
  200924:	08002b0c 	.word	0x08002b0c
  200928:	2000083c 	.word	0x2000083c
  20092c:	20000864 	.word	0x20000864
  mbp->buffer = buf;
  200930:	4da6      	ldr	r5, [pc, #664]	; (200bcc <main+0x8cc>)
  200932:	6022      	str	r2, [r4, #0]
  mbp->rdptr  = buf;
  200934:	60e2      	str	r2, [r4, #12]
  mbp->wrptr  = buf;
  200936:	60a2      	str	r2, [r4, #8]
  mbp->top    = &buf[n];
  200938:	f101 02c8 	add.w	r2, r1, #200	; 0xc8
  mbp->buffer = buf;
  20093c:	6033      	str	r3, [r6, #0]
  mbp->rdptr  = buf;
  20093e:	60f3      	str	r3, [r6, #12]
  mbp->wrptr  = buf;
  200940:	60b3      	str	r3, [r6, #8]
  mbp->top    = &buf[n];
  200942:	33c8      	adds	r3, #200	; 0xc8
  200944:	f8c4 c004 	str.w	ip, [r4, #4]
  200948:	eb05 0c0b 	add.w	ip, r5, fp
  mbp->buffer = buf;
  20094c:	6029      	str	r1, [r5, #0]
  mbp->rdptr  = buf;
  20094e:	60e9      	str	r1, [r5, #12]
  mbp->wrptr  = buf;
  200950:	60a9      	str	r1, [r5, #8]
  200952:	f105 0118 	add.w	r1, r5, #24
  mbp->top    = &buf[n];
  200956:	606a      	str	r2, [r5, #4]
  200958:	f106 0218 	add.w	r2, r6, #24
  20095c:	6073      	str	r3, [r6, #4]
  20095e:	eb06 030b 	add.w	r3, r6, fp
  mbp->cnt    = (cnt_t)0;
  200962:	f8c4 8010 	str.w	r8, [r4, #16]
  mbp->reset  = false;
  200966:	f884 8014 	strb.w	r8, [r4, #20]
  mbp->cnt    = (cnt_t)0;
  20096a:	f8c5 8010 	str.w	r8, [r5, #16]
  mbp->reset  = false;
  20096e:	f885 8014 	strb.w	r8, [r5, #20]
  mbp->cnt    = (cnt_t)0;
  200972:	f8c6 8010 	str.w	r8, [r6, #16]
  mbp->reset  = false;
  200976:	f886 8014 	strb.w	r8, [r6, #20]
  20097a:	f8c4 e018 	str.w	lr, [r4, #24]
  tqp->prev = (thread_t *)tqp;
  20097e:	f8c4 e01c 	str.w	lr, [r4, #28]
  tqp->next = (thread_t *)tqp;
  200982:	6220      	str	r0, [r4, #32]
  tqp->prev = (thread_t *)tqp;
  200984:	6260      	str	r0, [r4, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200986:	61a9      	str	r1, [r5, #24]
  tqp->prev = (thread_t *)tqp;
  200988:	61e9      	str	r1, [r5, #28]
  tqp->next = (thread_t *)tqp;
  20098a:	f8c5 c020 	str.w	ip, [r5, #32]
  tqp->prev = (thread_t *)tqp;
  20098e:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
  200992:	61b2      	str	r2, [r6, #24]
  tqp->prev = (thread_t *)tqp;
  200994:	61f2      	str	r2, [r6, #28]
  tqp->next = (thread_t *)tqp;
  200996:	6233      	str	r3, [r6, #32]
  tqp->prev = (thread_t *)tqp;
  200998:	6273      	str	r3, [r6, #36]	; 0x24
  20099a:	f38b 8811 	msr	BASEPRI, fp
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
  20099e:	4b8c      	ldr	r3, [pc, #560]	; (200bd0 <main+0x8d0>)
  icu_lld_start(icup);
  2009a0:	488c      	ldr	r0, [pc, #560]	; (200bd4 <main+0x8d4>)
  icup->config = config;
  2009a2:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
  2009a6:	f000 ffb3 	bl	201910 <icu_lld_start>
  icup->state = ICU_READY;
  2009aa:	f04f 0302 	mov.w	r3, #2
  2009ae:	f88a 3000 	strb.w	r3, [sl]
  2009b2:	f388 8811 	msr	BASEPRI, r8

    chMBObjectInit(&test_mb, buffer_test_mb, MAILBOX_SIZE);       // For external interrupt

    // ICU driver
    icuStart(&ICUD9, &icucfg_steer);
    palSetPadMode( GPIOE, 5, PAL_MODE_ALTERNATE(3) );
  2009b6:	f44f 72c1 	mov.w	r2, #386	; 0x182
  2009ba:	4659      	mov	r1, fp
  2009bc:	4886      	ldr	r0, [pc, #536]	; (200bd8 <main+0x8d8>)
  2009be:	f001 f837 	bl	201a30 <_pal_lld_setgroupmode>
  2009c2:	f38b 8811 	msr	BASEPRI, fp
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  2009c6:	f8da 200c 	ldr.w	r2, [sl, #12]
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  2009ca:	2305      	movs	r3, #5
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  2009cc:	6951      	ldr	r1, [r2, #20]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  2009ce:	9301      	str	r3, [sp, #4]
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  2009d0:	f041 0101 	orr.w	r1, r1, #1
  2009d4:	6151      	str	r1, [r2, #20]
  icup->tim->SR = 0;
  2009d6:	f8c2 8010 	str.w	r8, [r2, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  2009da:	6013      	str	r3, [r2, #0]

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
  2009dc:	f04f 0303 	mov.w	r3, #3
  2009e0:	f88a 3000 	strb.w	r3, [sl]
  2009e4:	f388 8811 	msr	BASEPRI, r8
  2009e8:	f38b 8811 	msr	BASEPRI, fp
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
  2009ec:	4879      	ldr	r0, [pc, #484]	; (200bd4 <main+0x8d4>)
  2009ee:	f000 ff6f 	bl	2018d0 <icu_lld_enable_notifications>
  2009f2:	f388 8811 	msr	BASEPRI, r8
  2009f6:	f38b 8811 	msr	BASEPRI, fp
  icup->config = config;
  2009fa:	4a78      	ldr	r2, [pc, #480]	; (200bdc <main+0x8dc>)
  icu_lld_start(icup);
  2009fc:	4878      	ldr	r0, [pc, #480]	; (200be0 <main+0x8e0>)
  icup->config = config;
  2009fe:	6042      	str	r2, [r0, #4]
  icu_lld_start(icup);
  200a00:	f000 ff86 	bl	201910 <icu_lld_start>
  icup->state = ICU_READY;
  200a04:	4b76      	ldr	r3, [pc, #472]	; (200be0 <main+0x8e0>)
  200a06:	f04f 0202 	mov.w	r2, #2
  200a0a:	701a      	strb	r2, [r3, #0]
  200a0c:	f388 8811 	msr	BASEPRI, r8
    icuStartCapture(&ICUD9);
    icuEnableNotifications(&ICUD9);

    icuStart(&ICUD8, &icucfg_speed);
    palSetPadMode( GPIOC, 6, PAL_MODE_ALTERNATE(3) );
  200a10:	f44f 72c1 	mov.w	r2, #386	; 0x182
  200a14:	2140      	movs	r1, #64	; 0x40
  200a16:	4873      	ldr	r0, [pc, #460]	; (200be4 <main+0x8e4>)
  200a18:	f001 f80a 	bl	201a30 <_pal_lld_setgroupmode>
  200a1c:	f38b 8811 	msr	BASEPRI, fp
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  200a20:	4b6f      	ldr	r3, [pc, #444]	; (200be0 <main+0x8e0>)
  200a22:	68da      	ldr	r2, [r3, #12]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  200a24:	9b01      	ldr	r3, [sp, #4]
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  200a26:	6951      	ldr	r1, [r2, #20]
  200a28:	f041 0101 	orr.w	r1, r1, #1
  200a2c:	6151      	str	r1, [r2, #20]
  icup->tim->SR = 0;
  200a2e:	f8c2 8010 	str.w	r8, [r2, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  200a32:	6013      	str	r3, [r2, #0]
  icuStartCaptureI(icup);
  200a34:	f04f 0203 	mov.w	r2, #3
  200a38:	4b69      	ldr	r3, [pc, #420]	; (200be0 <main+0x8e0>)
  200a3a:	701a      	strb	r2, [r3, #0]
  200a3c:	f388 8811 	msr	BASEPRI, r8
  200a40:	f38b 8811 	msr	BASEPRI, fp
  icuEnableNotificationsI(icup);
  200a44:	4618      	mov	r0, r3
  200a46:	f000 ff43 	bl	2018d0 <icu_lld_enable_notifications>
  200a4a:	f388 8811 	msr	BASEPRI, r8
  200a4e:	f38b 8811 	msr	BASEPRI, fp
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
  200a52:	f899 3000 	ldrb.w	r3, [r9]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  200a56:	4a64      	ldr	r2, [pc, #400]	; (200be8 <main+0x8e8>)
  200a58:	2b01      	cmp	r3, #1
  200a5a:	f8c9 2004 	str.w	r2, [r9, #4]
  200a5e:	f000 81ca 	beq.w	200df6 <main+0xaf6>
  200a62:	f8d9 3008 	ldr.w	r3, [r9, #8]
  200a66:	4a61      	ldr	r2, [pc, #388]	; (200bec <main+0x8ec>)
  200a68:	095b      	lsrs	r3, r3, #5
  200a6a:	fba2 2303 	umull	r2, r3, r2, r3
  200a6e:	09db      	lsrs	r3, r3, #7
  200a70:	3b01      	subs	r3, #1
  200a72:	b29b      	uxth	r3, r3
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200a74:	f8d9 100c 	ldr.w	r1, [r9, #12]
  200a78:	2200      	movs	r2, #0
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  200a7a:	2002      	movs	r0, #2
  200a7c:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  200a7e:	604a      	str	r2, [r1, #4]
  200a80:	f889 0000 	strb.w	r0, [r9]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  200a84:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200a86:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200a88:	60ca      	str	r2, [r1, #12]
  200a8a:	f382 8811 	msr	BASEPRI, r2
  200a8e:	2320      	movs	r3, #32
  200a90:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  200a94:	2003      	movs	r0, #3

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
  200a96:	f8d9 1004 	ldr.w	r1, [r9, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  200a9a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  200a9e:	f64f 7eff 	movw	lr, #65535	; 0xffff
  if (NULL != gptp->config->callback)
  200aa2:	6849      	ldr	r1, [r1, #4]
  200aa4:	f889 0000 	strb.w	r0, [r9]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  200aa8:	2001      	movs	r0, #1
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  200aaa:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  200aae:	6158      	str	r0, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  200ab0:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200ab2:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  200ab4:	b111      	cbz	r1, 200abc <main+0x7bc>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  200ab6:	68da      	ldr	r2, [r3, #12]
  200ab8:	4302      	orrs	r2, r0
  200aba:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  200abc:	2185      	movs	r1, #133	; 0x85
  200abe:	2200      	movs	r2, #0
  200ac0:	6019      	str	r1, [r3, #0]
  200ac2:	f382 8811 	msr	BASEPRI, r2
  200ac6:	2320      	movs	r3, #32
  200ac8:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
  200acc:	4b48      	ldr	r3, [pc, #288]	; (200bf0 <main+0x8f0>)
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
  200ace:	f8df b12c 	ldr.w	fp, [pc, #300]	; 200bfc <main+0x8fc>
  200ad2:	781b      	ldrb	r3, [r3, #0]
  200ad4:	4a46      	ldr	r2, [pc, #280]	; (200bf0 <main+0x8f0>)
  200ad6:	2b01      	cmp	r3, #1
  200ad8:	f8c2 b004 	str.w	fp, [r2, #4]
  200adc:	d16f      	bne.n	200bbe <main+0x8be>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200ade:	4b45      	ldr	r3, [pc, #276]	; (200bf4 <main+0x8f4>)
  200ae0:	2260      	movs	r2, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ae2:	f04f 0c40 	mov.w	ip, #64	; 0x40
  200ae6:	f44f 7e80 	mov.w	lr, #256	; 0x100
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200aea:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200aee:	f44f 7000 	mov.w	r0, #512	; 0x200
  200af2:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  200af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200afa:	f8c3 c000 	str.w	ip, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200afe:	f04f 0980 	mov.w	r9, #128	; 0x80
  200b02:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b06:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b0a:	f04f 0a02 	mov.w	sl, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b0e:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b12:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b16:	f8c3 9000 	str.w	r9, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b1a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b1e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b22:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b26:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b2a:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b2e:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b32:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b34:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b38:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b3c:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b3e:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b42:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b46:	f8c3 8000 	str.w	r8, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b4a:	f04f 0808 	mov.w	r8, #8
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b4e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b52:	f8c3 e184 	str.w	lr, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b56:	f8c3 e004 	str.w	lr, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b5a:	f04f 0e04 	mov.w	lr, #4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b5e:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b62:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b66:	f8c3 a000 	str.w	sl, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b6a:	f883 c329 	strb.w	ip, [r3, #809]	; 0x329
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b6e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b72:	6058      	str	r0, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b74:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b78:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b7c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b80:	6059      	str	r1, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b86:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b8a:	f8c3 9184 	str.w	r9, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b8e:	f8c3 9004 	str.w	r9, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b92:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b96:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200b9a:	6099      	str	r1, [r3, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200b9c:	f883 c302 	strb.w	ip, [r3, #770]	; 0x302
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200ba0:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200ba4:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200ba8:	f883 c303 	strb.w	ip, [r3, #771]	; 0x303
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bac:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bb0:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200bb4:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bb8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bbc:	6098      	str	r0, [r3, #8]
      gptp->clock = STM32_TIMCLK1;
  200bbe:	f04f 0927 	mov.w	r9, #39	; 0x27
  200bc2:	f04f 0800 	mov.w	r8, #0
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
  200bc6:	4b0c      	ldr	r3, [pc, #48]	; (200bf8 <main+0x8f8>)
  200bc8:	e031      	b.n	200c2e <main+0x92e>
  200bca:	bf00      	nop
  200bcc:	20000c78 	.word	0x20000c78
  200bd0:	08002aa4 	.word	0x08002aa4
  200bd4:	20000864 	.word	0x20000864
  200bd8:	40021000 	.word	0x40021000
  200bdc:	08002a88 	.word	0x08002a88
  200be0:	2000084c 	.word	0x2000084c
  200be4:	40020800 	.word	0x40020800
  200be8:	08002a78 	.word	0x08002a78
  200bec:	0a7c5ac5 	.word	0x0a7c5ac5
  200bf0:	20000834 	.word	0x20000834
  200bf4:	e000e100 	.word	0xe000e100
  200bf8:	40013c00 	.word	0x40013c00
  200bfc:	080029b8 	.word	0x080029b8
  uint32_t cmask = (1 << (channel & 0x1F));
  200c00:	fa02 f108 	lsl.w	r1, r2, r8
    EXTI->IMR  &= ~cmask;
  200c04:	6818      	ldr	r0, [r3, #0]
  200c06:	43ca      	mvns	r2, r1
  200c08:	4010      	ands	r0, r2
  200c0a:	6018      	str	r0, [r3, #0]
    EXTI->EMR  &= ~cmask;
  200c0c:	6858      	ldr	r0, [r3, #4]
  200c0e:	4010      	ands	r0, r2
  200c10:	6058      	str	r0, [r3, #4]
    EXTI->RTSR &= ~cmask;
  200c12:	6898      	ldr	r0, [r3, #8]
  200c14:	4010      	ands	r0, r2
  200c16:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~cmask;
  200c18:	68d8      	ldr	r0, [r3, #12]
  200c1a:	4002      	ands	r2, r0
  200c1c:	60da      	str	r2, [r3, #12]
    EXTI->PR    =  cmask;
  200c1e:	6159      	str	r1, [r3, #20]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200c20:	f108 0801 	add.w	r8, r8, #1
  200c24:	f1b8 0f18 	cmp.w	r8, #24
  200c28:	d046      	beq.n	200cb8 <main+0x9b8>
  200c2a:	f85b 9038 	ldr.w	r9, [fp, r8, lsl #3]
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
  200c2e:	f019 0f04 	tst.w	r9, #4
  uint32_t cmask = (1 << (channel & 0x1F));
  200c32:	f04f 0201 	mov.w	r2, #1
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
  200c36:	d0e3      	beq.n	200c00 <main+0x900>
  if (channel < 16) {
  200c38:	f1b8 0f0f 	cmp.w	r8, #15
  uint32_t cmask = (1 << (channel & 0x1F));
  200c3c:	fa02 f208 	lsl.w	r2, r2, r8
  if (channel < 16) {
  200c40:	d818      	bhi.n	200c74 <main+0x974>
  200c42:	f028 0003 	bic.w	r0, r8, #3
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  200c46:	f008 0a03 	and.w	sl, r8, #3
  200c4a:	f04f 0e0f 	mov.w	lr, #15
                      EXT_MODE_GPIO_MASK) >>
  200c4e:	f3c9 1103 	ubfx	r1, r9, #4, #4
  200c52:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
  200c56:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  200c5a:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
  200c5e:	fa0e fc0a 	lsl.w	ip, lr, sl
    uint32_t port = ((extp->config->channels[channel].mode &
  200c62:	fa01 f10a 	lsl.w	r1, r1, sl
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
  200c66:	f8d0 e008 	ldr.w	lr, [r0, #8]
  200c6a:	ea2e 0e0c 	bic.w	lr, lr, ip
  200c6e:	ea41 010e 	orr.w	r1, r1, lr
  200c72:	6081      	str	r1, [r0, #8]
      EXTI->RTSR |= cmask;
  200c74:	6898      	ldr	r0, [r3, #8]
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
  200c76:	f019 0f01 	tst.w	r9, #1
  200c7a:	ea6f 0102 	mvn.w	r1, r2
      EXTI->RTSR |= cmask;
  200c7e:	bf14      	ite	ne
  200c80:	4310      	orrne	r0, r2
      EXTI->RTSR &= ~cmask;
  200c82:	4008      	andeq	r0, r1
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
  200c84:	f019 0f02 	tst.w	r9, #2
      EXTI->RTSR &= ~cmask;
  200c88:	6098      	str	r0, [r3, #8]
      EXTI->FTSR |= cmask;
  200c8a:	68d8      	ldr	r0, [r3, #12]
  200c8c:	bf14      	ite	ne
  200c8e:	4310      	orrne	r0, r2
      EXTI->FTSR &= ~cmask;
  200c90:	4008      	andeq	r0, r1
  200c92:	60d8      	str	r0, [r3, #12]
    if (extp->config->channels[channel].cb != NULL) {
  200c94:	eb0b 00c8 	add.w	r0, fp, r8, lsl #3
  200c98:	6840      	ldr	r0, [r0, #4]
  200c9a:	2800      	cmp	r0, #0
  200c9c:	f000 80e7 	beq.w	200e6e <main+0xb6e>
      EXTI->IMR |= cmask;
  200ca0:	6818      	ldr	r0, [r3, #0]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200ca2:	f108 0801 	add.w	r8, r8, #1
      EXTI->IMR |= cmask;
  200ca6:	4302      	orrs	r2, r0
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200ca8:	f1b8 0f18 	cmp.w	r8, #24
      EXTI->IMR |= cmask;
  200cac:	601a      	str	r2, [r3, #0]
      EXTI->EMR &= ~cmask;
  200cae:	685a      	ldr	r2, [r3, #4]
  200cb0:	ea01 0102 	and.w	r1, r1, r2
  200cb4:	6059      	str	r1, [r3, #4]
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
  200cb6:	d1b8      	bne.n	200c2a <main+0x92a>
  ext_lld_start(extp);
  extp->state = EXT_ACTIVE;
  200cb8:	2102      	movs	r1, #2
  200cba:	4b70      	ldr	r3, [pc, #448]	; (200e7c <main+0xb7c>)
  200cbc:	f04f 0800 	mov.w	r8, #0
  200cc0:	7019      	strb	r1, [r3, #0]
  200cc2:	f388 8811 	msr	BASEPRI, r8
  200cc6:	f04f 0920 	mov.w	r9, #32
  200cca:	f389 8811 	msr	BASEPRI, r9
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
  200cce:	4b6c      	ldr	r3, [pc, #432]	; (200e80 <main+0xb80>)
  tp->refs      = (trefs_t)1;
  200cd0:	f04f 0e01 	mov.w	lr, #1
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200cd4:	4a6b      	ldr	r2, [pc, #428]	; (200e84 <main+0xb84>)
  tp->prio      = prio;
  200cd6:	2080      	movs	r0, #128	; 0x80
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200cd8:	f103 0cdc 	add.w	ip, r3, #220	; 0xdc
  tp->refs      = (trefs_t)1;
  200cdc:	f883 e122 	strb.w	lr, [r3, #290]	; 0x122
  tp->name      = name;
  200ce0:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 200ea8 <main+0xba8>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200ce4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  REG_INSERT(tp);
  200ce8:	f503 7280 	add.w	r2, r3, #256	; 0x100
  tp->state     = CH_STATE_WTSTART;
  200cec:	f883 1120 	strb.w	r1, [r3, #288]	; 0x120
  tqp->next = (thread_t *)tqp;
  200cf0:	f503 7196 	add.w	r1, r3, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200cf4:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
  tlp->next = (thread_t *)tlp;
  200cf8:	f503 7c94 	add.w	ip, r3, #296	; 0x128
  tp->name      = name;
  200cfc:	f8c3 e118 	str.w	lr, [r3, #280]	; 0x118
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200d00:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 200eac <main+0xbac>
  REG_INSERT(tp);
  200d04:	f8d7 e014 	ldr.w	lr, [r7, #20]
  tp->prio      = prio;
  200d08:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  tp->realprio  = prio;
  200d0c:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
  200d10:	4610      	mov	r0, r2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200d12:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
  200d16:	f883 8121 	strb.w	r8, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
  200d1a:	f8c3 8138 	str.w	r8, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
  200d1e:	f8c3 8134 	str.w	r8, [r3, #308]	; 0x134
  REG_INSERT(tp);
  200d22:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
  200d26:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200d2a:	f8c3 a0dc 	str.w	sl, [r3, #220]	; 0xdc
  REG_INSERT(tp);
  200d2e:	f8c3 e114 	str.w	lr, [r3, #276]	; 0x114
  200d32:	f8ce 2010 	str.w	r2, [lr, #16]
  200d36:	f8c3 c128 	str.w	ip, [r3, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
  200d3a:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
  200d3e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  200d42:	617a      	str	r2, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
  200d44:	f001 fb6c 	bl	202420 <chSchWakeupS.constprop.37>
  200d48:	f388 8811 	msr	BASEPRI, r8
  200d4c:	f8df 8160 	ldr.w	r8, [pc, #352]	; 200eb0 <main+0xbb0>
  200d50:	464f      	mov	r7, r9
    msg_t msg;

    while (true)
    {
      if ( chMBFetch(&steer_mb, &msg, TIME_IMMEDIATE) == MSG_OK )
        chprintf(((BaseSequentialStream *)&SD7), "Steer      : %d\n", msg);
  200d52:	f8df 9160 	ldr.w	r9, [pc, #352]	; 200eb4 <main+0xbb4>
  200d56:	e022      	b.n	200d9e <main+0xa9e>
  200d58:	f38a 8811 	msr	BASEPRI, sl
  200d5c:	f387 8811 	msr	BASEPRI, r7
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
  200d60:	f895 a014 	ldrb.w	sl, [r5, #20]
  200d64:	f1ba 0f00 	cmp.w	sl, #0
  200d68:	d137      	bne.n	200dda <main+0xada>
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
  200d6a:	692b      	ldr	r3, [r5, #16]
  200d6c:	2b00      	cmp	r3, #0
  200d6e:	dc6c      	bgt.n	200e4a <main+0xb4a>
  200d70:	f38a 8811 	msr	BASEPRI, sl
  200d74:	f387 8811 	msr	BASEPRI, r7
    if (mbp->reset) {
  200d78:	f896 a014 	ldrb.w	sl, [r6, #20]
  200d7c:	f1ba 0f00 	cmp.w	sl, #0
  200d80:	d135      	bne.n	200dee <main+0xaee>
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
  200d82:	6933      	ldr	r3, [r6, #16]
  200d84:	2b00      	cmp	r3, #0
  200d86:	dc52      	bgt.n	200e2e <main+0xb2e>
  200d88:	f38a 8811 	msr	BASEPRI, sl
  200d8c:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  200d90:	2101      	movs	r1, #1
  200d92:	2008      	movs	r0, #8
  200d94:	f001 f8c4 	bl	201f20 <chSchGoSleepTimeoutS>
  200d98:	2300      	movs	r3, #0
  200d9a:	f383 8811 	msr	BASEPRI, r3
  200d9e:	f387 8811 	msr	BASEPRI, r7
    if (mbp->reset) {
  200da2:	f894 a014 	ldrb.w	sl, [r4, #20]
  200da6:	f1ba 0f00 	cmp.w	sl, #0
  200daa:	d15c      	bne.n	200e66 <main+0xb66>
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
  200dac:	6923      	ldr	r3, [r4, #16]
  200dae:	2b00      	cmp	r3, #0
  200db0:	ddd2      	ble.n	200d58 <main+0xa58>
  200db2:	a902      	add	r1, sp, #8
  200db4:	4640      	mov	r0, r8
  200db6:	f001 f893 	bl	201ee0 <chMBFetchS.part.4>
  200dba:	f38a 8811 	msr	BASEPRI, sl
      if ( chMBFetch(&steer_mb, &msg, TIME_IMMEDIATE) == MSG_OK )
  200dbe:	2800      	cmp	r0, #0
  200dc0:	d1cc      	bne.n	200d5c <main+0xa5c>
        chprintf(((BaseSequentialStream *)&SD7), "Steer      : %d\n", msg);
  200dc2:	9a02      	ldr	r2, [sp, #8]
  200dc4:	4649      	mov	r1, r9
  200dc6:	4830      	ldr	r0, [pc, #192]	; (200e88 <main+0xb88>)
  200dc8:	f001 fbaa 	bl	202520 <chprintf.constprop.0>
  200dcc:	f387 8811 	msr	BASEPRI, r7
    if (mbp->reset) {
  200dd0:	f895 a014 	ldrb.w	sl, [r5, #20]
  200dd4:	f1ba 0f00 	cmp.w	sl, #0
  200dd8:	d0c7      	beq.n	200d6a <main+0xa6a>
  200dda:	2300      	movs	r3, #0
  200ddc:	f383 8811 	msr	BASEPRI, r3
  200de0:	f387 8811 	msr	BASEPRI, r7
  200de4:	f896 a014 	ldrb.w	sl, [r6, #20]
  200de8:	f1ba 0f00 	cmp.w	sl, #0
  200dec:	d0c9      	beq.n	200d82 <main+0xa82>
  200dee:	2300      	movs	r3, #0
  200df0:	f383 8811 	msr	BASEPRI, r3
  200df4:	e7ca      	b.n	200d8c <main+0xa8c>
      rccEnableTIM4(FALSE);
  200df6:	4a25      	ldr	r2, [pc, #148]	; (200e8c <main+0xb8c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200df8:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200dfc:	4924      	ldr	r1, [pc, #144]	; (200e90 <main+0xb90>)
  200dfe:	f04f 0c70 	mov.w	ip, #112	; 0x70
  200e02:	6c13      	ldr	r3, [r2, #64]	; 0x40
  200e04:	f043 0304 	orr.w	r3, r3, #4
  200e08:	6413      	str	r3, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  200e0a:	f240 4337 	movw	r3, #1079	; 0x437
      rccResetTIM4();
  200e0e:	6a10      	ldr	r0, [r2, #32]
  200e10:	f040 0004 	orr.w	r0, r0, #4
  200e14:	6210      	str	r0, [r2, #32]
  200e16:	f8c2 8020 	str.w	r8, [r2, #32]
      gptp->clock = STM32_TIMCLK1;
  200e1a:	4a1e      	ldr	r2, [pc, #120]	; (200e94 <main+0xb94>)
  200e1c:	f881 c31e 	strb.w	ip, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200e20:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  200e24:	f8c9 2008 	str.w	r2, [r9, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200e28:	f8c1 e000 	str.w	lr, [r1]
  200e2c:	e622      	b.n	200a74 <main+0x774>
  200e2e:	a902      	add	r1, sp, #8
  200e30:	4819      	ldr	r0, [pc, #100]	; (200e98 <main+0xb98>)
  200e32:	f001 f855 	bl	201ee0 <chMBFetchS.part.4>
  200e36:	f38a 8811 	msr	BASEPRI, sl

      if ( chMBFetch(&speed_mb, &msg, TIME_IMMEDIATE) == MSG_OK )
        chprintf(((BaseSequentialStream *)&SD7), "Speed      : %d\n", msg);

      if ( chMBFetch(&test_mb, &msg, TIME_IMMEDIATE) == MSG_OK )
  200e3a:	2800      	cmp	r0, #0
  200e3c:	d1a6      	bne.n	200d8c <main+0xa8c>
        chprintf(((BaseSequentialStream *)&SD7), "Steer (GPT): %d\n", msg);
  200e3e:	9a02      	ldr	r2, [sp, #8]
  200e40:	4916      	ldr	r1, [pc, #88]	; (200e9c <main+0xb9c>)
  200e42:	4811      	ldr	r0, [pc, #68]	; (200e88 <main+0xb88>)
  200e44:	f001 fb6c 	bl	202520 <chprintf.constprop.0>
  200e48:	e7a0      	b.n	200d8c <main+0xa8c>
  200e4a:	a902      	add	r1, sp, #8
  200e4c:	4814      	ldr	r0, [pc, #80]	; (200ea0 <main+0xba0>)
  200e4e:	f001 f847 	bl	201ee0 <chMBFetchS.part.4>
  200e52:	f38a 8811 	msr	BASEPRI, sl
      if ( chMBFetch(&speed_mb, &msg, TIME_IMMEDIATE) == MSG_OK )
  200e56:	2800      	cmp	r0, #0
  200e58:	d18c      	bne.n	200d74 <main+0xa74>
        chprintf(((BaseSequentialStream *)&SD7), "Speed      : %d\n", msg);
  200e5a:	9a02      	ldr	r2, [sp, #8]
  200e5c:	4911      	ldr	r1, [pc, #68]	; (200ea4 <main+0xba4>)
  200e5e:	480a      	ldr	r0, [pc, #40]	; (200e88 <main+0xb88>)
  200e60:	f001 fb5e 	bl	202520 <chprintf.constprop.0>
  200e64:	e786      	b.n	200d74 <main+0xa74>
  200e66:	2300      	movs	r3, #0
  200e68:	f383 8811 	msr	BASEPRI, r3
  200e6c:	e776      	b.n	200d5c <main+0xa5c>
      EXTI->EMR |= cmask;
  200e6e:	6858      	ldr	r0, [r3, #4]
  200e70:	4302      	orrs	r2, r0
  200e72:	605a      	str	r2, [r3, #4]
      EXTI->IMR &= ~cmask;
  200e74:	681a      	ldr	r2, [r3, #0]
  200e76:	4011      	ands	r1, r2
  200e78:	6019      	str	r1, [r3, #0]
  200e7a:	e6d1      	b.n	200c20 <main+0x920>
  200e7c:	20000834 	.word	0x20000834
  200e80:	20000cf0 	.word	0x20000cf0
  200e84:	002002e5 	.word	0x002002e5
  200e88:	20000e3c 	.word	0x20000e3c
  200e8c:	40023800 	.word	0x40023800
  200e90:	e000e100 	.word	0xe000e100
  200e94:	066ff300 	.word	0x066ff300
  200e98:	20000cc8 	.word	0x20000cc8
  200e9c:	08002af8 	.word	0x08002af8
  200ea0:	20000c78 	.word	0x20000c78
  200ea4:	08002ae4 	.word	0x08002ae4
  200ea8:	08002ac8 	.word	0x08002ac8
  200eac:	00200f61 	.word	0x00200f61
  200eb0:	20000ca0 	.word	0x20000ca0
  200eb4:	08002ad0 	.word	0x08002ad0
	...

00200ec0 <notify7.lto_priv.39>:
  UART7->CR1 |= USART_CR1_TXEIE;
  200ec0:	4a02      	ldr	r2, [pc, #8]	; (200ecc <notify7.lto_priv.39+0xc>)
  200ec2:	6813      	ldr	r3, [r2, #0]
  200ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200ec8:	6013      	str	r3, [r2, #0]
  200eca:	4770      	bx	lr
  200ecc:	40007800 	.word	0x40007800

00200ed0 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  200ed0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
  200ed2:	68c3      	ldr	r3, [r0, #12]
void icu_lld_serve_interrupt(ICUDriver *icup) {
  200ed4:	4605      	mov	r5, r0
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
  200ed6:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
  200ed8:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200eda:	68da      	ldr	r2, [r3, #12]
  200edc:	4014      	ands	r4, r2
  200ede:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
  200ee0:	43d2      	mvns	r2, r2
  200ee2:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  200ee4:	7d0b      	ldrb	r3, [r1, #20]
  200ee6:	b94b      	cbnz	r3, 200efc <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200ee8:	0763      	lsls	r3, r4, #29
  200eea:	d52b      	bpl.n	200f44 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
  200eec:	7803      	ldrb	r3, [r0, #0]
  200eee:	2b04      	cmp	r3, #4
  200ef0:	d025      	beq.n	200f3e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200ef2:	07a1      	lsls	r1, r4, #30
  200ef4:	d409      	bmi.n	200f0a <icu_lld_serve_interrupt+0x3a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  200ef6:	07e4      	lsls	r4, r4, #31
  200ef8:	d40b      	bmi.n	200f12 <icu_lld_serve_interrupt+0x42>
  200efa:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200efc:	07a2      	lsls	r2, r4, #30
  200efe:	d512      	bpl.n	200f26 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
  200f00:	7803      	ldrb	r3, [r0, #0]
  200f02:	2b04      	cmp	r3, #4
  200f04:	d00c      	beq.n	200f20 <icu_lld_serve_interrupt+0x50>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200f06:	0763      	lsls	r3, r4, #29
  200f08:	d5f5      	bpl.n	200ef6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200f0a:	2304      	movs	r3, #4
  if ((sr & STM32_TIM_SR_UIF) != 0)
  200f0c:	07e4      	lsls	r4, r4, #31
      _icu_isr_invoke_period_cb(icup);
  200f0e:	702b      	strb	r3, [r5, #0]
  if ((sr & STM32_TIM_SR_UIF) != 0)
  200f10:	d5f3      	bpl.n	200efa <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
  200f12:	686b      	ldr	r3, [r5, #4]
  200f14:	4628      	mov	r0, r5
  200f16:	691b      	ldr	r3, [r3, #16]
  200f18:	4798      	blx	r3
  200f1a:	2303      	movs	r3, #3
  200f1c:	702b      	strb	r3, [r5, #0]
  200f1e:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
  200f20:	688b      	ldr	r3, [r1, #8]
  200f22:	b1c3      	cbz	r3, 200f56 <icu_lld_serve_interrupt+0x86>
  200f24:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200f26:	0763      	lsls	r3, r4, #29
  200f28:	d5e5      	bpl.n	200ef6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200f2a:	782b      	ldrb	r3, [r5, #0]
  200f2c:	2b04      	cmp	r3, #4
  200f2e:	d1ec      	bne.n	200f0a <icu_lld_serve_interrupt+0x3a>
  200f30:	6869      	ldr	r1, [r5, #4]
  200f32:	68cb      	ldr	r3, [r1, #12]
  200f34:	2b00      	cmp	r3, #0
  200f36:	d0e8      	beq.n	200f0a <icu_lld_serve_interrupt+0x3a>
  200f38:	4628      	mov	r0, r5
  200f3a:	4798      	blx	r3
  200f3c:	e7e5      	b.n	200f0a <icu_lld_serve_interrupt+0x3a>
      _icu_isr_invoke_width_cb(icup);
  200f3e:	688b      	ldr	r3, [r1, #8]
  200f40:	b133      	cbz	r3, 200f50 <icu_lld_serve_interrupt+0x80>
  200f42:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200f44:	07a1      	lsls	r1, r4, #30
  200f46:	d5d6      	bpl.n	200ef6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200f48:	782b      	ldrb	r3, [r5, #0]
  200f4a:	2b04      	cmp	r3, #4
  200f4c:	d1dd      	bne.n	200f0a <icu_lld_serve_interrupt+0x3a>
  200f4e:	e7ef      	b.n	200f30 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200f50:	07a0      	lsls	r0, r4, #30
  200f52:	d4ee      	bmi.n	200f32 <icu_lld_serve_interrupt+0x62>
  200f54:	e7cf      	b.n	200ef6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200f56:	0762      	lsls	r2, r4, #29
  200f58:	d4eb      	bmi.n	200f32 <icu_lld_serve_interrupt+0x62>
  200f5a:	e7cc      	b.n	200ef6 <icu_lld_serve_interrupt+0x26>
  200f5c:	0000      	movs	r0, r0
	...

00200f60 <Blinker.lto_priv.38>:
    palToggleLine(LINE_LED1);
  200f60:	4c08      	ldr	r4, [pc, #32]	; (200f84 <Blinker.lto_priv.38+0x24>)
  200f62:	2520      	movs	r5, #32
static THD_FUNCTION(Blinker, arg) {
  200f64:	b508      	push	{r3, lr}
    palToggleLine(LINE_LED1);
  200f66:	6963      	ldr	r3, [r4, #20]
  200f68:	f083 0301 	eor.w	r3, r3, #1
  200f6c:	6163      	str	r3, [r4, #20]
  200f6e:	f385 8811 	msr	BASEPRI, r5
  200f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  200f76:	2008      	movs	r0, #8
  200f78:	f000 ffd2 	bl	201f20 <chSchGoSleepTimeoutS>
  200f7c:	2300      	movs	r3, #0
  200f7e:	f383 8811 	msr	BASEPRI, r3
  200f82:	e7f0      	b.n	200f66 <Blinker.lto_priv.38+0x6>
  200f84:	40020400 	.word	0x40020400
	...

00200f90 <icuwidthcb_speed.lto_priv.41>:
  icucnt_t last_width = icuGetWidthX(icup);
  200f90:	6902      	ldr	r2, [r0, #16]
{
  200f92:	b508      	push	{r3, lr}
  icucnt_t last_width = icuGetWidthX(icup);
  200f94:	6811      	ldr	r1, [r2, #0]
  200f96:	2320      	movs	r3, #32
  200f98:	f383 8811 	msr	BASEPRI, r3
  chMBPostI(&speed_mb, (msg_t)last_width);
  200f9c:	4803      	ldr	r0, [pc, #12]	; (200fac <icuwidthcb_speed.lto_priv.41+0x1c>)
  200f9e:	3101      	adds	r1, #1
  200fa0:	f000 ff2e 	bl	201e00 <chMBPostI>
  200fa4:	2300      	movs	r3, #0
  200fa6:	f383 8811 	msr	BASEPRI, r3
  200faa:	bd08      	pop	{r3, pc}
  200fac:	20000c78 	.word	0x20000c78

00200fb0 <icuwidthcb_steer.lto_priv.40>:
  icucnt_t last_width = icuGetWidthX(icup);
  200fb0:	6902      	ldr	r2, [r0, #16]
{
  200fb2:	b508      	push	{r3, lr}
  icucnt_t last_width = icuGetWidthX(icup);
  200fb4:	6811      	ldr	r1, [r2, #0]
  200fb6:	2320      	movs	r3, #32
  200fb8:	f383 8811 	msr	BASEPRI, r3
  chMBPostI(&steer_mb, (msg_t)last_width);
  200fbc:	4803      	ldr	r0, [pc, #12]	; (200fcc <icuwidthcb_steer.lto_priv.40+0x1c>)
  200fbe:	3101      	adds	r1, #1
  200fc0:	f000 ff1e 	bl	201e00 <chMBPostI>
  200fc4:	2300      	movs	r3, #0
  200fc6:	f383 8811 	msr	BASEPRI, r3
  200fca:	bd08      	pop	{r3, pc}
  200fcc:	20000ca0 	.word	0x20000ca0

00200fd0 <extcb1.lto_priv.42>:
static void extcb1(EXTDriver *extp, expchannel_t channel) {
  200fd0:	b508      	push	{r3, lr}
  if ( palReadPad( GPIOC, 0 ) == PAL_HIGH )
  200fd2:	4b0f      	ldr	r3, [pc, #60]	; (201010 <extcb1.lto_priv.42+0x40>)
    front_time = gptGetCounterX( &GPTD4 );
  200fd4:	4a0f      	ldr	r2, [pc, #60]	; (201014 <extcb1.lto_priv.42+0x44>)
  if ( palReadPad( GPIOC, 0 ) == PAL_HIGH )
  200fd6:	691b      	ldr	r3, [r3, #16]
    front_time = gptGetCounterX( &GPTD4 );
  200fd8:	68d2      	ldr	r2, [r2, #12]
  if ( palReadPad( GPIOC, 0 ) == PAL_HIGH )
  200fda:	f013 0f01 	tst.w	r3, #1
    front_time = gptGetCounterX( &GPTD4 );
  200fde:	4b0e      	ldr	r3, [pc, #56]	; (201018 <extcb1.lto_priv.42+0x48>)
  if ( palReadPad( GPIOC, 0 ) == PAL_HIGH )
  200fe0:	d113      	bne.n	20100a <extcb1.lto_priv.42+0x3a>
    gptcnt_t result = edge_time < front_time ? edge_time + (UINT16_MAX - front_time) :
  200fe2:	681b      	ldr	r3, [r3, #0]
    edge_time  = gptGetCounterX( &GPTD4 );
  200fe4:	6a51      	ldr	r1, [r2, #36]	; 0x24
    gptcnt_t result = edge_time < front_time ? edge_time + (UINT16_MAX - front_time) :
  200fe6:	4299      	cmp	r1, r3
  200fe8:	d30a      	bcc.n	201000 <extcb1.lto_priv.42+0x30>
  200fea:	1ac9      	subs	r1, r1, r3
  200fec:	2320      	movs	r3, #32
  200fee:	f383 8811 	msr	BASEPRI, r3
    chMBPostI(&test_mb, (msg_t)result);
  200ff2:	480a      	ldr	r0, [pc, #40]	; (20101c <extcb1.lto_priv.42+0x4c>)
  200ff4:	f000 ff04 	bl	201e00 <chMBPostI>
  200ff8:	2300      	movs	r3, #0
  200ffa:	f383 8811 	msr	BASEPRI, r3
  200ffe:	bd08      	pop	{r3, pc}
    gptcnt_t result = edge_time < front_time ? edge_time + (UINT16_MAX - front_time) :
  201000:	1acb      	subs	r3, r1, r3
  201002:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201006:	4419      	add	r1, r3
  201008:	e7f0      	b.n	200fec <extcb1.lto_priv.42+0x1c>
    front_time = gptGetCounterX( &GPTD4 );
  20100a:	6a52      	ldr	r2, [r2, #36]	; 0x24
  20100c:	601a      	str	r2, [r3, #0]
  20100e:	bd08      	pop	{r3, pc}
  201010:	40020800 	.word	0x40020800
  201014:	2000083c 	.word	0x2000083c
  201018:	20000e38 	.word	0x20000e38
  20101c:	20000cc8 	.word	0x20000cc8

00201020 <VectorA0>:
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
  201020:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD9);
  201022:	4803      	ldr	r0, [pc, #12]	; (201030 <VectorA0+0x10>)
  201024:	f7ff ff54 	bl	200ed0 <icu_lld_serve_interrupt>
}
  201028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20102c:	f000 be08 	b.w	201c40 <_port_irq_epilogue>
  201030:	20000864 	.word	0x20000864
	...

00201040 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
  201040:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD8);
  201042:	4803      	ldr	r0, [pc, #12]	; (201050 <VectorF0+0x10>)
  201044:	f7ff ff44 	bl	200ed0 <icu_lld_serve_interrupt>
}
  201048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20104c:	f000 bdf8 	b.w	201c40 <_port_irq_epilogue>
  201050:	2000084c 	.word	0x2000084c
	...

00201060 <VectorF8>:
  201060:	f7ff bfee 	b.w	201040 <VectorF0>
	...

00201070 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  201070:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  201072:	4b0b      	ldr	r3, [pc, #44]	; (2010a0 <VectorB8+0x30>)
  201074:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201076:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201078:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20107a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20107c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20107e:	d107      	bne.n	201090 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201080:	2002      	movs	r0, #2
  201082:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201084:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201086:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201088:	68d1      	ldr	r1, [r2, #12]
  20108a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20108e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  201090:	685b      	ldr	r3, [r3, #4]
  201092:	4803      	ldr	r0, [pc, #12]	; (2010a0 <VectorB8+0x30>)
  201094:	685b      	ldr	r3, [r3, #4]
  201096:	4798      	blx	r3
}
  201098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20109c:	f000 bdd0 	b.w	201c40 <_port_irq_epilogue>
  2010a0:	2000083c 	.word	0x2000083c
	...

002010b0 <SysTick_Handler>:
OSAL_IRQ_HANDLER(SysTick_Handler) {
  2010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2010b2:	2720      	movs	r7, #32
  2010b4:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  2010b8:	4d12      	ldr	r5, [pc, #72]	; (201104 <SysTick_Handler+0x54>)
  2010ba:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2010bc:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  2010be:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2010c0:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  2010c4:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2010c6:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  2010c8:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2010ca:	d013      	beq.n	2010f4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  2010cc:	891c      	ldrh	r4, [r3, #8]
  2010ce:	3c01      	subs	r4, #1
  2010d0:	b2a4      	uxth	r4, r4
  2010d2:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  2010d4:	b974      	cbnz	r4, 2010f4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2010d6:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  2010d8:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  2010da:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2010dc:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  2010de:	61ea      	str	r2, [r5, #28]
  2010e0:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  2010e4:	6918      	ldr	r0, [r3, #16]
  2010e6:	4788      	blx	r1
  2010e8:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  2010ec:	69eb      	ldr	r3, [r5, #28]
  2010ee:	891a      	ldrh	r2, [r3, #8]
  2010f0:	2a00      	cmp	r2, #0
  2010f2:	d0f0      	beq.n	2010d6 <SysTick_Handler+0x26>
  2010f4:	2300      	movs	r3, #0
  2010f6:	f383 8811 	msr	BASEPRI, r3
}
  2010fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2010fe:	f000 bd9f 	b.w	201c40 <_port_irq_epilogue>
  201102:	bf00      	nop
  201104:	20000e9c 	.word	0x20000e9c
	...

00201110 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201110:	4b08      	ldr	r3, [pc, #32]	; (201134 <Vector158+0x24>)
  if (dma_isr_redir[15].dma_func)
  201112:	4809      	ldr	r0, [pc, #36]	; (201138 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201114:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  201116:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201118:	0d89      	lsrs	r1, r1, #22
  20111a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  20111e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  201120:	058c      	lsls	r4, r1, #22
  201122:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  201124:	b10a      	cbz	r2, 20112a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  201126:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  201128:	4790      	blx	r2
}
  20112a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20112e:	f000 bd87 	b.w	201c40 <_port_irq_epilogue>
  201132:	bf00      	nop
  201134:	40026400 	.word	0x40026400
  201138:	20000bd0 	.word	0x20000bd0
  20113c:	00000000 	.word	0x00000000

00201140 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201140:	4b08      	ldr	r3, [pc, #32]	; (201164 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  201142:	4809      	ldr	r0, [pc, #36]	; (201168 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201144:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  201146:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201148:	0c09      	lsrs	r1, r1, #16
  20114a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20114e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  201150:	040c      	lsls	r4, r1, #16
  201152:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  201154:	b10a      	cbz	r2, 20115a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  201156:	6f40      	ldr	r0, [r0, #116]	; 0x74
  201158:	4790      	blx	r2
}
  20115a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20115e:	f000 bd6f 	b.w	201c40 <_port_irq_epilogue>
  201162:	bf00      	nop
  201164:	40026400 	.word	0x40026400
  201168:	20000bd0 	.word	0x20000bd0
  20116c:	00000000 	.word	0x00000000

00201170 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201170:	4b08      	ldr	r3, [pc, #32]	; (201194 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  201172:	4809      	ldr	r0, [pc, #36]	; (201198 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201174:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  201176:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201178:	0989      	lsrs	r1, r1, #6
  20117a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20117e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  201180:	018c      	lsls	r4, r1, #6
  201182:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  201184:	b10a      	cbz	r2, 20118a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  201186:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  201188:	4790      	blx	r2
}
  20118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20118e:	f000 bd57 	b.w	201c40 <_port_irq_epilogue>
  201192:	bf00      	nop
  201194:	40026400 	.word	0x40026400
  201198:	20000bd0 	.word	0x20000bd0
  20119c:	00000000 	.word	0x00000000

002011a0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  2011a0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2011a2:	4b07      	ldr	r3, [pc, #28]	; (2011c0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  2011a4:	4807      	ldr	r0, [pc, #28]	; (2011c4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2011a6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  2011a8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  2011aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  2011ae:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  2011b0:	b10a      	cbz	r2, 2011b6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  2011b2:	6e40      	ldr	r0, [r0, #100]	; 0x64
  2011b4:	4790      	blx	r2
}
  2011b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011ba:	f000 bd41 	b.w	201c40 <_port_irq_epilogue>
  2011be:	bf00      	nop
  2011c0:	40026400 	.word	0x40026400
  2011c4:	20000bd0 	.word	0x20000bd0
	...

002011d0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2011d0:	4b08      	ldr	r3, [pc, #32]	; (2011f4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  2011d2:	4809      	ldr	r0, [pc, #36]	; (2011f8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2011d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  2011d6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2011d8:	0d89      	lsrs	r1, r1, #22
  2011da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  2011de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2011e0:	058c      	lsls	r4, r1, #22
  2011e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2011e4:	b10a      	cbz	r2, 2011ea <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2011e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2011e8:	4790      	blx	r2
}
  2011ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2011ee:	f000 bd27 	b.w	201c40 <_port_irq_epilogue>
  2011f2:	bf00      	nop
  2011f4:	40026400 	.word	0x40026400
  2011f8:	20000bd0 	.word	0x20000bd0
  2011fc:	00000000 	.word	0x00000000

00201200 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201200:	4b08      	ldr	r3, [pc, #32]	; (201224 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  201202:	4809      	ldr	r0, [pc, #36]	; (201228 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201204:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  201206:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201208:	0c09      	lsrs	r1, r1, #16
  20120a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  20120e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  201210:	040c      	lsls	r4, r1, #16
  201212:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  201214:	b10a      	cbz	r2, 20121a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  201216:	6d40      	ldr	r0, [r0, #84]	; 0x54
  201218:	4790      	blx	r2
}
  20121a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20121e:	f000 bd0f 	b.w	201c40 <_port_irq_epilogue>
  201222:	bf00      	nop
  201224:	40026400 	.word	0x40026400
  201228:	20000bd0 	.word	0x20000bd0
  20122c:	00000000 	.word	0x00000000

00201230 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201230:	4b08      	ldr	r3, [pc, #32]	; (201254 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  201232:	4809      	ldr	r0, [pc, #36]	; (201258 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201234:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  201236:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201238:	0989      	lsrs	r1, r1, #6
  20123a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20123e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  201240:	018c      	lsls	r4, r1, #6
  201242:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  201244:	b10a      	cbz	r2, 20124a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  201246:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  201248:	4790      	blx	r2
}
  20124a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20124e:	f000 bcf7 	b.w	201c40 <_port_irq_epilogue>
  201252:	bf00      	nop
  201254:	40026400 	.word	0x40026400
  201258:	20000bd0 	.word	0x20000bd0
  20125c:	00000000 	.word	0x00000000

00201260 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  201260:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201262:	4b07      	ldr	r3, [pc, #28]	; (201280 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  201264:	4807      	ldr	r0, [pc, #28]	; (201284 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201266:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  201268:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20126a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20126e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  201270:	b10a      	cbz	r2, 201276 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  201272:	6c40      	ldr	r0, [r0, #68]	; 0x44
  201274:	4790      	blx	r2
}
  201276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20127a:	f000 bce1 	b.w	201c40 <_port_irq_epilogue>
  20127e:	bf00      	nop
  201280:	40026400 	.word	0x40026400
  201284:	20000bd0 	.word	0x20000bd0
	...

00201290 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201290:	4b08      	ldr	r3, [pc, #32]	; (2012b4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  201292:	4809      	ldr	r0, [pc, #36]	; (2012b8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201294:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  201296:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201298:	0d89      	lsrs	r1, r1, #22
  20129a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20129e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  2012a0:	058c      	lsls	r4, r1, #22
  2012a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  2012a4:	b10a      	cbz	r2, 2012aa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  2012a6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  2012a8:	4790      	blx	r2
}
  2012aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2012ae:	f000 bcc7 	b.w	201c40 <_port_irq_epilogue>
  2012b2:	bf00      	nop
  2012b4:	40026000 	.word	0x40026000
  2012b8:	20000bd0 	.word	0x20000bd0
  2012bc:	00000000 	.word	0x00000000

002012c0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2012c0:	4b08      	ldr	r3, [pc, #32]	; (2012e4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2012c2:	4809      	ldr	r0, [pc, #36]	; (2012e8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2012c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2012c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2012c8:	0c09      	lsrs	r1, r1, #16
  2012ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2012ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2012d0:	040c      	lsls	r4, r1, #16
  2012d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2012d4:	b10a      	cbz	r2, 2012da <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2012d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2012d8:	4790      	blx	r2
}
  2012da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2012de:	f000 bcaf 	b.w	201c40 <_port_irq_epilogue>
  2012e2:	bf00      	nop
  2012e4:	40026000 	.word	0x40026000
  2012e8:	20000bd0 	.word	0x20000bd0
  2012ec:	00000000 	.word	0x00000000

002012f0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2012f0:	4b08      	ldr	r3, [pc, #32]	; (201314 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2012f2:	4809      	ldr	r0, [pc, #36]	; (201318 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2012f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2012f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2012f8:	0989      	lsrs	r1, r1, #6
  2012fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2012fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  201300:	018c      	lsls	r4, r1, #6
  201302:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  201304:	b10a      	cbz	r2, 20130a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  201306:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201308:	4790      	blx	r2
}
  20130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20130e:	f000 bc97 	b.w	201c40 <_port_irq_epilogue>
  201312:	bf00      	nop
  201314:	40026000 	.word	0x40026000
  201318:	20000bd0 	.word	0x20000bd0
  20131c:	00000000 	.word	0x00000000

00201320 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  201320:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201322:	4b07      	ldr	r3, [pc, #28]	; (201340 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  201324:	4807      	ldr	r0, [pc, #28]	; (201344 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201326:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  201328:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20132a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20132e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  201330:	b10a      	cbz	r2, 201336 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  201332:	6a40      	ldr	r0, [r0, #36]	; 0x24
  201334:	4790      	blx	r2
}
  201336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20133a:	f000 bc81 	b.w	201c40 <_port_irq_epilogue>
  20133e:	bf00      	nop
  201340:	40026000 	.word	0x40026000
  201344:	20000bd0 	.word	0x20000bd0
	...

00201350 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201350:	4b08      	ldr	r3, [pc, #32]	; (201374 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  201352:	4809      	ldr	r0, [pc, #36]	; (201378 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201354:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  201356:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201358:	0d89      	lsrs	r1, r1, #22
  20135a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20135e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  201360:	058c      	lsls	r4, r1, #22
  201362:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  201364:	b10a      	cbz	r2, 20136a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  201366:	69c0      	ldr	r0, [r0, #28]
  201368:	4790      	blx	r2
}
  20136a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20136e:	f000 bc67 	b.w	201c40 <_port_irq_epilogue>
  201372:	bf00      	nop
  201374:	40026000 	.word	0x40026000
  201378:	20000bd0 	.word	0x20000bd0
  20137c:	00000000 	.word	0x00000000

00201380 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201380:	4b08      	ldr	r3, [pc, #32]	; (2013a4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  201382:	4809      	ldr	r0, [pc, #36]	; (2013a8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201384:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  201386:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201388:	0c09      	lsrs	r1, r1, #16
  20138a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20138e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  201390:	040c      	lsls	r4, r1, #16
  201392:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  201394:	b10a      	cbz	r2, 20139a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  201396:	6940      	ldr	r0, [r0, #20]
  201398:	4790      	blx	r2
}
  20139a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20139e:	f000 bc4f 	b.w	201c40 <_port_irq_epilogue>
  2013a2:	bf00      	nop
  2013a4:	40026000 	.word	0x40026000
  2013a8:	20000bd0 	.word	0x20000bd0
  2013ac:	00000000 	.word	0x00000000

002013b0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2013b0:	4b08      	ldr	r3, [pc, #32]	; (2013d4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  2013b2:	4809      	ldr	r0, [pc, #36]	; (2013d8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2013b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  2013b6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2013b8:	0989      	lsrs	r1, r1, #6
  2013ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  2013be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  2013c0:	018c      	lsls	r4, r1, #6
  2013c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  2013c4:	b10a      	cbz	r2, 2013ca <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  2013c6:	68c0      	ldr	r0, [r0, #12]
  2013c8:	4790      	blx	r2
}
  2013ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2013ce:	f000 bc37 	b.w	201c40 <_port_irq_epilogue>
  2013d2:	bf00      	nop
  2013d4:	40026000 	.word	0x40026000
  2013d8:	20000bd0 	.word	0x20000bd0
  2013dc:	00000000 	.word	0x00000000

002013e0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2013e0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2013e2:	4b07      	ldr	r3, [pc, #28]	; (201400 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2013e4:	4a07      	ldr	r2, [pc, #28]	; (201404 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2013e6:	6819      	ldr	r1, [r3, #0]
  2013e8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2013ec:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2013ee:	6813      	ldr	r3, [r2, #0]
  2013f0:	b10b      	cbz	r3, 2013f6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2013f2:	6850      	ldr	r0, [r2, #4]
  2013f4:	4798      	blx	r3
}
  2013f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2013fa:	f000 bc21 	b.w	201c40 <_port_irq_epilogue>
  2013fe:	bf00      	nop
  201400:	40026000 	.word	0x40026000
  201404:	20000bd0 	.word	0x20000bd0
	...

00201410 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  201410:	4a09      	ldr	r2, [pc, #36]	; (201438 <Vector4C+0x28>)
OSAL_IRQ_HANDLER(Vector4C) {
  201412:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201414:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
  201416:	6811      	ldr	r1, [r2, #0]
  201418:	400b      	ands	r3, r1
  20141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
  20141e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
  201420:	b12b      	cbz	r3, 20142e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  201422:	4806      	ldr	r0, [pc, #24]	; (20143c <Vector4C+0x2c>)
  201424:	2116      	movs	r1, #22
  201426:	6843      	ldr	r3, [r0, #4]
  201428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  20142c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
  20142e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201432:	f000 bc05 	b.w	201c40 <_port_irq_epilogue>
  201436:	bf00      	nop
  201438:	40013c00 	.word	0x40013c00
  20143c:	20000834 	.word	0x20000834

00201440 <Vector48>:
  pr = EXTI->PR;
  201440:	4a09      	ldr	r2, [pc, #36]	; (201468 <Vector48+0x28>)
OSAL_IRQ_HANDLER(Vector48) {
  201442:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201444:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
  201446:	6811      	ldr	r1, [r2, #0]
  201448:	400b      	ands	r3, r1
  20144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
  20144e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
  201450:	b12b      	cbz	r3, 20145e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  201452:	4806      	ldr	r0, [pc, #24]	; (20146c <Vector48+0x2c>)
  201454:	2115      	movs	r1, #21
  201456:	6843      	ldr	r3, [r0, #4]
  201458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
  20145c:	4798      	blx	r3
}
  20145e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201462:	f000 bbed 	b.w	201c40 <_port_irq_epilogue>
  201466:	bf00      	nop
  201468:	40013c00 	.word	0x40013c00
  20146c:	20000834 	.word	0x20000834

00201470 <Vector170>:
  pr = EXTI->PR;
  201470:	4a09      	ldr	r2, [pc, #36]	; (201498 <Vector170+0x28>)
OSAL_IRQ_HANDLER(Vector170) {
  201472:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201474:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
  201476:	6811      	ldr	r1, [r2, #0]
  201478:	400b      	ands	r3, r1
  20147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
  20147e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
  201480:	b12b      	cbz	r3, 20148e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
  201482:	4806      	ldr	r0, [pc, #24]	; (20149c <Vector170+0x2c>)
  201484:	2114      	movs	r1, #20
  201486:	6843      	ldr	r3, [r0, #4]
  201488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  20148c:	4798      	blx	r3
}
  20148e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201492:	f000 bbd5 	b.w	201c40 <_port_irq_epilogue>
  201496:	bf00      	nop
  201498:	40013c00 	.word	0x40013c00
  20149c:	20000834 	.word	0x20000834

002014a0 <Vector138>:
  pr = EXTI->PR;
  2014a0:	4a09      	ldr	r2, [pc, #36]	; (2014c8 <Vector138+0x28>)
OSAL_IRQ_HANDLER(Vector138) {
  2014a2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2014a4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
  2014a6:	6811      	ldr	r1, [r2, #0]
  2014a8:	400b      	ands	r3, r1
  2014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
  2014ae:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
  2014b0:	b12b      	cbz	r3, 2014be <Vector138+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
  2014b2:	4806      	ldr	r0, [pc, #24]	; (2014cc <Vector138+0x2c>)
  2014b4:	2113      	movs	r1, #19
  2014b6:	6843      	ldr	r3, [r0, #4]
  2014b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  2014bc:	4798      	blx	r3
}
  2014be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2014c2:	f000 bbbd 	b.w	201c40 <_port_irq_epilogue>
  2014c6:	bf00      	nop
  2014c8:	40013c00 	.word	0x40013c00
  2014cc:	20000834 	.word	0x20000834

002014d0 <VectorE8>:
  pr = EXTI->PR;
  2014d0:	4a09      	ldr	r2, [pc, #36]	; (2014f8 <VectorE8+0x28>)
OSAL_IRQ_HANDLER(VectorE8) {
  2014d2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2014d4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
  2014d6:	6811      	ldr	r1, [r2, #0]
  2014d8:	400b      	ands	r3, r1
  2014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
  2014de:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
  2014e0:	b12b      	cbz	r3, 2014ee <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
  2014e2:	4806      	ldr	r0, [pc, #24]	; (2014fc <VectorE8+0x2c>)
  2014e4:	2112      	movs	r1, #18
  2014e6:	6843      	ldr	r3, [r0, #4]
  2014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  2014ec:	4798      	blx	r3
}
  2014ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2014f2:	f000 bba5 	b.w	201c40 <_port_irq_epilogue>
  2014f6:	bf00      	nop
  2014f8:	40013c00 	.word	0x40013c00
  2014fc:	20000834 	.word	0x20000834

00201500 <VectorE4>:
  pr = EXTI->PR;
  201500:	4a09      	ldr	r2, [pc, #36]	; (201528 <VectorE4+0x28>)
OSAL_IRQ_HANDLER(VectorE4) {
  201502:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201504:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
  201506:	6811      	ldr	r1, [r2, #0]
  201508:	400b      	ands	r3, r1
  20150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
  20150e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
  201510:	b12b      	cbz	r3, 20151e <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
  201512:	4806      	ldr	r0, [pc, #24]	; (20152c <VectorE4+0x2c>)
  201514:	2111      	movs	r1, #17
  201516:	6843      	ldr	r3, [r0, #4]
  201518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  20151c:	4798      	blx	r3
}
  20151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201522:	f000 bb8d 	b.w	201c40 <_port_irq_epilogue>
  201526:	bf00      	nop
  201528:	40013c00 	.word	0x40013c00
  20152c:	20000834 	.word	0x20000834

00201530 <Vector44>:
  pr = EXTI->PR;
  201530:	4a09      	ldr	r2, [pc, #36]	; (201558 <Vector44+0x28>)
OSAL_IRQ_HANDLER(Vector44) {
  201532:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201534:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
  201536:	6811      	ldr	r1, [r2, #0]
  201538:	400b      	ands	r3, r1
  20153a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
  20153e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
  201540:	b12b      	cbz	r3, 20154e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
  201542:	4806      	ldr	r0, [pc, #24]	; (20155c <Vector44+0x2c>)
  201544:	2110      	movs	r1, #16
  201546:	6843      	ldr	r3, [r0, #4]
  201548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  20154c:	4798      	blx	r3
}
  20154e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201552:	f000 bb75 	b.w	201c40 <_port_irq_epilogue>
  201556:	bf00      	nop
  201558:	40013c00 	.word	0x40013c00
  20155c:	20000834 	.word	0x20000834

00201560 <VectorE0>:
  pr = EXTI->PR;
  201560:	4b1d      	ldr	r3, [pc, #116]	; (2015d8 <VectorE0+0x78>)
OSAL_IRQ_HANDLER(VectorE0) {
  201562:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201564:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  201566:	681a      	ldr	r2, [r3, #0]
  201568:	4014      	ands	r4, r2
  20156a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
  EXTI->PR = pr;
  20156e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
  201570:	0562      	lsls	r2, r4, #21
  201572:	d42a      	bmi.n	2015ca <VectorE0+0x6a>
  if (pr & (1U << 11))
  201574:	0523      	lsls	r3, r4, #20
  201576:	d422      	bmi.n	2015be <VectorE0+0x5e>
  if (pr & (1U << 12))
  201578:	04e0      	lsls	r0, r4, #19
  20157a:	d41a      	bmi.n	2015b2 <VectorE0+0x52>
  if (pr & (1U << 13))
  20157c:	04a1      	lsls	r1, r4, #18
  20157e:	d412      	bmi.n	2015a6 <VectorE0+0x46>
  if (pr & (1U << 14))
  201580:	0462      	lsls	r2, r4, #17
  201582:	d40a      	bmi.n	20159a <VectorE0+0x3a>
  if (pr & (1U << 15))
  201584:	0423      	lsls	r3, r4, #16
  201586:	d504      	bpl.n	201592 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
  201588:	4814      	ldr	r0, [pc, #80]	; (2015dc <VectorE0+0x7c>)
  20158a:	210f      	movs	r1, #15
  20158c:	6843      	ldr	r3, [r0, #4]
  20158e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  201590:	4798      	blx	r3
}
  201592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201596:	f000 bb53 	b.w	201c40 <_port_irq_epilogue>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  20159a:	4810      	ldr	r0, [pc, #64]	; (2015dc <VectorE0+0x7c>)
  20159c:	210e      	movs	r1, #14
  20159e:	6843      	ldr	r3, [r0, #4]
  2015a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  2015a2:	4798      	blx	r3
  2015a4:	e7ee      	b.n	201584 <VectorE0+0x24>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  2015a6:	480d      	ldr	r0, [pc, #52]	; (2015dc <VectorE0+0x7c>)
  2015a8:	210d      	movs	r1, #13
  2015aa:	6843      	ldr	r3, [r0, #4]
  2015ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  2015ae:	4798      	blx	r3
  2015b0:	e7e6      	b.n	201580 <VectorE0+0x20>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  2015b2:	480a      	ldr	r0, [pc, #40]	; (2015dc <VectorE0+0x7c>)
  2015b4:	210c      	movs	r1, #12
  2015b6:	6843      	ldr	r3, [r0, #4]
  2015b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  2015ba:	4798      	blx	r3
  2015bc:	e7de      	b.n	20157c <VectorE0+0x1c>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  2015be:	4807      	ldr	r0, [pc, #28]	; (2015dc <VectorE0+0x7c>)
  2015c0:	210b      	movs	r1, #11
  2015c2:	6843      	ldr	r3, [r0, #4]
  2015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  2015c6:	4798      	blx	r3
  2015c8:	e7d6      	b.n	201578 <VectorE0+0x18>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  2015ca:	4804      	ldr	r0, [pc, #16]	; (2015dc <VectorE0+0x7c>)
  2015cc:	210a      	movs	r1, #10
  2015ce:	6843      	ldr	r3, [r0, #4]
  2015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  2015d2:	4798      	blx	r3
  2015d4:	e7ce      	b.n	201574 <VectorE0+0x14>
  2015d6:	bf00      	nop
  2015d8:	40013c00 	.word	0x40013c00
  2015dc:	20000834 	.word	0x20000834

002015e0 <Vector188>:
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2015e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  2015e4:	4d53      	ldr	r5, [pc, #332]	; (201734 <Vector188+0x154>)
  2015e6:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  2015e8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  2015ea:	69f4      	ldr	r4, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2015ec:	0722      	lsls	r2, r4, #28
  u->ICR = isr;
  2015ee:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2015f0:	d146      	bne.n	201680 <Vector188+0xa0>
  if (isr & USART_ISR_LBDF) {
  2015f2:	05e3      	lsls	r3, r4, #23
  2015f4:	d439      	bmi.n	20166a <Vector188+0x8a>
  if (isr & USART_ISR_RXNE) {
  2015f6:	06a0      	lsls	r0, r4, #26
  2015f8:	d416      	bmi.n	201628 <Vector188+0x48>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2015fa:	0639      	lsls	r1, r7, #24
  2015fc:	d501      	bpl.n	201602 <Vector188+0x22>
  2015fe:	0622      	lsls	r2, r4, #24
  201600:	d459      	bmi.n	2016b6 <Vector188+0xd6>
  if (isr & USART_ISR_TC) {
  201602:	0663      	lsls	r3, r4, #25
  201604:	d50c      	bpl.n	201620 <Vector188+0x40>
  201606:	2320      	movs	r3, #32
  201608:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20160c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  20160e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  201610:	429a      	cmp	r2, r3
  201612:	d06f      	beq.n	2016f4 <Vector188+0x114>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201614:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  201618:	2300      	movs	r3, #0
  20161a:	6037      	str	r7, [r6, #0]
  20161c:	f383 8811 	msr	BASEPRI, r3
}
  201620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  201624:	f000 bb0c 	b.w	201c40 <_port_irq_epilogue>
  201628:	2320      	movs	r3, #32
  20162a:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  20162e:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201630:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201634:	696b      	ldr	r3, [r5, #20]
  201636:	ea01 0802 	and.w	r8, r1, r2
  20163a:	2b00      	cmp	r3, #0
  20163c:	d061      	beq.n	201702 <Vector188+0x122>
  if (iqIsFullI(iqp)) {
  20163e:	6a2b      	ldr	r3, [r5, #32]
  201640:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  201642:	4293      	cmp	r3, r2
  201644:	d061      	beq.n	20170a <Vector188+0x12a>
  iqp->q_counter++;
  201646:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
  201648:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20164a:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20164c:	6229      	str	r1, [r5, #32]
  iqp->q_counter++;
  20164e:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
  201650:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  201654:	6a2a      	ldr	r2, [r5, #32]
  201656:	69eb      	ldr	r3, [r5, #28]
  201658:	429a      	cmp	r2, r3
  20165a:	d248      	bcs.n	2016ee <Vector188+0x10e>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
  20165c:	4836      	ldr	r0, [pc, #216]	; (201738 <Vector188+0x158>)
  20165e:	f000 ff17 	bl	202490 <chThdDequeueNextI.constprop.29>
  201662:	2300      	movs	r3, #0
  201664:	f383 8811 	msr	BASEPRI, r3
  201668:	e7c7      	b.n	2015fa <Vector188+0x1a>
  20166a:	2320      	movs	r3, #32
  20166c:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201670:	f44f 7000 	mov.w	r0, #512	; 0x200
  201674:	f000 ff1c 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
  201678:	2300      	movs	r3, #0
  20167a:	f383 8811 	msr	BASEPRI, r3
  20167e:	e7ba      	b.n	2015f6 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  201680:	f014 0f08 	tst.w	r4, #8
  201684:	bf0c      	ite	eq
  201686:	2000      	moveq	r0, #0
  201688:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  20168a:	07e3      	lsls	r3, r4, #31
  20168c:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201690:	bf48      	it	mi
  201692:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  201696:	07a1      	lsls	r1, r4, #30
    sts |= SD_FRAMING_ERROR;
  201698:	bf48      	it	mi
  20169a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  20169e:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
  2016a0:	bf48      	it	mi
  2016a2:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  2016a6:	f383 8811 	msr	BASEPRI, r3
  2016aa:	f000 ff01 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
  2016ae:	2300      	movs	r3, #0
  2016b0:	f383 8811 	msr	BASEPRI, r3
  2016b4:	e79d      	b.n	2015f2 <Vector188+0x12>
  2016b6:	2320      	movs	r3, #32
  2016b8:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  2016bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  2016be:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  2016c0:	429a      	cmp	r2, r3
  2016c2:	d02a      	beq.n	20171a <Vector188+0x13a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  2016c4:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2016c6:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  2016c8:	6c29      	ldr	r1, [r5, #64]	; 0x40
  oqp->q_counter++;
  2016ca:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  2016cc:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  2016ce:	4288      	cmp	r0, r1
  oqp->q_counter++;
  2016d0:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2016d2:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  2016d6:	d301      	bcc.n	2016dc <Vector188+0xfc>
    oqp->q_rdptr = oqp->q_buffer;
  2016d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  2016da:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
  2016dc:	4817      	ldr	r0, [pc, #92]	; (20173c <Vector188+0x15c>)
  2016de:	f000 fed7 	bl	202490 <chThdDequeueNextI.constprop.29>
      u->TDR = b;
  2016e2:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  2016e6:	2300      	movs	r3, #0
  2016e8:	f383 8811 	msr	BASEPRI, r3
  2016ec:	e789      	b.n	201602 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  2016ee:	69ab      	ldr	r3, [r5, #24]
  2016f0:	622b      	str	r3, [r5, #32]
  2016f2:	e7b3      	b.n	20165c <Vector188+0x7c>
    if (oqIsEmptyI(&sdp->oqueue))
  2016f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  2016f6:	2b00      	cmp	r3, #0
  2016f8:	d08c      	beq.n	201614 <Vector188+0x34>
  chEvtBroadcastFlagsI(esp, flags);
  2016fa:	2010      	movs	r0, #16
  2016fc:	f000 fed8 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
  201700:	e788      	b.n	201614 <Vector188+0x34>
  201702:	2004      	movs	r0, #4
  201704:	f000 fed4 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
  201708:	e799      	b.n	20163e <Vector188+0x5e>
  if (iqIsFullI(iqp)) {
  20170a:	696a      	ldr	r2, [r5, #20]
  20170c:	2a00      	cmp	r2, #0
  20170e:	d09a      	beq.n	201646 <Vector188+0x66>
  201710:	f44f 6080 	mov.w	r0, #1024	; 0x400
  201714:	f000 fecc 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
  201718:	e7a3      	b.n	201662 <Vector188+0x82>
  if (oqIsEmptyI(oqp)) {
  20171a:	6baa      	ldr	r2, [r5, #56]	; 0x38
  20171c:	2a00      	cmp	r2, #0
  20171e:	d0d1      	beq.n	2016c4 <Vector188+0xe4>
  201720:	2008      	movs	r0, #8
  201722:	f000 fec5 	bl	2024b0 <chEvtBroadcastFlagsI.constprop.28>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201726:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  20172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20172e:	6033      	str	r3, [r6, #0]
  201730:	e7d9      	b.n	2016e6 <Vector188+0x106>
  201732:	bf00      	nop
  201734:	20000e3c 	.word	0x20000e3c
  201738:	20000e48 	.word	0x20000e48
  20173c:	20000e6c 	.word	0x20000e6c

00201740 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
  201742:	4b23      	ldr	r3, [pc, #140]	; (2017d0 <Vector88+0x90>)
  ADC1->SR = 0;
  201744:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201746:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201748:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  20174a:	0693      	lsls	r3, r2, #26
  20174c:	d535      	bpl.n	2017ba <Vector88+0x7a>
  20174e:	4c21      	ldr	r4, [pc, #132]	; (2017d4 <Vector88+0x94>)
  201750:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201752:	6802      	ldr	r2, [r0, #0]
  201754:	6853      	ldr	r3, [r2, #4]
  201756:	2b00      	cmp	r3, #0
  201758:	d02f      	beq.n	2017ba <Vector88+0x7a>
    if (ADCD1.grpp != NULL)
  20175a:	6921      	ldr	r1, [r4, #16]
  20175c:	b369      	cbz	r1, 2017ba <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  20175e:	6813      	ldr	r3, [r2, #0]
  201760:	f023 031f 	bic.w	r3, r3, #31
  201764:	6013      	str	r3, [r2, #0]
  201766:	6813      	ldr	r3, [r2, #0]
  201768:	f013 0301 	ands.w	r3, r3, #1
  20176c:	d1fb      	bne.n	201766 <Vector88+0x26>
  20176e:	7a07      	ldrb	r7, [r0, #8]
  201770:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201772:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201774:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201776:	6846      	ldr	r6, [r0, #4]
  201778:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20177c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20177e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201780:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201782:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201784:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201786:	b1fd      	cbz	r5, 2017c8 <Vector88+0x88>
  201788:	2305      	movs	r3, #5
  20178a:	4812      	ldr	r0, [pc, #72]	; (2017d4 <Vector88+0x94>)
  20178c:	7023      	strb	r3, [r4, #0]
  20178e:	47a8      	blx	r5
  201790:	7823      	ldrb	r3, [r4, #0]
  201792:	2b05      	cmp	r3, #5
  201794:	d015      	beq.n	2017c2 <Vector88+0x82>
  201796:	2300      	movs	r3, #0
  201798:	6123      	str	r3, [r4, #16]
  20179a:	2320      	movs	r3, #32
  20179c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
  2017a0:	6963      	ldr	r3, [r4, #20]
  2017a2:	b13b      	cbz	r3, 2017b4 <Vector88+0x74>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
  2017a4:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  2017a8:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  2017aa:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  2017ac:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  2017ae:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  2017b0:	f000 fd6e 	bl	202290 <chSchReadyI>
  2017b4:	2300      	movs	r3, #0
  2017b6:	f383 8811 	msr	BASEPRI, r3
}
  2017ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2017be:	f000 ba3f 	b.w	201c40 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2017c2:	2302      	movs	r3, #2
  2017c4:	7023      	strb	r3, [r4, #0]
  2017c6:	e7e6      	b.n	201796 <Vector88+0x56>
  2017c8:	2302      	movs	r3, #2
  2017ca:	6125      	str	r5, [r4, #16]
  2017cc:	7023      	strb	r3, [r4, #0]
  2017ce:	e7e4      	b.n	20179a <Vector88+0x5a>
  2017d0:	40012000 	.word	0x40012000
  2017d4:	20000800 	.word	0x20000800
	...

002017e0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  2017e0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2017e2:	4b33      	ldr	r3, [pc, #204]	; (2018b0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  2017e4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  2017e8:	4a32      	ldr	r2, [pc, #200]	; (2018b4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2017ea:	4c33      	ldr	r4, [pc, #204]	; (2018b8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2017ec:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2017ee:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2017f0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2017f2:	681a      	ldr	r2, [r3, #0]
  2017f4:	f042 0201 	orr.w	r2, r2, #1
  2017f8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2017fa:	680b      	ldr	r3, [r1, #0]
  2017fc:	079b      	lsls	r3, r3, #30
  2017fe:	d5fc      	bpl.n	2017fa <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201800:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201802:	4a2b      	ldr	r2, [pc, #172]	; (2018b0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201804:	f023 0303 	bic.w	r3, r3, #3
  201808:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20180a:	688b      	ldr	r3, [r1, #8]
  20180c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20180e:	6893      	ldr	r3, [r2, #8]
  201810:	f013 030c 	ands.w	r3, r3, #12
  201814:	d1fb      	bne.n	20180e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201816:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201818:	4925      	ldr	r1, [pc, #148]	; (2018b0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20181a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  20181e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201820:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201822:	6813      	ldr	r3, [r2, #0]
  201824:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201828:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20182a:	680b      	ldr	r3, [r1, #0]
  20182c:	039d      	lsls	r5, r3, #14
  20182e:	d5fc      	bpl.n	20182a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201830:	4b22      	ldr	r3, [pc, #136]	; (2018bc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201832:	4820      	ldr	r0, [pc, #128]	; (2018b4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201834:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201836:	680b      	ldr	r3, [r1, #0]
  201838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20183c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20183e:	6843      	ldr	r3, [r0, #4]
  201840:	045c      	lsls	r4, r3, #17
  201842:	d5fc      	bpl.n	20183e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201844:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201846:	4a1b      	ldr	r2, [pc, #108]	; (2018b4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20184c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20184e:	6853      	ldr	r3, [r2, #4]
  201850:	03d9      	lsls	r1, r3, #15
  201852:	d5fc      	bpl.n	20184e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201854:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201856:	4917      	ldr	r1, [pc, #92]	; (2018b4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20185c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20185e:	684b      	ldr	r3, [r1, #4]
  201860:	039a      	lsls	r2, r3, #14
  201862:	d5fc      	bpl.n	20185e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201864:	4a12      	ldr	r2, [pc, #72]	; (2018b0 <__early_init+0xd0>)
  201866:	6813      	ldr	r3, [r2, #0]
  201868:	019b      	lsls	r3, r3, #6
  20186a:	d5fc      	bpl.n	201866 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20186c:	4b14      	ldr	r3, [pc, #80]	; (2018c0 <__early_init+0xe0>)
  20186e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201872:	4d14      	ldr	r5, [pc, #80]	; (2018c4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201874:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201878:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20187a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20187c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201880:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201884:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201886:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201888:	4909      	ldr	r1, [pc, #36]	; (2018b0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20188a:	f043 0302 	orr.w	r3, r3, #2
  20188e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201890:	688b      	ldr	r3, [r1, #8]
  201892:	f003 030c 	and.w	r3, r3, #12
  201896:	2b08      	cmp	r3, #8
  201898:	d1fa      	bne.n	201890 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20189a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2018a0:	644b      	str	r3, [r1, #68]	; 0x44
  2018a2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  2018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  2018a8:	bc30      	pop	{r4, r5}
  2018aa:	664b      	str	r3, [r1, #100]	; 0x64
  2018ac:	4770      	bx	lr
  2018ae:	bf00      	nop
  2018b0:	40023800 	.word	0x40023800
  2018b4:	40007000 	.word	0x40007000
  2018b8:	10000400 	.word	0x10000400
  2018bc:	09006c10 	.word	0x09006c10
  2018c0:	40023c00 	.word	0x40023c00
  2018c4:	30999400 	.word	0x30999400
	...

002018d0 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
  2018d0:	68c2      	ldr	r2, [r0, #12]
  2018d2:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
  2018d4:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
  2018d6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  2018da:	d10c      	bne.n	2018f6 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
  2018dc:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
  2018de:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
  2018e0:	7d08      	ldrb	r0, [r1, #20]
  2018e2:	b150      	cbz	r0, 2018fa <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
  2018e4:	6888      	ldr	r0, [r1, #8]
  2018e6:	b170      	cbz	r0, 201906 <icu_lld_enable_notifications+0x36>
        dier |= STM32_TIM_DIER_CC1IE;
  2018e8:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
  2018ec:	6909      	ldr	r1, [r1, #16]
  2018ee:	b109      	cbz	r1, 2018f4 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
  2018f0:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
  2018f4:	60d3      	str	r3, [r2, #12]
}
  2018f6:	bc10      	pop	{r4}
  2018f8:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
  2018fa:	6888      	ldr	r0, [r1, #8]
  2018fc:	2800      	cmp	r0, #0
  2018fe:	d1f3      	bne.n	2018e8 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC1IE;
  201900:	f043 0302 	orr.w	r3, r3, #2
  201904:	e7f2      	b.n	2018ec <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC2IE;
  201906:	f043 0304 	orr.w	r3, r3, #4
  20190a:	e7ef      	b.n	2018ec <icu_lld_enable_notifications+0x1c>
  20190c:	0000      	movs	r0, r0
	...

00201910 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
  201910:	7803      	ldrb	r3, [r0, #0]
  201912:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
  201914:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (icup->state == ICU_STOP) {
  201916:	d03b      	beq.n	201990 <icu_lld_start+0x80>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
  201918:	68c3      	ldr	r3, [r0, #12]
  20191a:	2200      	movs	r2, #0
  20191c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  20191e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  201920:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  201922:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  201924:	6841      	ldr	r1, [r0, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  201926:	2400      	movs	r4, #0
  psc = (icup->clock / icup->config->frequency) - 1;
  201928:	6882      	ldr	r2, [r0, #8]
  icup->tim->ARR  = 0xFFFF;
  20192a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
  20192e:	684e      	ldr	r6, [r1, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  201930:	611c      	str	r4, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  201932:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
  201934:	fbb2 f2f6 	udiv	r2, r2, r6
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  201938:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
  20193c:	3a01      	subs	r2, #1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  20193e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
  201940:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
  201942:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
  201944:	7d0a      	ldrb	r2, [r1, #20]
  201946:	b972      	cbnz	r2, 201966 <icu_lld_start+0x56>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  201948:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
  20194a:	f240 2401 	movw	r4, #513	; 0x201
  20194e:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  201950:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  201952:	780a      	ldrb	r2, [r1, #0]
  201954:	b1ca      	cbz	r2, 20198a <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  201956:	2213      	movs	r2, #19
  201958:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
  20195a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
  20195e:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
  201960:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[0];
  201962:	6143      	str	r3, [r0, #20]
  201964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  201966:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
  201968:	f44f 7481 	mov.w	r4, #258	; 0x102
  20196c:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  20196e:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  201970:	780a      	ldrb	r2, [r1, #0]
  201972:	b13a      	cbz	r2, 201984 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  201974:	2231      	movs	r2, #49	; 0x31
  201976:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
  201978:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
  20197c:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
  20197e:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[1];
  201980:	6143      	str	r3, [r0, #20]
  201982:	bdf0      	pop	{r4, r5, r6, r7, pc}
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  201984:	2213      	movs	r2, #19
  201986:	621a      	str	r2, [r3, #32]
  201988:	e7f6      	b.n	201978 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  20198a:	2231      	movs	r2, #49	; 0x31
  20198c:	621a      	str	r2, [r3, #32]
  20198e:	e7e4      	b.n	20195a <icu_lld_start+0x4a>
    if (&ICUD8 == icup) {
  201990:	4b1f      	ldr	r3, [pc, #124]	; (201a10 <icu_lld_start+0x100>)
  201992:	4298      	cmp	r0, r3
  201994:	d004      	beq.n	2019a0 <icu_lld_start+0x90>
    if (&ICUD9 == icup) {
  201996:	4b1f      	ldr	r3, [pc, #124]	; (201a14 <icu_lld_start+0x104>)
  201998:	4298      	cmp	r0, r3
  20199a:	d021      	beq.n	2019e0 <icu_lld_start+0xd0>
  20199c:	68c3      	ldr	r3, [r0, #12]
  20199e:	e7c1      	b.n	201924 <icu_lld_start+0x14>
      rccEnableTIM8(FALSE);
  2019a0:	4a1d      	ldr	r2, [pc, #116]	; (201a18 <icu_lld_start+0x108>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019a2:	2570      	movs	r5, #112	; 0x70
  2019a4:	4b1d      	ldr	r3, [pc, #116]	; (201a1c <icu_lld_start+0x10c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  2019aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
  2019ac:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      rccResetTIM8();
  2019b0:	f04f 0e00 	mov.w	lr, #0
      icup->clock = STM32_TIMCLK2;
  2019b4:	4f1a      	ldr	r7, [pc, #104]	; (201a20 <icu_lld_start+0x110>)
      rccEnableTIM8(FALSE);
  2019b6:	f041 0102 	orr.w	r1, r1, #2
  2019ba:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM8();
  2019bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
  2019be:	f041 0102 	orr.w	r1, r1, #2
  2019c2:	6251      	str	r1, [r2, #36]	; 0x24
  2019c4:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019c8:	f883 532c 	strb.w	r5, [r3, #812]	; 0x32c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019cc:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019d0:	605e      	str	r6, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019d2:	f883 532e 	strb.w	r5, [r3, #814]	; 0x32e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019d6:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019da:	605c      	str	r4, [r3, #4]
      icup->clock = STM32_TIMCLK2;
  2019dc:	6087      	str	r7, [r0, #8]
  2019de:	e7da      	b.n	201996 <icu_lld_start+0x86>
      rccEnableTIM9(FALSE);
  2019e0:	4b0d      	ldr	r3, [pc, #52]	; (201a18 <icu_lld_start+0x108>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019e2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019e6:	4a0d      	ldr	r2, [pc, #52]	; (201a1c <icu_lld_start+0x10c>)
      rccResetTIM9();
  2019e8:	2700      	movs	r7, #0
      rccEnableTIM9(FALSE);
  2019ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
  2019ec:	2670      	movs	r6, #112	; 0x70
      icup->clock = STM32_TIMCLK2;
  2019ee:	4d0c      	ldr	r5, [pc, #48]	; (201a20 <icu_lld_start+0x110>)
      rccEnableTIM9(FALSE);
  2019f0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  2019f4:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM9();
  2019f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  2019f8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  2019fc:	6259      	str	r1, [r3, #36]	; 0x24
  2019fe:	625f      	str	r7, [r3, #36]	; 0x24
  201a00:	f882 6318 	strb.w	r6, [r2, #792]	; 0x318
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201a04:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  201a08:	68c3      	ldr	r3, [r0, #12]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201a0a:	6014      	str	r4, [r2, #0]
      icup->clock = STM32_TIMCLK2;
  201a0c:	6085      	str	r5, [r0, #8]
  201a0e:	e789      	b.n	201924 <icu_lld_start+0x14>
  201a10:	2000084c 	.word	0x2000084c
  201a14:	20000864 	.word	0x20000864
  201a18:	40023800 	.word	0x40023800
  201a1c:	e000e100 	.word	0xe000e100
  201a20:	0cdfe600 	.word	0x0cdfe600
	...

00201a30 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  201a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201a34:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  201a38:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  201a3c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  201a40:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  201a44:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201a46:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  201a48:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  201a4c:	f04f 0a0f 	mov.w	sl, #15
  201a50:	e00e      	b.n	201a70 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201a52:	6a03      	ldr	r3, [r0, #32]
  201a54:	ea23 0404 	bic.w	r4, r3, r4
  201a58:	4325      	orrs	r5, r4
  201a5a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  201a5c:	0849      	lsrs	r1, r1, #1
  201a5e:	d047      	beq.n	201af0 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  201a60:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201a64:	3601      	adds	r6, #1
    ospeedr <<= 2;
  201a66:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  201a6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  201a6e:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  201a70:	07cb      	lsls	r3, r1, #31
  201a72:	d5f3      	bpl.n	201a5c <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  201a74:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201a76:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  201a78:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  201a7c:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  201a80:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  201a84:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  201a88:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201a8c:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  201a90:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201a94:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  201a98:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  201a9c:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  201aa0:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201aa4:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  201aa8:	ea6f 0303 	mvn.w	r3, r3
  201aac:	f8d0 b008 	ldr.w	fp, [r0, #8]
  201ab0:	ea0b 0b03 	and.w	fp, fp, r3
  201ab4:	ea4b 0b0c 	orr.w	fp, fp, ip
  201ab8:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201abc:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  201ac0:	ea03 0b0b 	and.w	fp, r3, fp
  201ac4:	ea4b 0b0e 	orr.w	fp, fp, lr
  201ac8:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  201acc:	d012      	beq.n	201af4 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  201ace:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  201ad2:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  201ad4:	ea03 030b 	and.w	r3, r3, fp
  201ad8:	ea43 0307 	orr.w	r3, r3, r7
  201adc:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  201ade:	d9b8      	bls.n	201a52 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  201ae2:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201ae4:	ea23 0404 	bic.w	r4, r3, r4
  201ae8:	ea45 0504 	orr.w	r5, r5, r4
  201aec:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  201aee:	d1b7      	bne.n	201a60 <_pal_lld_setgroupmode+0x30>
  201af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  201af4:	2e07      	cmp	r6, #7
  201af6:	d80a      	bhi.n	201b0e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201af8:	f8d0 b020 	ldr.w	fp, [r0, #32]
  201afc:	ea2b 0404 	bic.w	r4, fp, r4
  201b00:	4325      	orrs	r5, r4
  201b02:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  201b04:	6804      	ldr	r4, [r0, #0]
  201b06:	4023      	ands	r3, r4
  201b08:	433b      	orrs	r3, r7
  201b0a:	6003      	str	r3, [r0, #0]
  201b0c:	e7a6      	b.n	201a5c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201b0e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  201b12:	ea2b 0404 	bic.w	r4, fp, r4
  201b16:	4325      	orrs	r5, r4
  201b18:	6245      	str	r5, [r0, #36]	; 0x24
  201b1a:	e7f3      	b.n	201b04 <_pal_lld_setgroupmode+0xd4>
  201b1c:	0000      	movs	r0, r0
	...

00201b20 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  201b20:	b480      	push	{r7}
  201b22:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201b24:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  201b28:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  201b2a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201b2e:	2300      	movs	r3, #0
  201b30:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  201b34:	46bd      	mov	sp, r7
  201b36:	bc80      	pop	{r7}
  201b38:	4770      	bx	lr
  201b3a:	bf00      	nop
  201b3c:	0000      	movs	r0, r0
	...

00201b40 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  201b40:	b470      	push	{r4, r5, r6}
  201b42:	2320      	movs	r3, #32
  201b44:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201b48:	4e0d      	ldr	r6, [pc, #52]	; (201b80 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  201b4a:	1e4a      	subs	r2, r1, #1
  201b4c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  201b4e:	4c0d      	ldr	r4, [pc, #52]	; (201b84 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201b50:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201b52:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  201b54:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201b56:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  201b58:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201b5a:	1858      	adds	r0, r3, r1
  201b5c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  201b5e:	1a23      	subs	r3, r4, r0
  201b60:	429a      	cmp	r2, r3
  201b62:	d806      	bhi.n	201b72 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  201b64:	4402      	add	r2, r0
  201b66:	2300      	movs	r3, #0
  201b68:	6032      	str	r2, [r6, #0]
  201b6a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  201b6e:	bc70      	pop	{r4, r5, r6}
  201b70:	4770      	bx	lr
    return NULL;
  201b72:	2000      	movs	r0, #0
  201b74:	2300      	movs	r3, #0
  201b76:	f383 8811 	msr	BASEPRI, r3
}
  201b7a:	bc70      	pop	{r4, r5, r6}
  201b7c:	4770      	bx	lr
  201b7e:	bf00      	nop
  201b80:	20000c54 	.word	0x20000c54
  201b84:	20000c50 	.word	0x20000c50
	...

00201b90 <wakeup>:
  201b90:	2320      	movs	r3, #32
  201b92:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
  201b96:	f890 3020 	ldrb.w	r3, [r0, #32]
  201b9a:	2b07      	cmp	r3, #7
  201b9c:	d80e      	bhi.n	201bbc <wakeup+0x2c>
  201b9e:	e8df f003 	tbb	[pc, r3]
  201ba2:	0d28      	.short	0x0d28
  201ba4:	0408240d 	.word	0x0408240d
  201ba8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  201baa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  201bac:	6893      	ldr	r3, [r2, #8]
  201bae:	3301      	adds	r3, #1
  201bb0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201bb2:	e890 000c 	ldmia.w	r0, {r2, r3}
  201bb6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201bb8:	6802      	ldr	r2, [r0, #0]
  201bba:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  201bbc:	2200      	movs	r2, #0
  201bbe:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201bc0:	4b0e      	ldr	r3, [pc, #56]	; (201bfc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201bc2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201bc6:	b410      	push	{r4}
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  201bc8:	f04f 34ff 	mov.w	r4, #4294967295
  201bcc:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  201bce:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201bd0:	689a      	ldr	r2, [r3, #8]
  201bd2:	428a      	cmp	r2, r1
  201bd4:	d2fb      	bcs.n	201bce <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201bd6:	685a      	ldr	r2, [r3, #4]
  201bd8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  201bda:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  201bdc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  201bde:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201be0:	6058      	str	r0, [r3, #4]
  201be2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
  201be6:	bc10      	pop	{r4}
  201be8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  201bea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  201bec:	2200      	movs	r2, #0
  201bee:	601a      	str	r2, [r3, #0]
  201bf0:	e7e4      	b.n	201bbc <wakeup+0x2c>
  201bf2:	2300      	movs	r3, #0
  201bf4:	f383 8811 	msr	BASEPRI, r3
  201bf8:	4770      	bx	lr
  201bfa:	bf00      	nop
  201bfc:	20000e9c 	.word	0x20000e9c

00201c00 <_idle_thread.lto_priv.51>:
static void _idle_thread(void *p) {
  201c00:	e7fe      	b.n	201c00 <_idle_thread.lto_priv.51>
  201c02:	bf00      	nop
	...

00201c10 <chSchGoSleepS>:
  thread_t *otp = currp;
  201c10:	4b08      	ldr	r3, [pc, #32]	; (201c34 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201c12:	681a      	ldr	r2, [r3, #0]
  201c14:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201c16:	b430      	push	{r4, r5}
  otp->state = newstate;
  201c18:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  201c1c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  201c1e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  201c20:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  201c22:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  201c24:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  201c26:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201c2a:	619a      	str	r2, [r3, #24]
}
  201c2c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201c2e:	f7fe bb51 	b.w	2002d4 <_port_switch>
  201c32:	bf00      	nop
  201c34:	20000e9c 	.word	0x20000e9c
	...

00201c40 <_port_irq_epilogue>:
  201c40:	2320      	movs	r3, #32
  201c42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201c46:	4b11      	ldr	r3, [pc, #68]	; (201c8c <_port_irq_epilogue+0x4c>)
  201c48:	685b      	ldr	r3, [r3, #4]
  201c4a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  201c4e:	d102      	bne.n	201c56 <_port_irq_epilogue+0x16>
  201c50:	f383 8811 	msr	BASEPRI, r3
  201c54:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201c56:	b480      	push	{r7}
  201c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201c5a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  201c5e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201c62:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201c66:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  201c6a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  201c6e:	4a08      	ldr	r2, [pc, #32]	; (201c90 <_port_irq_epilogue+0x50>)
  201c70:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201c72:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201c74:	6889      	ldr	r1, [r1, #8]
  201c76:	6892      	ldr	r2, [r2, #8]
  201c78:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  201c7a:	bf8c      	ite	hi
  201c7c:	4a05      	ldrhi	r2, [pc, #20]	; (201c94 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  201c7e:	4a06      	ldrls	r2, [pc, #24]	; (201c98 <_port_irq_epilogue+0x58>)
  201c80:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201c84:	46bd      	mov	sp, r7
  201c86:	bc80      	pop	{r7}
  201c88:	4770      	bx	lr
  201c8a:	bf00      	nop
  201c8c:	e000ed00 	.word	0xe000ed00
  201c90:	20000e9c 	.word	0x20000e9c
  201c94:	002002f5 	.word	0x002002f5
  201c98:	002002f8 	.word	0x002002f8
  201c9c:	00000000 	.word	0x00000000

00201ca0 <Vector9C>:
  pr = EXTI->PR;
  201ca0:	4b19      	ldr	r3, [pc, #100]	; (201d08 <Vector9C+0x68>)
OSAL_IRQ_HANDLER(Vector9C) {
  201ca2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201ca4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  201ca6:	681a      	ldr	r2, [r3, #0]
  201ca8:	4014      	ands	r4, r2
  201caa:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  201cae:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
  201cb0:	06a3      	lsls	r3, r4, #26
  201cb2:	d422      	bmi.n	201cfa <Vector9C+0x5a>
  if (pr & (1U << 6))
  201cb4:	0660      	lsls	r0, r4, #25
  201cb6:	d41a      	bmi.n	201cee <Vector9C+0x4e>
  if (pr & (1U << 7))
  201cb8:	0621      	lsls	r1, r4, #24
  201cba:	d412      	bmi.n	201ce2 <Vector9C+0x42>
  if (pr & (1U << 8))
  201cbc:	05e2      	lsls	r2, r4, #23
  201cbe:	d40a      	bmi.n	201cd6 <Vector9C+0x36>
  if (pr & (1U << 9))
  201cc0:	05a3      	lsls	r3, r4, #22
  201cc2:	d504      	bpl.n	201cce <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
  201cc4:	4811      	ldr	r0, [pc, #68]	; (201d0c <Vector9C+0x6c>)
  201cc6:	2109      	movs	r1, #9
  201cc8:	6843      	ldr	r3, [r0, #4]
  201cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  201ccc:	4798      	blx	r3
}
  201cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201cd2:	f7ff bfb5 	b.w	201c40 <_port_irq_epilogue>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  201cd6:	480d      	ldr	r0, [pc, #52]	; (201d0c <Vector9C+0x6c>)
  201cd8:	2108      	movs	r1, #8
  201cda:	6843      	ldr	r3, [r0, #4]
  201cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  201cde:	4798      	blx	r3
  201ce0:	e7ee      	b.n	201cc0 <Vector9C+0x20>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  201ce2:	480a      	ldr	r0, [pc, #40]	; (201d0c <Vector9C+0x6c>)
  201ce4:	2107      	movs	r1, #7
  201ce6:	6843      	ldr	r3, [r0, #4]
  201ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  201cea:	4798      	blx	r3
  201cec:	e7e6      	b.n	201cbc <Vector9C+0x1c>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  201cee:	4807      	ldr	r0, [pc, #28]	; (201d0c <Vector9C+0x6c>)
  201cf0:	2106      	movs	r1, #6
  201cf2:	6843      	ldr	r3, [r0, #4]
  201cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  201cf6:	4798      	blx	r3
  201cf8:	e7de      	b.n	201cb8 <Vector9C+0x18>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  201cfa:	4804      	ldr	r0, [pc, #16]	; (201d0c <Vector9C+0x6c>)
  201cfc:	2105      	movs	r1, #5
  201cfe:	6843      	ldr	r3, [r0, #4]
  201d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  201d02:	4798      	blx	r3
  201d04:	e7d6      	b.n	201cb4 <Vector9C+0x14>
  201d06:	bf00      	nop
  201d08:	40013c00 	.word	0x40013c00
  201d0c:	20000834 	.word	0x20000834

00201d10 <Vector68>:
  pr = EXTI->PR;
  201d10:	4a08      	ldr	r2, [pc, #32]	; (201d34 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
  201d12:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201d14:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  201d16:	6811      	ldr	r1, [r2, #0]
  201d18:	400b      	ands	r3, r1
  201d1a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  201d1e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
  201d20:	b123      	cbz	r3, 201d2c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
  201d22:	4805      	ldr	r0, [pc, #20]	; (201d38 <Vector68+0x28>)
  201d24:	2104      	movs	r1, #4
  201d26:	6843      	ldr	r3, [r0, #4]
  201d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201d2a:	4798      	blx	r3
}
  201d2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201d30:	f7ff bf86 	b.w	201c40 <_port_irq_epilogue>
  201d34:	40013c00 	.word	0x40013c00
  201d38:	20000834 	.word	0x20000834
  201d3c:	00000000 	.word	0x00000000

00201d40 <Vector64>:
  pr = EXTI->PR;
  201d40:	4a08      	ldr	r2, [pc, #32]	; (201d64 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
  201d42:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201d44:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  201d46:	6811      	ldr	r1, [r2, #0]
  201d48:	400b      	ands	r3, r1
  201d4a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  201d4e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
  201d50:	b123      	cbz	r3, 201d5c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
  201d52:	4805      	ldr	r0, [pc, #20]	; (201d68 <Vector64+0x28>)
  201d54:	2103      	movs	r1, #3
  201d56:	6843      	ldr	r3, [r0, #4]
  201d58:	69db      	ldr	r3, [r3, #28]
  201d5a:	4798      	blx	r3
}
  201d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201d60:	f7ff bf6e 	b.w	201c40 <_port_irq_epilogue>
  201d64:	40013c00 	.word	0x40013c00
  201d68:	20000834 	.word	0x20000834
  201d6c:	00000000 	.word	0x00000000

00201d70 <Vector60>:
  pr = EXTI->PR;
  201d70:	4a08      	ldr	r2, [pc, #32]	; (201d94 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
  201d72:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201d74:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  201d76:	6811      	ldr	r1, [r2, #0]
  201d78:	400b      	ands	r3, r1
  201d7a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  201d7e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
  201d80:	b123      	cbz	r3, 201d8c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
  201d82:	4805      	ldr	r0, [pc, #20]	; (201d98 <Vector60+0x28>)
  201d84:	2102      	movs	r1, #2
  201d86:	6843      	ldr	r3, [r0, #4]
  201d88:	695b      	ldr	r3, [r3, #20]
  201d8a:	4798      	blx	r3
}
  201d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201d90:	f7ff bf56 	b.w	201c40 <_port_irq_epilogue>
  201d94:	40013c00 	.word	0x40013c00
  201d98:	20000834 	.word	0x20000834
  201d9c:	00000000 	.word	0x00000000

00201da0 <Vector5C>:
  pr = EXTI->PR;
  201da0:	4a08      	ldr	r2, [pc, #32]	; (201dc4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
  201da2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201da4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  201da6:	6811      	ldr	r1, [r2, #0]
  201da8:	400b      	ands	r3, r1
  201daa:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  201dae:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
  201db0:	b123      	cbz	r3, 201dbc <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
  201db2:	4805      	ldr	r0, [pc, #20]	; (201dc8 <Vector5C+0x28>)
  201db4:	2101      	movs	r1, #1
  201db6:	6843      	ldr	r3, [r0, #4]
  201db8:	68db      	ldr	r3, [r3, #12]
  201dba:	4798      	blx	r3
}
  201dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201dc0:	f7ff bf3e 	b.w	201c40 <_port_irq_epilogue>
  201dc4:	40013c00 	.word	0x40013c00
  201dc8:	20000834 	.word	0x20000834
  201dcc:	00000000 	.word	0x00000000

00201dd0 <Vector58>:
  pr = EXTI->PR;
  201dd0:	4a08      	ldr	r2, [pc, #32]	; (201df4 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
  201dd2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201dd4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  201dd6:	6811      	ldr	r1, [r2, #0]
  201dd8:	400b      	ands	r3, r1
  201dda:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  201dde:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
  201de0:	b123      	cbz	r3, 201dec <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
  201de2:	4805      	ldr	r0, [pc, #20]	; (201df8 <Vector58+0x28>)
  201de4:	2100      	movs	r1, #0
  201de6:	6843      	ldr	r3, [r0, #4]
  201de8:	685b      	ldr	r3, [r3, #4]
  201dea:	4798      	blx	r3
}
  201dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201df0:	f7ff bf26 	b.w	201c40 <_port_irq_epilogue>
  201df4:	40013c00 	.word	0x40013c00
  201df8:	20000834 	.word	0x20000834
  201dfc:	00000000 	.word	0x00000000

00201e00 <chMBPostI>:
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
  201e00:	b538      	push	{r3, r4, r5, lr}
  if (mbp->reset) {
  201e02:	7d03      	ldrb	r3, [r0, #20]
  201e04:	b9cb      	cbnz	r3, 201e3a <chMBPostI+0x3a>
  201e06:	6805      	ldr	r5, [r0, #0]
  201e08:	6842      	ldr	r2, [r0, #4]
 */
static inline cnt_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  201e0a:	6903      	ldr	r3, [r0, #16]
  return (cnt_t)(mbp->top - mbp->buffer);
  201e0c:	1b54      	subs	r4, r2, r5
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  201e0e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
  201e12:	2b00      	cmp	r3, #0
  201e14:	dd14      	ble.n	201e40 <chMBPostI+0x40>
    *mbp->wrptr++ = msg;
  201e16:	6884      	ldr	r4, [r0, #8]
  201e18:	1d23      	adds	r3, r4, #4
  201e1a:	6083      	str	r3, [r0, #8]
    if (mbp->wrptr >= mbp->top) {
  201e1c:	4293      	cmp	r3, r2
    *mbp->wrptr++ = msg;
  201e1e:	6021      	str	r1, [r4, #0]
  201e20:	4603      	mov	r3, r0
    mbp->cnt++;
  201e22:	6902      	ldr	r2, [r0, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  201e24:	f100 0020 	add.w	r0, r0, #32
      mbp->wrptr = mbp->buffer;
  201e28:	bf28      	it	cs
  201e2a:	f840 5c18 	strcs.w	r5, [r0, #-24]
    mbp->cnt++;
  201e2e:	3201      	adds	r2, #1
  201e30:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  201e32:	f000 fb2d 	bl	202490 <chThdDequeueNextI.constprop.29>
    return MSG_OK;
  201e36:	2000      	movs	r0, #0
  201e38:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
  201e3a:	f06f 0001 	mvn.w	r0, #1
  201e3e:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
  201e40:	f04f 30ff 	mov.w	r0, #4294967295
}
  201e44:	bd38      	pop	{r3, r4, r5, pc}
  201e46:	bf00      	nop
	...

00201e50 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201e50:	4b0e      	ldr	r3, [pc, #56]	; (201e8c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  201e52:	6882      	ldr	r2, [r0, #8]
  201e54:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201e56:	490e      	ldr	r1, [pc, #56]	; (201e90 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201e58:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  201e5a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  201e5c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201e5e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201e60:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201e62:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201e64:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201e66:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201e68:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  201e6a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  201e6e:	18e4      	adds	r4, r4, r3
  201e70:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201e74:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201e76:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201e78:	bf88      	it	hi
  201e7a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  201e7c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  201e7e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201e82:	bf38      	it	cc
  201e84:	6003      	strcc	r3, [r0, #0]
}
  201e86:	bc30      	pop	{r4, r5}
  201e88:	4770      	bx	lr
  201e8a:	bf00      	nop
  201e8c:	e0001000 	.word	0xe0001000
  201e90:	20000e9c 	.word	0x20000e9c
	...

00201ea0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
  201ea0:	4a0e      	ldr	r2, [pc, #56]	; (201edc <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201ea2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201ea4:	6810      	ldr	r0, [r2, #0]
void chSchDoRescheduleAhead(void) {
  201ea6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201ea8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  201eaa:	2500      	movs	r5, #0
  thread_t *otp = currp;
  201eac:	6994      	ldr	r4, [r2, #24]
  201eae:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201eb0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201eb2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201eb6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  201eba:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201ebc:	6190      	str	r0, [r2, #24]
  201ebe:	e000      	b.n	201ec2 <chSchDoReschedule+0x22>
  201ec0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201ec2:	689a      	ldr	r2, [r3, #8]
  201ec4:	4291      	cmp	r1, r2
  201ec6:	d3fb      	bcc.n	201ec0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201ec8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  201eca:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  201ecc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  201ece:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201ed0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201ed2:	605c      	str	r4, [r3, #4]
}
  201ed4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201ed6:	f7fe b9fd 	b.w	2002d4 <_port_switch>
  201eda:	bf00      	nop
  201edc:	20000e9c 	.word	0x20000e9c

00201ee0 <chMBFetchS.part.4>:
msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
  201ee0:	4603      	mov	r3, r0
      *msgp = *mbp->rdptr++;
  201ee2:	68c0      	ldr	r0, [r0, #12]
msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
  201ee4:	b510      	push	{r4, lr}
      *msgp = *mbp->rdptr++;
  201ee6:	1d02      	adds	r2, r0, #4
      if (mbp->rdptr >= mbp->top) {
  201ee8:	685c      	ldr	r4, [r3, #4]
      *msgp = *mbp->rdptr++;
  201eea:	6800      	ldr	r0, [r0, #0]
      if (mbp->rdptr >= mbp->top) {
  201eec:	42a2      	cmp	r2, r4
      *msgp = *mbp->rdptr++;
  201eee:	60da      	str	r2, [r3, #12]
  201ef0:	6008      	str	r0, [r1, #0]
      if (mbp->rdptr >= mbp->top) {
  201ef2:	d301      	bcc.n	201ef8 <chMBFetchS.part.4+0x18>
        mbp->rdptr = mbp->buffer;
  201ef4:	681a      	ldr	r2, [r3, #0]
  201ef6:	60da      	str	r2, [r3, #12]
      }
      mbp->cnt--;
  201ef8:	691a      	ldr	r2, [r3, #16]

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201efa:	f103 0018 	add.w	r0, r3, #24
      mbp->cnt--;
  201efe:	3a01      	subs	r2, #1
  201f00:	611a      	str	r2, [r3, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201f02:	f000 fac5 	bl	202490 <chThdDequeueNextI.constprop.29>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
  201f06:	4b05      	ldr	r3, [pc, #20]	; (201f1c <chMBFetchS.part.4+0x3c>)
  201f08:	681a      	ldr	r2, [r3, #0]
  201f0a:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
  201f0c:	6892      	ldr	r2, [r2, #8]
  201f0e:	689b      	ldr	r3, [r3, #8]
  201f10:	429a      	cmp	r2, r3
  201f12:	d901      	bls.n	201f18 <chMBFetchS.part.4+0x38>
    chSchDoRescheduleAhead();
  201f14:	f7ff ffc4 	bl	201ea0 <chSchDoReschedule>
    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  } while (rdymsg == MSG_OK);

  return rdymsg;
}
  201f18:	2000      	movs	r0, #0
  201f1a:	bd10      	pop	{r4, pc}
  201f1c:	20000e9c 	.word	0x20000e9c

00201f20 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201f24:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201f26:	b5f0      	push	{r4, r5, r6, r7, lr}
  201f28:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  201f2a:	d031      	beq.n	201f90 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  201f2c:	4c1c      	ldr	r4, [pc, #112]	; (201fa0 <chSchGoSleepTimeoutS+0x80>)
  201f2e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201f30:	481c      	ldr	r0, [pc, #112]	; (201fa4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201f32:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201f34:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201f36:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201f38:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  201f3a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  201f3c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  201f3e:	d905      	bls.n	201f4c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201f40:	1a89      	subs	r1, r1, r2
    p = p->next;
  201f42:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201f44:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201f46:	891a      	ldrh	r2, [r3, #8]
  201f48:	428a      	cmp	r2, r1
  201f4a:	d3f9      	bcc.n	201f40 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  201f4c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  201f4e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201f50:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201f52:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201f56:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201f58:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  201f5a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  201f5c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  201f5e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201f62:	891a      	ldrh	r2, [r3, #8]
  201f64:	1a51      	subs	r1, r2, r1
  201f66:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201f68:	84a6      	strh	r6, [r4, #36]	; 0x24
  201f6a:	f7ff fe51 	bl	201c10 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201f6e:	9b04      	ldr	r3, [sp, #16]
  201f70:	b153      	cbz	r3, 201f88 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201f72:	9b01      	ldr	r3, [sp, #4]
  201f74:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201f78:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  201f7a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  201f7c:	4402      	add	r2, r0
  201f7e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201f80:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201f82:	9b01      	ldr	r3, [sp, #4]
  201f84:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201f86:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201f88:	69a3      	ldr	r3, [r4, #24]
}
  201f8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201f8c:	b007      	add	sp, #28
  201f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201f90:	4c03      	ldr	r4, [pc, #12]	; (201fa0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201f92:	f7ff fe3d 	bl	201c10 <chSchGoSleepS>
  return currp->u.rdymsg;
  201f96:	69a3      	ldr	r3, [r4, #24]
}
  201f98:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201f9a:	b007      	add	sp, #28
  201f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201f9e:	bf00      	nop
  201fa0:	20000e9c 	.word	0x20000e9c
  201fa4:	00201b91 	.word	0x00201b91
	...

00201fb0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  201fb0:	b161      	cbz	r1, 201fcc <chThdEnqueueTimeoutS+0x1c>
  201fb2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  201fb4:	4b07      	ldr	r3, [pc, #28]	; (201fd4 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201fb6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201fb8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  201fba:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  201fbc:	6854      	ldr	r4, [r2, #4]
  201fbe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201fc2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201fc4:	6053      	str	r3, [r2, #4]
}
  201fc6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201fc8:	f7ff bfaa 	b.w	201f20 <chSchGoSleepTimeoutS>
}
  201fcc:	f04f 30ff 	mov.w	r0, #4294967295
  201fd0:	4770      	bx	lr
  201fd2:	bf00      	nop
  201fd4:	20000e9c 	.word	0x20000e9c
	...

00201fe0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201fe4:	4699      	mov	r9, r3
  201fe6:	b083      	sub	sp, #12
  201fe8:	4604      	mov	r4, r0
  201fea:	460e      	mov	r6, r1
  201fec:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  201fee:	f8d0 801c 	ldr.w	r8, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201ff2:	2320      	movs	r3, #32
  201ff4:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201ff8:	4b26      	ldr	r3, [pc, #152]	; (202094 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201ffa:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  201ffe:	2700      	movs	r7, #0
  202000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  202002:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  202006:	fa19 f383 	uxtah	r3, r9, r3
  20200a:	b29b      	uxth	r3, r3
  20200c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20200e:	68a3      	ldr	r3, [r4, #8]
  202010:	b313      	cbz	r3, 202058 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  202012:	6961      	ldr	r1, [r4, #20]
  202014:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  202018:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20201a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20201c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20201e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  202020:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  202022:	7833      	ldrb	r3, [r6, #0]
  202024:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  202026:	6961      	ldr	r1, [r4, #20]
  202028:	6923      	ldr	r3, [r4, #16]
  20202a:	4299      	cmp	r1, r3
  20202c:	d301      	bcc.n	202032 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20202e:	68e3      	ldr	r3, [r4, #12]
  202030:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  202032:	f1b8 0f00 	cmp.w	r8, #0
  202036:	d001      	beq.n	20203c <oqWriteTimeout+0x5c>
      nfy(oqp);
  202038:	4620      	mov	r0, r4
  20203a:	47c0      	blx	r8
  20203c:	2300      	movs	r3, #0
  20203e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  202042:	3d01      	subs	r5, #1
    w++;
  202044:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  202048:	d019      	beq.n	20207e <oqWriteTimeout+0x9e>
  20204a:	2320      	movs	r3, #32
  20204c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  202050:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  202052:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  202054:	2b00      	cmp	r3, #0
  202056:	d1dc      	bne.n	202012 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  202058:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20205c:	4592      	cmp	sl, r2
  20205e:	d812      	bhi.n	202086 <oqWriteTimeout+0xa6>
  202060:	4a0c      	ldr	r2, [pc, #48]	; (202094 <oqWriteTimeout+0xb4>)
  202062:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  202064:	9a01      	ldr	r2, [sp, #4]
  202066:	1a51      	subs	r1, r2, r1
  202068:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20206a:	4589      	cmp	r9, r1
  20206c:	d305      	bcc.n	20207a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  20206e:	4620      	mov	r0, r4
  202070:	f7ff ff9e 	bl	201fb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  202074:	2800      	cmp	r0, #0
  202076:	d0ca      	beq.n	20200e <oqWriteTimeout+0x2e>
  202078:	2300      	movs	r3, #0
  20207a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20207e:	4638      	mov	r0, r7
  202080:	b003      	add	sp, #12
  202082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  202086:	4649      	mov	r1, r9
  202088:	4620      	mov	r0, r4
  20208a:	f7ff ff91 	bl	201fb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20208e:	2800      	cmp	r0, #0
  202090:	d0bd      	beq.n	20200e <oqWriteTimeout+0x2e>
  202092:	e7f1      	b.n	202078 <oqWriteTimeout+0x98>
  202094:	20000e9c 	.word	0x20000e9c
	...

002020a0 <_writet.lto_priv.49>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2020a0:	3030      	adds	r0, #48	; 0x30
  2020a2:	f7ff bf9d 	b.w	201fe0 <oqWriteTimeout>
  2020a6:	bf00      	nop
	...

002020b0 <_write.lto_priv.43>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2020b0:	3030      	adds	r0, #48	; 0x30
  2020b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2020b6:	f7ff bf93 	b.w	201fe0 <oqWriteTimeout>
  2020ba:	bf00      	nop
  2020bc:	0000      	movs	r0, r0
	...

002020c0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  2020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2020c2:	4604      	mov	r4, r0
  2020c4:	460f      	mov	r7, r1
  2020c6:	4616      	mov	r6, r2
  2020c8:	2320      	movs	r3, #32
  2020ca:	f383 8811 	msr	BASEPRI, r3
  2020ce:	e003      	b.n	2020d8 <oqPutTimeout+0x18>
  2020d0:	f7ff ff6e 	bl	201fb0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2020d4:	2800      	cmp	r0, #0
  2020d6:	db19      	blt.n	20210c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  2020d8:	68a5      	ldr	r5, [r4, #8]
  2020da:	4631      	mov	r1, r6
  2020dc:	4620      	mov	r0, r4
  2020de:	2d00      	cmp	r5, #0
  2020e0:	d0f6      	beq.n	2020d0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  2020e2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  2020e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2020e6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  2020e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  2020ea:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  2020ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2020ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  2020f0:	6962      	ldr	r2, [r4, #20]
  2020f2:	6923      	ldr	r3, [r4, #16]
  2020f4:	429a      	cmp	r2, r3
  2020f6:	d301      	bcc.n	2020fc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  2020f8:	68e3      	ldr	r3, [r4, #12]
  2020fa:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  2020fc:	69e3      	ldr	r3, [r4, #28]
  2020fe:	b10b      	cbz	r3, 202104 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  202100:	4620      	mov	r0, r4
  202102:	4798      	blx	r3
  202104:	2000      	movs	r0, #0
  202106:	f380 8811 	msr	BASEPRI, r0
}
  20210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20210c:	f385 8811 	msr	BASEPRI, r5
  202110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  202112:	bf00      	nop
	...

00202120 <_putt.lto_priv.47>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  202120:	3030      	adds	r0, #48	; 0x30
  202122:	f7ff bfcd 	b.w	2020c0 <oqPutTimeout>
  202126:	bf00      	nop
	...

00202130 <_put.lto_priv.45>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  202130:	3030      	adds	r0, #48	; 0x30
  202132:	f64f 72ff 	movw	r2, #65535	; 0xffff
  202136:	f7ff bfc3 	b.w	2020c0 <oqPutTimeout>
  20213a:	bf00      	nop
  20213c:	0000      	movs	r0, r0
	...

00202140 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  202140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202144:	4699      	mov	r9, r3
  202146:	b083      	sub	sp, #12
  202148:	4604      	mov	r4, r0
  20214a:	460e      	mov	r6, r1
  20214c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20214e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  202152:	2320      	movs	r3, #32
  202154:	f383 8811 	msr	BASEPRI, r3
  202158:	4b26      	ldr	r3, [pc, #152]	; (2021f4 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20215a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  20215e:	2700      	movs	r7, #0
  202160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  202162:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  202166:	fa19 f383 	uxtah	r3, r9, r3
  20216a:	b29b      	uxth	r3, r3
  20216c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  20216e:	68a3      	ldr	r3, [r4, #8]
  202170:	b313      	cbz	r3, 2021b8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  202172:	69a1      	ldr	r1, [r4, #24]
  202174:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  202178:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20217a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20217c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20217e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  202180:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  202182:	780b      	ldrb	r3, [r1, #0]
  202184:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  202186:	69a1      	ldr	r1, [r4, #24]
  202188:	6923      	ldr	r3, [r4, #16]
  20218a:	4299      	cmp	r1, r3
  20218c:	d301      	bcc.n	202192 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  20218e:	68e3      	ldr	r3, [r4, #12]
  202190:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  202192:	f1b8 0f00 	cmp.w	r8, #0
  202196:	d001      	beq.n	20219c <iqReadTimeout+0x5c>
      nfy(iqp);
  202198:	4620      	mov	r0, r4
  20219a:	47c0      	blx	r8
  20219c:	2300      	movs	r3, #0
  20219e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  2021a2:	3d01      	subs	r5, #1
    r++;
  2021a4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2021a8:	d019      	beq.n	2021de <iqReadTimeout+0x9e>
  2021aa:	2320      	movs	r3, #32
  2021ac:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  2021b0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2021b2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  2021b4:	2b00      	cmp	r3, #0
  2021b6:	d1dc      	bne.n	202172 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2021b8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2021bc:	4592      	cmp	sl, r2
  2021be:	d812      	bhi.n	2021e6 <iqReadTimeout+0xa6>
  2021c0:	4a0c      	ldr	r2, [pc, #48]	; (2021f4 <iqReadTimeout+0xb4>)
  2021c2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2021c4:	9a01      	ldr	r2, [sp, #4]
  2021c6:	1a51      	subs	r1, r2, r1
  2021c8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2021ca:	4589      	cmp	r9, r1
  2021cc:	d305      	bcc.n	2021da <iqReadTimeout+0x9a>
  2021ce:	4620      	mov	r0, r4
  2021d0:	f7ff feee 	bl	201fb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2021d4:	2800      	cmp	r0, #0
  2021d6:	d0ca      	beq.n	20216e <iqReadTimeout+0x2e>
  2021d8:	2300      	movs	r3, #0
  2021da:	f383 8811 	msr	BASEPRI, r3
}
  2021de:	4638      	mov	r0, r7
  2021e0:	b003      	add	sp, #12
  2021e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2021e6:	4649      	mov	r1, r9
  2021e8:	4620      	mov	r0, r4
  2021ea:	f7ff fee1 	bl	201fb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2021ee:	2800      	cmp	r0, #0
  2021f0:	d0bd      	beq.n	20216e <iqReadTimeout+0x2e>
  2021f2:	e7f1      	b.n	2021d8 <iqReadTimeout+0x98>
  2021f4:	20000e9c 	.word	0x20000e9c
	...

00202200 <_readt.lto_priv.50>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  202200:	300c      	adds	r0, #12
  202202:	f7ff bf9d 	b.w	202140 <iqReadTimeout>
  202206:	bf00      	nop
	...

00202210 <_read.lto_priv.44>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  202210:	300c      	adds	r0, #12
  202212:	f64f 73ff 	movw	r3, #65535	; 0xffff
  202216:	f7ff bf93 	b.w	202140 <iqReadTimeout>
  20221a:	bf00      	nop
  20221c:	0000      	movs	r0, r0
	...

00202220 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  202220:	b570      	push	{r4, r5, r6, lr}
  202222:	2320      	movs	r3, #32
  202224:	4604      	mov	r4, r0
  202226:	460e      	mov	r6, r1
  202228:	f383 8811 	msr	BASEPRI, r3
  20222c:	e003      	b.n	202236 <iqGetTimeout+0x16>
  20222e:	f7ff febf 	bl	201fb0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  202232:	2800      	cmp	r0, #0
  202234:	db19      	blt.n	20226a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  202236:	68a5      	ldr	r5, [r4, #8]
  202238:	4631      	mov	r1, r6
  20223a:	4620      	mov	r0, r4
  20223c:	2d00      	cmp	r5, #0
  20223e:	d0f6      	beq.n	20222e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  202240:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  202242:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  202244:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  202246:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  202248:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  20224a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  20224c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  20224e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  202250:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  202252:	d301      	bcc.n	202258 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  202254:	68e3      	ldr	r3, [r4, #12]
  202256:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  202258:	69e3      	ldr	r3, [r4, #28]
  20225a:	b10b      	cbz	r3, 202260 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  20225c:	4620      	mov	r0, r4
  20225e:	4798      	blx	r3
  202260:	2300      	movs	r3, #0
  202262:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  202266:	4628      	mov	r0, r5
}
  202268:	bd70      	pop	{r4, r5, r6, pc}
  20226a:	f385 8811 	msr	BASEPRI, r5
  20226e:	bd70      	pop	{r4, r5, r6, pc}

00202270 <_gett.lto_priv.48>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  202270:	300c      	adds	r0, #12
  202272:	f7ff bfd5 	b.w	202220 <iqGetTimeout>
  202276:	bf00      	nop
	...

00202280 <_get.lto_priv.46>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  202280:	300c      	adds	r0, #12
  202282:	f64f 71ff 	movw	r1, #65535	; 0xffff
  202286:	f7ff bfcb 	b.w	202220 <iqGetTimeout>
  20228a:	bf00      	nop
  20228c:	0000      	movs	r0, r0
	...

00202290 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  202290:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  202292:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  202294:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  202296:	4b08      	ldr	r3, [pc, #32]	; (2022b8 <chSchReadyI+0x28>)
  202298:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20229a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20229e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2022a0:	689a      	ldr	r2, [r3, #8]
  2022a2:	428a      	cmp	r2, r1
  2022a4:	d2fb      	bcs.n	20229e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2022a6:	685a      	ldr	r2, [r3, #4]
}
  2022a8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2022aa:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2022ac:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2022ae:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2022b0:	605c      	str	r4, [r3, #4]
}
  2022b2:	bc10      	pop	{r4}
  2022b4:	4770      	bx	lr
  2022b6:	bf00      	nop
  2022b8:	20000e9c 	.word	0x20000e9c
  2022bc:	00000000 	.word	0x00000000

002022c0 <chThdExit>:
void chThdExit(msg_t msg) {
  2022c0:	b538      	push	{r3, r4, r5, lr}
  2022c2:	2220      	movs	r2, #32
  2022c4:	4603      	mov	r3, r0
  2022c6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  2022ca:	4a10      	ldr	r2, [pc, #64]	; (20230c <chThdExit+0x4c>)
  2022cc:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  2022ce:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  2022d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  2022d4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  2022d6:	4285      	cmp	r5, r0
  2022d8:	d006      	beq.n	2022e8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  2022da:	6803      	ldr	r3, [r0, #0]
  2022dc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  2022de:	f7ff ffd7 	bl	202290 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  2022e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  2022e4:	42a8      	cmp	r0, r5
  2022e6:	d1f8      	bne.n	2022da <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  2022e8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  2022ec:	b943      	cbnz	r3, 202300 <chThdExit+0x40>
  2022ee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  2022f2:	079b      	lsls	r3, r3, #30
  2022f4:	d104      	bne.n	202300 <chThdExit+0x40>
    REG_REMOVE(tp);
  2022f6:	6922      	ldr	r2, [r4, #16]
  2022f8:	6963      	ldr	r3, [r4, #20]
  2022fa:	611a      	str	r2, [r3, #16]
  2022fc:	6922      	ldr	r2, [r4, #16]
  2022fe:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  202300:	200f      	movs	r0, #15
}
  202302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  202306:	f7ff bc83 	b.w	201c10 <chSchGoSleepS>
  20230a:	bf00      	nop
  20230c:	20000e9c 	.word	0x20000e9c

00202310 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  202310:	e7fe      	b.n	202310 <BusFault_Handler>
  202312:	bf00      	nop
	...

00202320 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  202320:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  202322:	4f12      	ldr	r7, [pc, #72]	; (20236c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  202324:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  202326:	4d12      	ldr	r5, [pc, #72]	; (202370 <__init_ram_areas+0x50>)
  202328:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20232c:	4c11      	ldr	r4, [pc, #68]	; (202374 <__init_ram_areas+0x54>)
  20232e:	4b12      	ldr	r3, [pc, #72]	; (202378 <__init_ram_areas+0x58>)
  202330:	4912      	ldr	r1, [pc, #72]	; (20237c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  202332:	429c      	cmp	r4, r3
  202334:	d911      	bls.n	20235a <__init_ram_areas+0x3a>
  202336:	3904      	subs	r1, #4
  202338:	461a      	mov	r2, r3
      *p = *tp;
  20233a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20233e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  202342:	4294      	cmp	r4, r2
  202344:	d8f9      	bhi.n	20233a <__init_ram_areas+0x1a>
  202346:	43da      	mvns	r2, r3
  202348:	4414      	add	r4, r2
  20234a:	f024 0403 	bic.w	r4, r4, #3
  20234e:	3404      	adds	r4, #4
  202350:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  202352:	429d      	cmp	r5, r3
  202354:	d903      	bls.n	20235e <__init_ram_areas+0x3e>
      *p = 0;
  202356:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20235a:	429d      	cmp	r5, r3
  20235c:	d8fb      	bhi.n	202356 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20235e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  202360:	4577      	cmp	r7, lr
  202362:	d202      	bcs.n	20236a <__init_ram_areas+0x4a>
  202364:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  202368:	e7e3      	b.n	202332 <__init_ram_areas+0x12>
  20236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20236c:	08002b2c 	.word	0x08002b2c
  202370:	20020000 	.word	0x20020000
  202374:	20020000 	.word	0x20020000
  202378:	20020000 	.word	0x20020000
  20237c:	08002bb4 	.word	0x08002bb4

00202380 <__default_exit>:
void __default_exit(void) {
  202380:	e7fe      	b.n	202380 <__default_exit>
  202382:	bf00      	nop
	...

00202390 <__late_init>:
void __late_init(void) {}
  202390:	4770      	bx	lr
  202392:	bf00      	nop
	...

002023a0 <__core_init>:
void __core_init(void) {
  2023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2023a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2023a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2023aa:	4c1b      	ldr	r4, [pc, #108]	; (202418 <__core_init+0x78>)
  2023ac:	2200      	movs	r2, #0
  2023ae:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2023b2:	6963      	ldr	r3, [r4, #20]
  2023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2023b8:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2023ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2023be:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2023c2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2023c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2023ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2023ce:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2023d2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2023d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2023da:	07b7      	lsls	r7, r6, #30
  2023dc:	015d      	lsls	r5, r3, #5
  2023de:	ea05 000e 	and.w	r0, r5, lr
  2023e2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2023e4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2023e6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2023ea:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2023ec:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2023f0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2023f4:	1c53      	adds	r3, r2, #1
  2023f6:	d1f6      	bne.n	2023e6 <__core_init+0x46>
  2023f8:	3d20      	subs	r5, #32
    } while(sets--);
  2023fa:	f115 0f20 	cmn.w	r5, #32
  2023fe:	d1ee      	bne.n	2023de <__core_init+0x3e>
  202400:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  202404:	6963      	ldr	r3, [r4, #20]
  202406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20240a:	6163      	str	r3, [r4, #20]
  20240c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  202410:	f3bf 8f6f 	isb	sy
  202414:	bdf0      	pop	{r4, r5, r6, r7, pc}
  202416:	bf00      	nop
  202418:	e000ed00 	.word	0xe000ed00
  20241c:	00000000 	.word	0x00000000

00202420 <chSchWakeupS.constprop.37>:
  thread_t *otp = currp;
  202420:	4b15      	ldr	r3, [pc, #84]	; (202478 <chSchWakeupS.constprop.37+0x58>)
  if (ntp->prio <= otp->prio) {
  202422:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  202424:	b4f0      	push	{r4, r5, r6, r7}
  ntp->u.rdymsg = msg;
  202426:	2600      	movs	r6, #0
  thread_t *otp = currp;
  202428:	699d      	ldr	r5, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  20242a:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
  20242c:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  20242e:	68a8      	ldr	r0, [r5, #8]
  202430:	4281      	cmp	r1, r0
  202432:	d80c      	bhi.n	20244e <chSchWakeupS.constprop.37+0x2e>
  tp->state = CH_STATE_READY;
  202434:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
  202438:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  20243a:	689a      	ldr	r2, [r3, #8]
  20243c:	4291      	cmp	r1, r2
  20243e:	d9fb      	bls.n	202438 <chSchWakeupS.constprop.37+0x18>
  tp->queue.prev             = cp->queue.prev;
  202440:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  202442:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  202444:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  202446:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  202448:	605c      	str	r4, [r3, #4]
}
  20244a:	bcf0      	pop	{r4, r5, r6, r7}
  20244c:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
  20244e:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  202450:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
  202454:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  202456:	6891      	ldr	r1, [r2, #8]
  202458:	4288      	cmp	r0, r1
  20245a:	d9fb      	bls.n	202454 <chSchWakeupS.constprop.37+0x34>
  tp->queue.prev             = cp->queue.prev;
  20245c:	6856      	ldr	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  20245e:	2701      	movs	r7, #1
  tp->queue.next             = cp;
  202460:	602a      	str	r2, [r5, #0]
    chSysSwitch(ntp, otp);
  202462:	4629      	mov	r1, r5
  tp->queue.prev             = cp->queue.prev;
  202464:	606e      	str	r6, [r5, #4]
    chSysSwitch(ntp, otp);
  202466:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
  202468:	6035      	str	r5, [r6, #0]
  cp->queue.prev             = tp;
  20246a:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  20246c:	f884 7020 	strb.w	r7, [r4, #32]
    currp = ntp;
  202470:	619c      	str	r4, [r3, #24]
}
  202472:	bcf0      	pop	{r4, r5, r6, r7}
    chSysSwitch(ntp, otp);
  202474:	f7fd bf2e 	b.w	2002d4 <_port_switch>
  202478:	20000e9c 	.word	0x20000e9c
  20247c:	00000000 	.word	0x00000000

00202480 <chTMStartMeasurementX.constprop.33>:
  202480:	4b01      	ldr	r3, [pc, #4]	; (202488 <chTMStartMeasurementX.constprop.33+0x8>)
  202482:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  202484:	6083      	str	r3, [r0, #8]
  202486:	4770      	bx	lr
  202488:	e0001000 	.word	0xe0001000
  20248c:	00000000 	.word	0x00000000

00202490 <chThdDequeueNextI.constprop.29>:
  return (bool)(tqp->next != (const thread_t *)tqp);
  202490:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  202492:	4290      	cmp	r0, r2
  202494:	d00a      	beq.n	2024ac <chThdDequeueNextI.constprop.29+0x1c>
  202496:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
  202498:	6811      	ldr	r1, [r2, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
  20249a:	4610      	mov	r0, r2
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  20249c:	b410      	push	{r4}
  tp->u.rdymsg = msg;
  20249e:	2400      	movs	r4, #0
  2024a0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2024a2:	604b      	str	r3, [r1, #4]
  2024a4:	6254      	str	r4, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
  2024a6:	bc10      	pop	{r4}
  (void) chSchReadyI(tp);
  2024a8:	f7ff bef2 	b.w	202290 <chSchReadyI>
  2024ac:	4770      	bx	lr
  2024ae:	bf00      	nop

002024b0 <chEvtBroadcastFlagsI.constprop.28>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2024b2:	4f17      	ldr	r7, [pc, #92]	; (202510 <chEvtBroadcastFlagsI.constprop.28+0x60>)
  2024b4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2024b8:	42bc      	cmp	r4, r7
  2024ba:	d021      	beq.n	202500 <chEvtBroadcastFlagsI.constprop.28+0x50>
  2024bc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2024be:	2600      	movs	r6, #0
  2024c0:	e002      	b.n	2024c8 <chEvtBroadcastFlagsI.constprop.28+0x18>
    elp = elp->next;
  2024c2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2024c4:	42bc      	cmp	r4, r7
  2024c6:	d01b      	beq.n	202500 <chEvtBroadcastFlagsI.constprop.28+0x50>
    elp->flags |= flags;
  2024c8:	68e3      	ldr	r3, [r4, #12]
  2024ca:	432b      	orrs	r3, r5
  2024cc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2024ce:	b115      	cbz	r5, 2024d6 <chEvtBroadcastFlagsI.constprop.28+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2024d0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2024d2:	4213      	tst	r3, r2
  2024d4:	d0f5      	beq.n	2024c2 <chEvtBroadcastFlagsI.constprop.28+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2024d6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2024d8:	68a3      	ldr	r3, [r4, #8]
  2024da:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2024dc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2024e0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2024e2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2024e4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2024e6:	d00c      	beq.n	202502 <chEvtBroadcastFlagsI.constprop.28+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2024e8:	2a0b      	cmp	r2, #11
  2024ea:	d1ea      	bne.n	2024c2 <chEvtBroadcastFlagsI.constprop.28+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2024ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2024ee:	ea32 0303 	bics.w	r3, r2, r3
  2024f2:	d1e6      	bne.n	2024c2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->u.rdymsg = MSG_OK;
  2024f4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2024f6:	f7ff fecb 	bl	202290 <chSchReadyI>
    elp = elp->next;
  2024fa:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2024fc:	42bc      	cmp	r4, r7
  2024fe:	d1e3      	bne.n	2024c8 <chEvtBroadcastFlagsI.constprop.28+0x18>
  202500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  202502:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  202504:	4213      	tst	r3, r2
  202506:	d0dc      	beq.n	2024c2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->u.rdymsg = MSG_OK;
  202508:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20250a:	f7ff fec1 	bl	202290 <chSchReadyI>
  20250e:	e7f4      	b.n	2024fa <chEvtBroadcastFlagsI.constprop.28+0x4a>
  202510:	20000e3c 	.word	0x20000e3c
	...

00202520 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  202520:	b40e      	push	{r1, r2, r3}
  202522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202526:	b086      	sub	sp, #24
  int n = 0;
  202528:	f04f 0900 	mov.w	r9, #0
  20252c:	f8df a298 	ldr.w	sl, [pc, #664]	; 2027c8 <chprintf.constprop.0+0x2a8>
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  202530:	ab0f      	add	r3, sp, #60	; 0x3c
  202532:	f853 5b04 	ldr.w	r5, [r3], #4
  202536:	461e      	mov	r6, r3
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  202538:	9302      	str	r3, [sp, #8]
    c = *fmt++;
  20253a:	7829      	ldrb	r1, [r5, #0]
  20253c:	1c6a      	adds	r2, r5, #1
    if (c == 0)
  20253e:	b169      	cbz	r1, 20255c <chprintf.constprop.0+0x3c>
    if (c != '%') {
  202540:	2925      	cmp	r1, #37	; 0x25
  202542:	d011      	beq.n	202568 <chprintf.constprop.0+0x48>
      streamPut(chp, (uint8_t)c);
  202544:	f8da 3000 	ldr.w	r3, [sl]
    c = *fmt++;
  202548:	4615      	mov	r5, r2
      streamPut(chp, (uint8_t)c);
  20254a:	489f      	ldr	r0, [pc, #636]	; (2027c8 <chprintf.constprop.0+0x2a8>)
      n++;
  20254c:	f109 0901 	add.w	r9, r9, #1
      streamPut(chp, (uint8_t)c);
  202550:	689b      	ldr	r3, [r3, #8]
  202552:	4798      	blx	r3
    c = *fmt++;
  202554:	7829      	ldrb	r1, [r5, #0]
  202556:	1c6a      	adds	r2, r5, #1
    if (c == 0)
  202558:	2900      	cmp	r1, #0
  20255a:	d1f1      	bne.n	202540 <chprintf.constprop.0+0x20>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  20255c:	4648      	mov	r0, r9
  20255e:	b006      	add	sp, #24
  202560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202564:	b003      	add	sp, #12
  202566:	4770      	bx	lr
    if (*fmt == '-') {
  202568:	7869      	ldrb	r1, [r5, #1]
  20256a:	292d      	cmp	r1, #45	; 0x2d
  20256c:	f000 818a 	beq.w	202884 <chprintf.constprop.0+0x364>
    left_align = FALSE;
  202570:	2300      	movs	r3, #0
  202572:	9301      	str	r3, [sp, #4]
    if (*fmt == '0') {
  202574:	2930      	cmp	r1, #48	; 0x30
  202576:	f000 8180 	beq.w	20287a <chprintf.constprop.0+0x35a>
    filler = ' ';
  20257a:	f04f 0820 	mov.w	r8, #32
  20257e:	3201      	adds	r2, #1
    width = 0;
  202580:	2400      	movs	r4, #0
  202582:	e005      	b.n	202590 <chprintf.constprop.0+0x70>
        c = va_arg(ap, int);
  202584:	7833      	ldrb	r3, [r6, #0]
  202586:	3604      	adds	r6, #4
  202588:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  20258c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  202590:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  202594:	4615      	mov	r5, r2
      width = width * 10 + c;
  202596:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  20259a:	b2db      	uxtb	r3, r3
  20259c:	2b09      	cmp	r3, #9
  20259e:	d9f3      	bls.n	202588 <chprintf.constprop.0+0x68>
      else if (c == '*')
  2025a0:	292a      	cmp	r1, #42	; 0x2a
  2025a2:	d0ef      	beq.n	202584 <chprintf.constprop.0+0x64>
    if (c == '.') {
  2025a4:	292e      	cmp	r1, #46	; 0x2e
  2025a6:	f04f 0200 	mov.w	r2, #0
  2025aa:	d047      	beq.n	20263c <chprintf.constprop.0+0x11c>
    if (c == 'l' || c == 'L') {
  2025ac:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2025b0:	2b4c      	cmp	r3, #76	; 0x4c
  2025b2:	d152      	bne.n	20265a <chprintf.constprop.0+0x13a>
      if (*fmt)
  2025b4:	782b      	ldrb	r3, [r5, #0]
  2025b6:	b10b      	cbz	r3, 2025bc <chprintf.constprop.0+0x9c>
        c = *fmt++;
  2025b8:	3501      	adds	r5, #1
  2025ba:	4619      	mov	r1, r3
    switch (c) {
  2025bc:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  2025c0:	2b34      	cmp	r3, #52	; 0x34
  2025c2:	f200 814d 	bhi.w	202860 <chprintf.constprop.0+0x340>
  2025c6:	e8df f013 	tbh	[pc, r3, lsl #1]
  2025ca:	0122      	.short	0x0122
  2025cc:	014b014b 	.word	0x014b014b
  2025d0:	014b014b 	.word	0x014b014b
  2025d4:	014b0122 	.word	0x014b0122
  2025d8:	014b014b 	.word	0x014b014b
  2025dc:	014b014b 	.word	0x014b014b
  2025e0:	014b00ed 	.word	0x014b00ed
  2025e4:	014b014b 	.word	0x014b014b
  2025e8:	014b014b 	.word	0x014b014b
  2025ec:	014b0084 	.word	0x014b0084
  2025f0:	011f014b 	.word	0x011f014b
  2025f4:	014b014b 	.word	0x014b014b
  2025f8:	014b014b 	.word	0x014b014b
  2025fc:	014b014b 	.word	0x014b014b
  202600:	014b014b 	.word	0x014b014b
  202604:	014b014b 	.word	0x014b014b
  202608:	01220114 	.word	0x01220114
  20260c:	014b014b 	.word	0x014b014b
  202610:	014b014b 	.word	0x014b014b
  202614:	014b0122 	.word	0x014b0122
  202618:	014b014b 	.word	0x014b014b
  20261c:	014b014b 	.word	0x014b014b
  202620:	014b00ed 	.word	0x014b00ed
  202624:	014b014b 	.word	0x014b014b
  202628:	014b00f0 	.word	0x014b00f0
  20262c:	014b0084 	.word	0x014b0084
  202630:	011f014b 	.word	0x011f014b
          c = va_arg(ap, int);
  202634:	7833      	ldrb	r3, [r6, #0]
  202636:	3604      	adds	r6, #4
        precision += c;
  202638:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20263c:	f815 1b01 	ldrb.w	r1, [r5], #1
        precision *= 10;
  202640:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  202644:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  202648:	b2db      	uxtb	r3, r3
  20264a:	2b09      	cmp	r3, #9
  20264c:	d9f4      	bls.n	202638 <chprintf.constprop.0+0x118>
        else if (c == '*')
  20264e:	292a      	cmp	r1, #42	; 0x2a
  202650:	d0f0      	beq.n	202634 <chprintf.constprop.0+0x114>
    if (c == 'l' || c == 'L') {
  202652:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  202656:	2b4c      	cmp	r3, #76	; 0x4c
  202658:	d0ac      	beq.n	2025b4 <chprintf.constprop.0+0x94>
    switch (c) {
  20265a:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
  20265e:	2834      	cmp	r0, #52	; 0x34
  202660:	f200 80fe 	bhi.w	202860 <chprintf.constprop.0+0x340>
  202664:	e8df f010 	tbh	[pc, r0, lsl #1]
  202668:	00fc00d3 	.word	0x00fc00d3
  20266c:	00fc00fc 	.word	0x00fc00fc
  202670:	00d300fc 	.word	0x00d300fc
  202674:	00fc00fc 	.word	0x00fc00fc
  202678:	00fc00fc 	.word	0x00fc00fc
  20267c:	009e00fc 	.word	0x009e00fc
  202680:	00fc00fc 	.word	0x00fc00fc
  202684:	00fc00fc 	.word	0x00fc00fc
  202688:	003500fc 	.word	0x003500fc
  20268c:	00fc00fc 	.word	0x00fc00fc
  202690:	00fc00d0 	.word	0x00fc00d0
  202694:	00fc00fc 	.word	0x00fc00fc
  202698:	00fc00fc 	.word	0x00fc00fc
  20269c:	00fc00fc 	.word	0x00fc00fc
  2026a0:	00fc00fc 	.word	0x00fc00fc
  2026a4:	00c500fc 	.word	0x00c500fc
  2026a8:	00fc00d3 	.word	0x00fc00d3
  2026ac:	00fc00fc 	.word	0x00fc00fc
  2026b0:	00d300fc 	.word	0x00d300fc
  2026b4:	00fc00fc 	.word	0x00fc00fc
  2026b8:	00fc00fc 	.word	0x00fc00fc
  2026bc:	009e00fc 	.word	0x009e00fc
  2026c0:	00fc00fc 	.word	0x00fc00fc
  2026c4:	00a100fc 	.word	0x00a100fc
  2026c8:	003500fc 	.word	0x003500fc
  2026cc:	00fc00fc 	.word	0x00fc00fc
  2026d0:	00d0      	.short	0x00d0
  2026d2:	f04f 0e0a 	mov.w	lr, #10
        l = va_arg(ap, unsigned int);
  2026d6:	6837      	ldr	r7, [r6, #0]
  q = p + MAX_FILLER;
  2026d8:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
  2026dc:	3604      	adds	r6, #4
  2026de:	e000      	b.n	2026e2 <chprintf.constprop.0+0x1c2>
  } while ((ll /= radix) != 0);
  2026e0:	4601      	mov	r1, r0
    *--q = i;
  2026e2:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  2026e4:	fbb7 f2fe 	udiv	r2, r7, lr
  2026e8:	fb0e 7c12 	mls	ip, lr, r2, r7
    l /= radix;
  2026ec:	4617      	mov	r7, r2
    i += '0';
  2026ee:	f10c 0330 	add.w	r3, ip, #48	; 0x30
    if (i > '9')
  2026f2:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  2026f4:	bfc8      	it	gt
  2026f6:	f10c 0337 	addgt.w	r3, ip, #55	; 0x37
    *--q = i;
  2026fa:	b2db      	uxtb	r3, r3
  2026fc:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  202700:	2a00      	cmp	r2, #0
  202702:	d1ed      	bne.n	2026e0 <chprintf.constprop.0+0x1c0>
  i = (int)(p + MAX_FILLER - q);
  202704:	f10d 0217 	add.w	r2, sp, #23
  202708:	af03      	add	r7, sp, #12
  20270a:	1a12      	subs	r2, r2, r0
  20270c:	46be      	mov	lr, r7
  20270e:	4410      	add	r0, r2
  202710:	e001      	b.n	202716 <chprintf.constprop.0+0x1f6>
  202712:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  202716:	4288      	cmp	r0, r1
    *p++ = *q++;
  202718:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  20271c:	d1f9      	bne.n	202712 <chprintf.constprop.0+0x1f2>
  20271e:	1e53      	subs	r3, r2, #1
  202720:	9300      	str	r3, [sp, #0]
    if ((width -= i) < 0)
  202722:	1aa4      	subs	r4, r4, r2
  202724:	d45f      	bmi.n	2027e6 <chprintf.constprop.0+0x2c6>
    if (left_align == FALSE)
  202726:	9b01      	ldr	r3, [sp, #4]
  202728:	2b00      	cmp	r3, #0
  20272a:	f040 80a1 	bne.w	202870 <chprintf.constprop.0+0x350>
  20272e:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  202732:	2c00      	cmp	r4, #0
  202734:	f000 809b 	beq.w	20286e <chprintf.constprop.0+0x34e>
      if (*s == '-' && filler == '0') {
  202738:	783b      	ldrb	r3, [r7, #0]
  20273a:	2b2d      	cmp	r3, #45	; 0x2d
  20273c:	d103      	bne.n	202746 <chprintf.constprop.0+0x226>
  20273e:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  202742:	f000 80b4 	beq.w	2028ae <chprintf.constprop.0+0x38e>
        streamPut(chp, (uint8_t)filler);
  202746:	f8da 3000 	ldr.w	r3, [sl]
  20274a:	4641      	mov	r1, r8
  20274c:	4650      	mov	r0, sl
  20274e:	689b      	ldr	r3, [r3, #8]
  202750:	4798      	blx	r3
      } while (++width != 0);
  202752:	f11b 0b01 	adds.w	fp, fp, #1
  202756:	d1f6      	bne.n	202746 <chprintf.constprop.0+0x226>
    while (--i >= 0) {
  202758:	9b00      	ldr	r3, [sp, #0]
  20275a:	44a1      	add	r9, r4
  20275c:	2b00      	cmp	r3, #0
  20275e:	f6ff aeec 	blt.w	20253a <chprintf.constprop.0+0x1a>
  202762:	465c      	mov	r4, fp
  202764:	f8dd b000 	ldr.w	fp, [sp]
      streamPut(chp, (uint8_t)*s++);
  202768:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  20276c:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  202770:	f817 1b01 	ldrb.w	r1, [r7], #1
  202774:	4650      	mov	r0, sl
  202776:	689b      	ldr	r3, [r3, #8]
  202778:	4798      	blx	r3
    while (--i >= 0) {
  20277a:	f1bb 3fff 	cmp.w	fp, #4294967295
  20277e:	d1f3      	bne.n	202768 <chprintf.constprop.0+0x248>
  202780:	f109 0901 	add.w	r9, r9, #1
  202784:	9b00      	ldr	r3, [sp, #0]
  202786:	4499      	add	r9, r3
    while (width) {
  202788:	2c00      	cmp	r4, #0
  20278a:	f43f aed6 	beq.w	20253a <chprintf.constprop.0+0x1a>
  20278e:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  202790:	f8da 3000 	ldr.w	r3, [sl]
  202794:	4641      	mov	r1, r8
  202796:	4650      	mov	r0, sl
  202798:	689b      	ldr	r3, [r3, #8]
  20279a:	4798      	blx	r3
    while (width) {
  20279c:	3f01      	subs	r7, #1
  20279e:	d1f7      	bne.n	202790 <chprintf.constprop.0+0x270>
  2027a0:	44a1      	add	r9, r4
  2027a2:	e6ca      	b.n	20253a <chprintf.constprop.0+0x1a>
    switch (c) {
  2027a4:	f04f 0e08 	mov.w	lr, #8
  2027a8:	e795      	b.n	2026d6 <chprintf.constprop.0+0x1b6>
      if ((s = va_arg(ap, char *)) == 0)
  2027aa:	6837      	ldr	r7, [r6, #0]
  2027ac:	3604      	adds	r6, #4
  2027ae:	2f00      	cmp	r7, #0
  2027b0:	d078      	beq.n	2028a4 <chprintf.constprop.0+0x384>
      for (p = s; *p && (--precision >= 0); p++)
  2027b2:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  2027b4:	2a00      	cmp	r2, #0
  2027b6:	d16a      	bne.n	20288e <chprintf.constprop.0+0x36e>
      for (p = s; *p && (--precision >= 0); p++)
  2027b8:	2b00      	cmp	r3, #0
  2027ba:	f000 8085 	beq.w	2028c8 <chprintf.constprop.0+0x3a8>
  2027be:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  2027c2:	463a      	mov	r2, r7
  2027c4:	e004      	b.n	2027d0 <chprintf.constprop.0+0x2b0>
  2027c6:	bf00      	nop
  2027c8:	20000e3c 	.word	0x20000e3c
  2027cc:	3b01      	subs	r3, #1
  2027ce:	d403      	bmi.n	2027d8 <chprintf.constprop.0+0x2b8>
  2027d0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  2027d4:	2900      	cmp	r1, #0
  2027d6:	d1f9      	bne.n	2027cc <chprintf.constprop.0+0x2ac>
  2027d8:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  2027da:	f04f 0820 	mov.w	r8, #32
  2027de:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0)
  2027e0:	1aa4      	subs	r4, r4, r2
  2027e2:	9300      	str	r3, [sp, #0]
  2027e4:	d59f      	bpl.n	202726 <chprintf.constprop.0+0x206>
    while (--i >= 0) {
  2027e6:	9b00      	ldr	r3, [sp, #0]
  2027e8:	2b00      	cmp	r3, #0
  2027ea:	f6ff aea6 	blt.w	20253a <chprintf.constprop.0+0x1a>
      width = 0;
  2027ee:	2400      	movs	r4, #0
  2027f0:	e7b8      	b.n	202764 <chprintf.constprop.0+0x244>
      *p++ = va_arg(ap, int);
  2027f2:	6833      	ldr	r3, [r6, #0]
  2027f4:	2200      	movs	r2, #0
  2027f6:	af06      	add	r7, sp, #24
  2027f8:	3604      	adds	r6, #4
  2027fa:	9200      	str	r2, [sp, #0]
      filler = ' ';
  2027fc:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  202800:	f807 3d0c 	strb.w	r3, [r7, #-12]!
  202804:	2201      	movs	r2, #1
  202806:	e78c      	b.n	202722 <chprintf.constprop.0+0x202>
    switch (c) {
  202808:	f04f 0e10 	mov.w	lr, #16
  20280c:	e763      	b.n	2026d6 <chprintf.constprop.0+0x1b6>
        l = va_arg(ap, int);
  20280e:	6831      	ldr	r1, [r6, #0]
  202810:	3604      	adds	r6, #4
      if (l < 0) {
  202812:	2900      	cmp	r1, #0
  202814:	db3e      	blt.n	202894 <chprintf.constprop.0+0x374>
    p = tmpbuf;
  202816:	af03      	add	r7, sp, #12
  202818:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  20281a:	f102 030b 	add.w	r3, r2, #11
    i = (int)(l % radix);
  20281e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 2028dc <chprintf.constprop.0+0x3bc>
  q = p + MAX_FILLER;
  202822:	4618      	mov	r0, r3
  202824:	9300      	str	r3, [sp, #0]
    i = (int)(l % radix);
  202826:	fbab e301 	umull	lr, r3, fp, r1
  20282a:	08db      	lsrs	r3, r3, #3
  20282c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
  202830:	469e      	mov	lr, r3
  202832:	eba1 034c 	sub.w	r3, r1, ip, lsl #1
  } while ((ll /= radix) != 0);
  202836:	4671      	mov	r1, lr
    i += '0';
  202838:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  20283a:	b2db      	uxtb	r3, r3
  20283c:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  202840:	2900      	cmp	r1, #0
  202842:	d1f0      	bne.n	202826 <chprintf.constprop.0+0x306>
  i = (int)(p + MAX_FILLER - q);
  202844:	9900      	ldr	r1, [sp, #0]
  202846:	1a09      	subs	r1, r1, r0
  202848:	4411      	add	r1, r2
  20284a:	e001      	b.n	202850 <chprintf.constprop.0+0x330>
  20284c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  202850:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  202854:	428a      	cmp	r2, r1
  202856:	d1f9      	bne.n	20284c <chprintf.constprop.0+0x32c>
  202858:	1bd2      	subs	r2, r2, r7
  20285a:	1e53      	subs	r3, r2, #1
  20285c:	9300      	str	r3, [sp, #0]
  20285e:	e760      	b.n	202722 <chprintf.constprop.0+0x202>
      *p++ = c;
  202860:	af06      	add	r7, sp, #24
  202862:	2300      	movs	r3, #0
  202864:	2201      	movs	r2, #1
  202866:	9300      	str	r3, [sp, #0]
  202868:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  20286c:	e759      	b.n	202722 <chprintf.constprop.0+0x202>
    if (width < 0) {
  20286e:	465c      	mov	r4, fp
    while (--i >= 0) {
  202870:	9b00      	ldr	r3, [sp, #0]
  202872:	2b00      	cmp	r3, #0
  202874:	f6bf af76 	bge.w	202764 <chprintf.constprop.0+0x244>
  202878:	e786      	b.n	202788 <chprintf.constprop.0+0x268>
  20287a:	7851      	ldrb	r1, [r2, #1]
      filler = '0';
  20287c:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  202880:	3201      	adds	r2, #1
  202882:	e67c      	b.n	20257e <chprintf.constprop.0+0x5e>
      left_align = TRUE;
  202884:	2301      	movs	r3, #1
      fmt++;
  202886:	1caa      	adds	r2, r5, #2
  202888:	78a9      	ldrb	r1, [r5, #2]
      left_align = TRUE;
  20288a:	9301      	str	r3, [sp, #4]
  20288c:	e672      	b.n	202574 <chprintf.constprop.0+0x54>
      for (p = s; *p && (--precision >= 0); p++)
  20288e:	b1db      	cbz	r3, 2028c8 <chprintf.constprop.0+0x3a8>
  202890:	1e53      	subs	r3, r2, #1
  202892:	e796      	b.n	2027c2 <chprintf.constprop.0+0x2a2>
        *p++ = '-';
  202894:	232d      	movs	r3, #45	; 0x2d
        l = -l;
  202896:	4249      	negs	r1, r1
        *p++ = '-';
  202898:	f10d 020d 	add.w	r2, sp, #13
  20289c:	af03      	add	r7, sp, #12
  20289e:	f88d 300c 	strb.w	r3, [sp, #12]
  2028a2:	e7ba      	b.n	20281a <chprintf.constprop.0+0x2fa>
      if (precision == 0)
  2028a4:	b90a      	cbnz	r2, 2028aa <chprintf.constprop.0+0x38a>
        precision = 32767;
  2028a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  2028aa:	4f0a      	ldr	r7, [pc, #40]	; (2028d4 <chprintf.constprop.0+0x3b4>)
  2028ac:	e7f0      	b.n	202890 <chprintf.constprop.0+0x370>
  2028ae:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  2028b0:	212d      	movs	r1, #45	; 0x2d
  2028b2:	f8da 3000 	ldr.w	r3, [sl]
  2028b6:	3701      	adds	r7, #1
  2028b8:	3a01      	subs	r2, #1
  2028ba:	4807      	ldr	r0, [pc, #28]	; (2028d8 <chprintf.constprop.0+0x3b8>)
  2028bc:	689b      	ldr	r3, [r3, #8]
        n++;
  2028be:	f109 0901 	add.w	r9, r9, #1
  2028c2:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  2028c4:	4798      	blx	r3
  2028c6:	e73e      	b.n	202746 <chprintf.constprop.0+0x226>
      for (p = s; *p && (--precision >= 0); p++)
  2028c8:	f04f 33ff 	mov.w	r3, #4294967295
  2028cc:	f04f 0820 	mov.w	r8, #32
  2028d0:	9300      	str	r3, [sp, #0]
  2028d2:	e728      	b.n	202726 <chprintf.constprop.0+0x206>
  2028d4:	08002bac 	.word	0x08002bac
  2028d8:	20000e3c 	.word	0x20000e3c
  2028dc:	cccccccd 	.word	0xcccccccd
