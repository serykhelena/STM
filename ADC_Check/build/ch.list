
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fa2f 	bl	201680 <__core_init>
  200222:	f000 fdc5 	bl	200db0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 f9c9 	bl	201600 <__init_ram_areas>
  20026e:	f001 f9ff 	bl	201670 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fa5d 	bl	201740 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 b9e3 	b.w	201660 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08002764 	.word	0x08002764
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000be8 	.word	0x20000be8
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 f95e 	bl	2015b0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 fe74 	bl	200fe0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <notify7.lto_priv.45>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200300:	4a02      	ldr	r2, [pc, #8]	; (20030c <notify7.lto_priv.45+0xc>)
  200302:	6813      	ldr	r3, [r2, #0]
  200304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200308:	6013      	str	r3, [r2, #0]
  20030a:	4770      	bx	lr
  20030c:	40007800 	.word	0x40007800

00200310 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  200310:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
  200312:	68c3      	ldr	r3, [r0, #12]
void icu_lld_serve_interrupt(ICUDriver *icup) {
  200314:	4605      	mov	r5, r0
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
  200316:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
  200318:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  20031a:	68da      	ldr	r2, [r3, #12]
  20031c:	4014      	ands	r4, r2
  20031e:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
  200320:	43d2      	mvns	r2, r2
  200322:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  200324:	7d0b      	ldrb	r3, [r1, #20]
  200326:	b94b      	cbnz	r3, 20033c <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200328:	0763      	lsls	r3, r4, #29
  20032a:	d52b      	bpl.n	200384 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
  20032c:	7803      	ldrb	r3, [r0, #0]
  20032e:	2b04      	cmp	r3, #4
  200330:	d025      	beq.n	20037e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200332:	07a1      	lsls	r1, r4, #30
  200334:	d409      	bmi.n	20034a <icu_lld_serve_interrupt+0x3a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  200336:	07e4      	lsls	r4, r4, #31
  200338:	d40b      	bmi.n	200352 <icu_lld_serve_interrupt+0x42>
  20033a:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  20033c:	07a2      	lsls	r2, r4, #30
  20033e:	d512      	bpl.n	200366 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
  200340:	7803      	ldrb	r3, [r0, #0]
  200342:	2b04      	cmp	r3, #4
  200344:	d00c      	beq.n	200360 <icu_lld_serve_interrupt+0x50>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200346:	0763      	lsls	r3, r4, #29
  200348:	d5f5      	bpl.n	200336 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  20034a:	2304      	movs	r3, #4
  if ((sr & STM32_TIM_SR_UIF) != 0)
  20034c:	07e4      	lsls	r4, r4, #31
      _icu_isr_invoke_period_cb(icup);
  20034e:	702b      	strb	r3, [r5, #0]
  if ((sr & STM32_TIM_SR_UIF) != 0)
  200350:	d5f3      	bpl.n	20033a <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
  200352:	686b      	ldr	r3, [r5, #4]
  200354:	4628      	mov	r0, r5
  200356:	691b      	ldr	r3, [r3, #16]
  200358:	4798      	blx	r3
  20035a:	2303      	movs	r3, #3
  20035c:	702b      	strb	r3, [r5, #0]
  20035e:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
  200360:	688b      	ldr	r3, [r1, #8]
  200362:	b1c3      	cbz	r3, 200396 <icu_lld_serve_interrupt+0x86>
  200364:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200366:	0763      	lsls	r3, r4, #29
  200368:	d5e5      	bpl.n	200336 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  20036a:	782b      	ldrb	r3, [r5, #0]
  20036c:	2b04      	cmp	r3, #4
  20036e:	d1ec      	bne.n	20034a <icu_lld_serve_interrupt+0x3a>
  200370:	6869      	ldr	r1, [r5, #4]
  200372:	68cb      	ldr	r3, [r1, #12]
  200374:	2b00      	cmp	r3, #0
  200376:	d0e8      	beq.n	20034a <icu_lld_serve_interrupt+0x3a>
  200378:	4628      	mov	r0, r5
  20037a:	4798      	blx	r3
  20037c:	e7e5      	b.n	20034a <icu_lld_serve_interrupt+0x3a>
      _icu_isr_invoke_width_cb(icup);
  20037e:	688b      	ldr	r3, [r1, #8]
  200380:	b133      	cbz	r3, 200390 <icu_lld_serve_interrupt+0x80>
  200382:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200384:	07a1      	lsls	r1, r4, #30
  200386:	d5d6      	bpl.n	200336 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200388:	782b      	ldrb	r3, [r5, #0]
  20038a:	2b04      	cmp	r3, #4
  20038c:	d1dd      	bne.n	20034a <icu_lld_serve_interrupt+0x3a>
  20038e:	e7ef      	b.n	200370 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200390:	07a0      	lsls	r0, r4, #30
  200392:	d4ee      	bmi.n	200372 <icu_lld_serve_interrupt+0x62>
  200394:	e7cf      	b.n	200336 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200396:	0762      	lsls	r2, r4, #29
  200398:	d4eb      	bmi.n	200372 <icu_lld_serve_interrupt+0x62>
  20039a:	e7cc      	b.n	200336 <icu_lld_serve_interrupt+0x26>
  20039c:	0000      	movs	r0, r0
	...

002003a0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2003a0:	2320      	movs	r3, #32
  2003a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2003a6:	4b11      	ldr	r3, [pc, #68]	; (2003ec <_port_irq_epilogue+0x4c>)
  2003a8:	685b      	ldr	r3, [r3, #4]
  2003aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2003ae:	d102      	bne.n	2003b6 <_port_irq_epilogue+0x16>
  2003b0:	f383 8811 	msr	BASEPRI, r3
  2003b4:	4770      	bx	lr
void _port_irq_epilogue(void) {
  2003b6:	b480      	push	{r7}
  2003b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2003ba:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2003be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2003c2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2003c6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2003ca:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2003ce:	4a08      	ldr	r2, [pc, #32]	; (2003f0 <_port_irq_epilogue+0x50>)
  2003d0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2003d2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2003d4:	6889      	ldr	r1, [r1, #8]
  2003d6:	6892      	ldr	r2, [r2, #8]
  2003d8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2003da:	bf8c      	ite	hi
  2003dc:	4a05      	ldrhi	r2, [pc, #20]	; (2003f4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2003de:	4a06      	ldrls	r2, [pc, #24]	; (2003f8 <_port_irq_epilogue+0x58>)
  2003e0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003e4:	46bd      	mov	sp, r7
  2003e6:	bc80      	pop	{r7}
  2003e8:	4770      	bx	lr
  2003ea:	bf00      	nop
  2003ec:	e000ed00 	.word	0xe000ed00
  2003f0:	20000944 	.word	0x20000944
  2003f4:	002002f5 	.word	0x002002f5
  2003f8:	002002f8 	.word	0x002002f8
  2003fc:	00000000 	.word	0x00000000

00200400 <VectorA0>:
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
  200400:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD9);
  200402:	4803      	ldr	r0, [pc, #12]	; (200410 <VectorA0+0x10>)
  200404:	f7ff ff84 	bl	200310 <icu_lld_serve_interrupt>
}
  200408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20040c:	f7ff bfc8 	b.w	2003a0 <_port_irq_epilogue>
  200410:	20000864 	.word	0x20000864
	...

00200420 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
  200420:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD8);
  200422:	4803      	ldr	r0, [pc, #12]	; (200430 <VectorF0+0x10>)
  200424:	f7ff ff74 	bl	200310 <icu_lld_serve_interrupt>
}
  200428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20042c:	f7ff bfb8 	b.w	2003a0 <_port_irq_epilogue>
  200430:	2000084c 	.word	0x2000084c
	...

00200440 <VectorF8>:
  200440:	f7ff bfee 	b.w	200420 <VectorF0>
	...

00200450 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  200450:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200452:	4b0b      	ldr	r3, [pc, #44]	; (200480 <VectorB8+0x30>)
  200454:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200456:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200458:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20045a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20045c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20045e:	d107      	bne.n	200470 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200460:	2002      	movs	r0, #2
  200462:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200464:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200466:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200468:	68d1      	ldr	r1, [r2, #12]
  20046a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20046e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200470:	685b      	ldr	r3, [r3, #4]
  200472:	4803      	ldr	r0, [pc, #12]	; (200480 <VectorB8+0x30>)
  200474:	685b      	ldr	r3, [r3, #4]
  200476:	4798      	blx	r3
}
  200478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20047c:	f7ff bf90 	b.w	2003a0 <_port_irq_epilogue>
  200480:	2000083c 	.word	0x2000083c
	...

00200490 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200492:	2720      	movs	r7, #32
  200494:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200498:	4d12      	ldr	r5, [pc, #72]	; (2004e4 <SysTick_Handler+0x54>)
  20049a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20049c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20049e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2004a0:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  2004a4:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2004a6:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  2004a8:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2004aa:	d013      	beq.n	2004d4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  2004ac:	891c      	ldrh	r4, [r3, #8]
  2004ae:	3c01      	subs	r4, #1
  2004b0:	b2a4      	uxth	r4, r4
  2004b2:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  2004b4:	b974      	cbnz	r4, 2004d4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004b6:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  2004b8:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  2004ba:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2004bc:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  2004be:	61ea      	str	r2, [r5, #28]
  2004c0:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  2004c4:	6918      	ldr	r0, [r3, #16]
  2004c6:	4788      	blx	r1
  2004c8:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  2004cc:	69eb      	ldr	r3, [r5, #28]
  2004ce:	891a      	ldrh	r2, [r3, #8]
  2004d0:	2a00      	cmp	r2, #0
  2004d2:	d0f0      	beq.n	2004b6 <SysTick_Handler+0x26>
  2004d4:	2300      	movs	r3, #0
  2004d6:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  2004da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2004de:	f7ff bf5f 	b.w	2003a0 <_port_irq_epilogue>
  2004e2:	bf00      	nop
  2004e4:	20000944 	.word	0x20000944
	...

002004f0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2004f0:	4b08      	ldr	r3, [pc, #32]	; (200514 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  2004f2:	4809      	ldr	r0, [pc, #36]	; (200518 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2004f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  2004f6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2004f8:	0d89      	lsrs	r1, r1, #22
  2004fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  2004fe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  200500:	058c      	lsls	r4, r1, #22
  200502:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  200504:	b10a      	cbz	r2, 20050a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  200506:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  200508:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  20050a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20050e:	f7ff bf47 	b.w	2003a0 <_port_irq_epilogue>
  200512:	bf00      	nop
  200514:	40026400 	.word	0x40026400
  200518:	20000ab0 	.word	0x20000ab0
  20051c:	00000000 	.word	0x00000000

00200520 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200520:	4b08      	ldr	r3, [pc, #32]	; (200544 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200522:	4809      	ldr	r0, [pc, #36]	; (200548 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200524:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200526:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200528:	0c09      	lsrs	r1, r1, #16
  20052a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20052e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200530:	040c      	lsls	r4, r1, #16
  200532:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200534:	b10a      	cbz	r2, 20053a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200536:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200538:	4790      	blx	r2
}
  20053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20053e:	f7ff bf2f 	b.w	2003a0 <_port_irq_epilogue>
  200542:	bf00      	nop
  200544:	40026400 	.word	0x40026400
  200548:	20000ab0 	.word	0x20000ab0
  20054c:	00000000 	.word	0x00000000

00200550 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200550:	4b08      	ldr	r3, [pc, #32]	; (200574 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  200552:	4809      	ldr	r0, [pc, #36]	; (200578 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200554:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  200556:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200558:	0989      	lsrs	r1, r1, #6
  20055a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20055e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  200560:	018c      	lsls	r4, r1, #6
  200562:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  200564:	b10a      	cbz	r2, 20056a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  200566:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  200568:	4790      	blx	r2
}
  20056a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20056e:	f7ff bf17 	b.w	2003a0 <_port_irq_epilogue>
  200572:	bf00      	nop
  200574:	40026400 	.word	0x40026400
  200578:	20000ab0 	.word	0x20000ab0
  20057c:	00000000 	.word	0x00000000

00200580 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  200580:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200582:	4b07      	ldr	r3, [pc, #28]	; (2005a0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  200584:	4807      	ldr	r0, [pc, #28]	; (2005a4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200586:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  200588:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20058a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20058e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200590:	b10a      	cbz	r2, 200596 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200592:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200594:	4790      	blx	r2
}
  200596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20059a:	f7ff bf01 	b.w	2003a0 <_port_irq_epilogue>
  20059e:	bf00      	nop
  2005a0:	40026400 	.word	0x40026400
  2005a4:	20000ab0 	.word	0x20000ab0
	...

002005b0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2005b0:	4b08      	ldr	r3, [pc, #32]	; (2005d4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  2005b2:	4809      	ldr	r0, [pc, #36]	; (2005d8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2005b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  2005b6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2005b8:	0d89      	lsrs	r1, r1, #22
  2005ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  2005be:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2005c0:	058c      	lsls	r4, r1, #22
  2005c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2005c4:	b10a      	cbz	r2, 2005ca <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2005c6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2005c8:	4790      	blx	r2
}
  2005ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2005ce:	f7ff bee7 	b.w	2003a0 <_port_irq_epilogue>
  2005d2:	bf00      	nop
  2005d4:	40026400 	.word	0x40026400
  2005d8:	20000ab0 	.word	0x20000ab0
  2005dc:	00000000 	.word	0x00000000

002005e0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2005e0:	4b08      	ldr	r3, [pc, #32]	; (200604 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  2005e2:	4809      	ldr	r0, [pc, #36]	; (200608 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2005e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  2005e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2005e8:	0c09      	lsrs	r1, r1, #16
  2005ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2005ee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  2005f0:	040c      	lsls	r4, r1, #16
  2005f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  2005f4:	b10a      	cbz	r2, 2005fa <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  2005f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  2005f8:	4790      	blx	r2
}
  2005fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2005fe:	f7ff becf 	b.w	2003a0 <_port_irq_epilogue>
  200602:	bf00      	nop
  200604:	40026400 	.word	0x40026400
  200608:	20000ab0 	.word	0x20000ab0
  20060c:	00000000 	.word	0x00000000

00200610 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200610:	4b08      	ldr	r3, [pc, #32]	; (200634 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  200612:	4809      	ldr	r0, [pc, #36]	; (200638 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200614:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  200616:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200618:	0989      	lsrs	r1, r1, #6
  20061a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20061e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  200620:	018c      	lsls	r4, r1, #6
  200622:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  200624:	b10a      	cbz	r2, 20062a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  200626:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  200628:	4790      	blx	r2
}
  20062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20062e:	f7ff beb7 	b.w	2003a0 <_port_irq_epilogue>
  200632:	bf00      	nop
  200634:	40026400 	.word	0x40026400
  200638:	20000ab0 	.word	0x20000ab0
  20063c:	00000000 	.word	0x00000000

00200640 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  200640:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200642:	4b07      	ldr	r3, [pc, #28]	; (200660 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  200644:	4807      	ldr	r0, [pc, #28]	; (200664 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200646:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  200648:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20064a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20064e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  200650:	b10a      	cbz	r2, 200656 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  200652:	6c40      	ldr	r0, [r0, #68]	; 0x44
  200654:	4790      	blx	r2
}
  200656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20065a:	f7ff bea1 	b.w	2003a0 <_port_irq_epilogue>
  20065e:	bf00      	nop
  200660:	40026400 	.word	0x40026400
  200664:	20000ab0 	.word	0x20000ab0
	...

00200670 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200670:	4b08      	ldr	r3, [pc, #32]	; (200694 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  200672:	4809      	ldr	r0, [pc, #36]	; (200698 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200674:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  200676:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200678:	0d89      	lsrs	r1, r1, #22
  20067a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20067e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  200680:	058c      	lsls	r4, r1, #22
  200682:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  200684:	b10a      	cbz	r2, 20068a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  200686:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  200688:	4790      	blx	r2
}
  20068a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20068e:	f7ff be87 	b.w	2003a0 <_port_irq_epilogue>
  200692:	bf00      	nop
  200694:	40026000 	.word	0x40026000
  200698:	20000ab0 	.word	0x20000ab0
  20069c:	00000000 	.word	0x00000000

002006a0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2006a0:	4b08      	ldr	r3, [pc, #32]	; (2006c4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2006a2:	4809      	ldr	r0, [pc, #36]	; (2006c8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2006a4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2006a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2006a8:	0c09      	lsrs	r1, r1, #16
  2006aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2006ae:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2006b0:	040c      	lsls	r4, r1, #16
  2006b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2006b4:	b10a      	cbz	r2, 2006ba <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2006b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2006b8:	4790      	blx	r2
}
  2006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006be:	f7ff be6f 	b.w	2003a0 <_port_irq_epilogue>
  2006c2:	bf00      	nop
  2006c4:	40026000 	.word	0x40026000
  2006c8:	20000ab0 	.word	0x20000ab0
  2006cc:	00000000 	.word	0x00000000

002006d0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2006d0:	4b08      	ldr	r3, [pc, #32]	; (2006f4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2006d2:	4809      	ldr	r0, [pc, #36]	; (2006f8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2006d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2006d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2006d8:	0989      	lsrs	r1, r1, #6
  2006da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2006de:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  2006e0:	018c      	lsls	r4, r1, #6
  2006e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  2006e4:	b10a      	cbz	r2, 2006ea <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  2006e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2006e8:	4790      	blx	r2
}
  2006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2006ee:	f7ff be57 	b.w	2003a0 <_port_irq_epilogue>
  2006f2:	bf00      	nop
  2006f4:	40026000 	.word	0x40026000
  2006f8:	20000ab0 	.word	0x20000ab0
  2006fc:	00000000 	.word	0x00000000

00200700 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  200700:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200702:	4b07      	ldr	r3, [pc, #28]	; (200720 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  200704:	4807      	ldr	r0, [pc, #28]	; (200724 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200706:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  200708:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20070a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20070e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  200710:	b10a      	cbz	r2, 200716 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  200712:	6a40      	ldr	r0, [r0, #36]	; 0x24
  200714:	4790      	blx	r2
}
  200716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20071a:	f7ff be41 	b.w	2003a0 <_port_irq_epilogue>
  20071e:	bf00      	nop
  200720:	40026000 	.word	0x40026000
  200724:	20000ab0 	.word	0x20000ab0
	...

00200730 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200730:	4b08      	ldr	r3, [pc, #32]	; (200754 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  200732:	4809      	ldr	r0, [pc, #36]	; (200758 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200734:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  200736:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200738:	0d89      	lsrs	r1, r1, #22
  20073a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20073e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  200740:	058c      	lsls	r4, r1, #22
  200742:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  200744:	b10a      	cbz	r2, 20074a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  200746:	69c0      	ldr	r0, [r0, #28]
  200748:	4790      	blx	r2
}
  20074a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20074e:	f7ff be27 	b.w	2003a0 <_port_irq_epilogue>
  200752:	bf00      	nop
  200754:	40026000 	.word	0x40026000
  200758:	20000ab0 	.word	0x20000ab0
  20075c:	00000000 	.word	0x00000000

00200760 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200760:	4b08      	ldr	r3, [pc, #32]	; (200784 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  200762:	4809      	ldr	r0, [pc, #36]	; (200788 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200764:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  200766:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200768:	0c09      	lsrs	r1, r1, #16
  20076a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20076e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  200770:	040c      	lsls	r4, r1, #16
  200772:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  200774:	b10a      	cbz	r2, 20077a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  200776:	6940      	ldr	r0, [r0, #20]
  200778:	4790      	blx	r2
}
  20077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20077e:	f7ff be0f 	b.w	2003a0 <_port_irq_epilogue>
  200782:	bf00      	nop
  200784:	40026000 	.word	0x40026000
  200788:	20000ab0 	.word	0x20000ab0
  20078c:	00000000 	.word	0x00000000

00200790 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200790:	4b08      	ldr	r3, [pc, #32]	; (2007b4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  200792:	4809      	ldr	r0, [pc, #36]	; (2007b8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200794:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  200796:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200798:	0989      	lsrs	r1, r1, #6
  20079a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20079e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  2007a0:	018c      	lsls	r4, r1, #6
  2007a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  2007a4:	b10a      	cbz	r2, 2007aa <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  2007a6:	68c0      	ldr	r0, [r0, #12]
  2007a8:	4790      	blx	r2
}
  2007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2007ae:	f7ff bdf7 	b.w	2003a0 <_port_irq_epilogue>
  2007b2:	bf00      	nop
  2007b4:	40026000 	.word	0x40026000
  2007b8:	20000ab0 	.word	0x20000ab0
  2007bc:	00000000 	.word	0x00000000

002007c0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2007c0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2007c2:	4b07      	ldr	r3, [pc, #28]	; (2007e0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2007c4:	4a07      	ldr	r2, [pc, #28]	; (2007e4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2007c6:	6819      	ldr	r1, [r3, #0]
  2007c8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2007cc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2007ce:	6813      	ldr	r3, [r2, #0]
  2007d0:	b10b      	cbz	r3, 2007d6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2007d2:	6850      	ldr	r0, [r2, #4]
  2007d4:	4798      	blx	r3
}
  2007d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2007da:	f7ff bde1 	b.w	2003a0 <_port_irq_epilogue>
  2007de:	bf00      	nop
  2007e0:	40026000 	.word	0x40026000
  2007e4:	20000ab0 	.word	0x20000ab0
	...

002007f0 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  2007f0:	4a09      	ldr	r2, [pc, #36]	; (200818 <Vector4C+0x28>)
OSAL_IRQ_HANDLER(Vector4C) {
  2007f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2007f4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
  2007f6:	6811      	ldr	r1, [r2, #0]
  2007f8:	400b      	ands	r3, r1
  2007fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
  2007fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
  200800:	b12b      	cbz	r3, 20080e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  200802:	4806      	ldr	r0, [pc, #24]	; (20081c <Vector4C+0x2c>)
  200804:	2116      	movs	r1, #22
  200806:	6843      	ldr	r3, [r0, #4]
  200808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  20080c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
  20080e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200812:	f7ff bdc5 	b.w	2003a0 <_port_irq_epilogue>
  200816:	bf00      	nop
  200818:	40013c00 	.word	0x40013c00
  20081c:	20000834 	.word	0x20000834

00200820 <Vector48>:
  pr = EXTI->PR;
  200820:	4a09      	ldr	r2, [pc, #36]	; (200848 <Vector48+0x28>)
OSAL_IRQ_HANDLER(Vector48) {
  200822:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200824:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
  200826:	6811      	ldr	r1, [r2, #0]
  200828:	400b      	ands	r3, r1
  20082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
  20082e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
  200830:	b12b      	cbz	r3, 20083e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  200832:	4806      	ldr	r0, [pc, #24]	; (20084c <Vector48+0x2c>)
  200834:	2115      	movs	r1, #21
  200836:	6843      	ldr	r3, [r0, #4]
  200838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
  20083c:	4798      	blx	r3
}
  20083e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200842:	f7ff bdad 	b.w	2003a0 <_port_irq_epilogue>
  200846:	bf00      	nop
  200848:	40013c00 	.word	0x40013c00
  20084c:	20000834 	.word	0x20000834

00200850 <Vector170>:
  pr = EXTI->PR;
  200850:	4a09      	ldr	r2, [pc, #36]	; (200878 <Vector170+0x28>)
OSAL_IRQ_HANDLER(Vector170) {
  200852:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200854:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
  200856:	6811      	ldr	r1, [r2, #0]
  200858:	400b      	ands	r3, r1
  20085a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
  20085e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
  200860:	b12b      	cbz	r3, 20086e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
  200862:	4806      	ldr	r0, [pc, #24]	; (20087c <Vector170+0x2c>)
  200864:	2114      	movs	r1, #20
  200866:	6843      	ldr	r3, [r0, #4]
  200868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  20086c:	4798      	blx	r3
}
  20086e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200872:	f7ff bd95 	b.w	2003a0 <_port_irq_epilogue>
  200876:	bf00      	nop
  200878:	40013c00 	.word	0x40013c00
  20087c:	20000834 	.word	0x20000834

00200880 <Vector138>:
  pr = EXTI->PR;
  200880:	4a09      	ldr	r2, [pc, #36]	; (2008a8 <Vector138+0x28>)
OSAL_IRQ_HANDLER(Vector138) {
  200882:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200884:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
  200886:	6811      	ldr	r1, [r2, #0]
  200888:	400b      	ands	r3, r1
  20088a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
  20088e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
  200890:	b12b      	cbz	r3, 20089e <Vector138+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
  200892:	4806      	ldr	r0, [pc, #24]	; (2008ac <Vector138+0x2c>)
  200894:	2113      	movs	r1, #19
  200896:	6843      	ldr	r3, [r0, #4]
  200898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  20089c:	4798      	blx	r3
}
  20089e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2008a2:	f7ff bd7d 	b.w	2003a0 <_port_irq_epilogue>
  2008a6:	bf00      	nop
  2008a8:	40013c00 	.word	0x40013c00
  2008ac:	20000834 	.word	0x20000834

002008b0 <VectorE8>:
  pr = EXTI->PR;
  2008b0:	4a09      	ldr	r2, [pc, #36]	; (2008d8 <VectorE8+0x28>)
OSAL_IRQ_HANDLER(VectorE8) {
  2008b2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2008b4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
  2008b6:	6811      	ldr	r1, [r2, #0]
  2008b8:	400b      	ands	r3, r1
  2008ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
  2008be:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
  2008c0:	b12b      	cbz	r3, 2008ce <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
  2008c2:	4806      	ldr	r0, [pc, #24]	; (2008dc <VectorE8+0x2c>)
  2008c4:	2112      	movs	r1, #18
  2008c6:	6843      	ldr	r3, [r0, #4]
  2008c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  2008cc:	4798      	blx	r3
}
  2008ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2008d2:	f7ff bd65 	b.w	2003a0 <_port_irq_epilogue>
  2008d6:	bf00      	nop
  2008d8:	40013c00 	.word	0x40013c00
  2008dc:	20000834 	.word	0x20000834

002008e0 <VectorE4>:
  pr = EXTI->PR;
  2008e0:	4a09      	ldr	r2, [pc, #36]	; (200908 <VectorE4+0x28>)
OSAL_IRQ_HANDLER(VectorE4) {
  2008e2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2008e4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
  2008e6:	6811      	ldr	r1, [r2, #0]
  2008e8:	400b      	ands	r3, r1
  2008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
  2008ee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
  2008f0:	b12b      	cbz	r3, 2008fe <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
  2008f2:	4806      	ldr	r0, [pc, #24]	; (20090c <VectorE4+0x2c>)
  2008f4:	2111      	movs	r1, #17
  2008f6:	6843      	ldr	r3, [r0, #4]
  2008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  2008fc:	4798      	blx	r3
}
  2008fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200902:	f7ff bd4d 	b.w	2003a0 <_port_irq_epilogue>
  200906:	bf00      	nop
  200908:	40013c00 	.word	0x40013c00
  20090c:	20000834 	.word	0x20000834

00200910 <Vector44>:
  pr = EXTI->PR;
  200910:	4a09      	ldr	r2, [pc, #36]	; (200938 <Vector44+0x28>)
OSAL_IRQ_HANDLER(Vector44) {
  200912:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200914:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
  200916:	6811      	ldr	r1, [r2, #0]
  200918:	400b      	ands	r3, r1
  20091a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
  20091e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
  200920:	b12b      	cbz	r3, 20092e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
  200922:	4806      	ldr	r0, [pc, #24]	; (20093c <Vector44+0x2c>)
  200924:	2110      	movs	r1, #16
  200926:	6843      	ldr	r3, [r0, #4]
  200928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  20092c:	4798      	blx	r3
}
  20092e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200932:	f7ff bd35 	b.w	2003a0 <_port_irq_epilogue>
  200936:	bf00      	nop
  200938:	40013c00 	.word	0x40013c00
  20093c:	20000834 	.word	0x20000834

00200940 <VectorE0>:
  pr = EXTI->PR;
  200940:	4b1d      	ldr	r3, [pc, #116]	; (2009b8 <VectorE0+0x78>)
OSAL_IRQ_HANDLER(VectorE0) {
  200942:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  200944:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  200946:	681a      	ldr	r2, [r3, #0]
  200948:	4014      	ands	r4, r2
  20094a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
  EXTI->PR = pr;
  20094e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
  200950:	0562      	lsls	r2, r4, #21
  200952:	d42a      	bmi.n	2009aa <VectorE0+0x6a>
  if (pr & (1U << 11))
  200954:	0523      	lsls	r3, r4, #20
  200956:	d422      	bmi.n	20099e <VectorE0+0x5e>
  if (pr & (1U << 12))
  200958:	04e0      	lsls	r0, r4, #19
  20095a:	d41a      	bmi.n	200992 <VectorE0+0x52>
  if (pr & (1U << 13))
  20095c:	04a1      	lsls	r1, r4, #18
  20095e:	d412      	bmi.n	200986 <VectorE0+0x46>
  if (pr & (1U << 14))
  200960:	0462      	lsls	r2, r4, #17
  200962:	d40a      	bmi.n	20097a <VectorE0+0x3a>
  if (pr & (1U << 15))
  200964:	0423      	lsls	r3, r4, #16
  200966:	d504      	bpl.n	200972 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
  200968:	4814      	ldr	r0, [pc, #80]	; (2009bc <VectorE0+0x7c>)
  20096a:	210f      	movs	r1, #15
  20096c:	6843      	ldr	r3, [r0, #4]
  20096e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  200970:	4798      	blx	r3
}
  200972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200976:	f7ff bd13 	b.w	2003a0 <_port_irq_epilogue>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  20097a:	4810      	ldr	r0, [pc, #64]	; (2009bc <VectorE0+0x7c>)
  20097c:	210e      	movs	r1, #14
  20097e:	6843      	ldr	r3, [r0, #4]
  200980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  200982:	4798      	blx	r3
  200984:	e7ee      	b.n	200964 <VectorE0+0x24>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  200986:	480d      	ldr	r0, [pc, #52]	; (2009bc <VectorE0+0x7c>)
  200988:	210d      	movs	r1, #13
  20098a:	6843      	ldr	r3, [r0, #4]
  20098c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  20098e:	4798      	blx	r3
  200990:	e7e6      	b.n	200960 <VectorE0+0x20>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  200992:	480a      	ldr	r0, [pc, #40]	; (2009bc <VectorE0+0x7c>)
  200994:	210c      	movs	r1, #12
  200996:	6843      	ldr	r3, [r0, #4]
  200998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  20099a:	4798      	blx	r3
  20099c:	e7de      	b.n	20095c <VectorE0+0x1c>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  20099e:	4807      	ldr	r0, [pc, #28]	; (2009bc <VectorE0+0x7c>)
  2009a0:	210b      	movs	r1, #11
  2009a2:	6843      	ldr	r3, [r0, #4]
  2009a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  2009a6:	4798      	blx	r3
  2009a8:	e7d6      	b.n	200958 <VectorE0+0x18>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  2009aa:	4804      	ldr	r0, [pc, #16]	; (2009bc <VectorE0+0x7c>)
  2009ac:	210a      	movs	r1, #10
  2009ae:	6843      	ldr	r3, [r0, #4]
  2009b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  2009b2:	4798      	blx	r3
  2009b4:	e7ce      	b.n	200954 <VectorE0+0x14>
  2009b6:	bf00      	nop
  2009b8:	40013c00 	.word	0x40013c00
  2009bc:	20000834 	.word	0x20000834

002009c0 <Vector9C>:
  pr = EXTI->PR;
  2009c0:	4b19      	ldr	r3, [pc, #100]	; (200a28 <Vector9C+0x68>)
OSAL_IRQ_HANDLER(Vector9C) {
  2009c2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  2009c4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  2009c6:	681a      	ldr	r2, [r3, #0]
  2009c8:	4014      	ands	r4, r2
  2009ca:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  2009ce:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
  2009d0:	06a3      	lsls	r3, r4, #26
  2009d2:	d422      	bmi.n	200a1a <Vector9C+0x5a>
  if (pr & (1U << 6))
  2009d4:	0660      	lsls	r0, r4, #25
  2009d6:	d41a      	bmi.n	200a0e <Vector9C+0x4e>
  if (pr & (1U << 7))
  2009d8:	0621      	lsls	r1, r4, #24
  2009da:	d412      	bmi.n	200a02 <Vector9C+0x42>
  if (pr & (1U << 8))
  2009dc:	05e2      	lsls	r2, r4, #23
  2009de:	d40a      	bmi.n	2009f6 <Vector9C+0x36>
  if (pr & (1U << 9))
  2009e0:	05a3      	lsls	r3, r4, #22
  2009e2:	d504      	bpl.n	2009ee <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
  2009e4:	4811      	ldr	r0, [pc, #68]	; (200a2c <Vector9C+0x6c>)
  2009e6:	2109      	movs	r1, #9
  2009e8:	6843      	ldr	r3, [r0, #4]
  2009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  2009ec:	4798      	blx	r3
}
  2009ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2009f2:	f7ff bcd5 	b.w	2003a0 <_port_irq_epilogue>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  2009f6:	480d      	ldr	r0, [pc, #52]	; (200a2c <Vector9C+0x6c>)
  2009f8:	2108      	movs	r1, #8
  2009fa:	6843      	ldr	r3, [r0, #4]
  2009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  2009fe:	4798      	blx	r3
  200a00:	e7ee      	b.n	2009e0 <Vector9C+0x20>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  200a02:	480a      	ldr	r0, [pc, #40]	; (200a2c <Vector9C+0x6c>)
  200a04:	2107      	movs	r1, #7
  200a06:	6843      	ldr	r3, [r0, #4]
  200a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  200a0a:	4798      	blx	r3
  200a0c:	e7e6      	b.n	2009dc <Vector9C+0x1c>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  200a0e:	4807      	ldr	r0, [pc, #28]	; (200a2c <Vector9C+0x6c>)
  200a10:	2106      	movs	r1, #6
  200a12:	6843      	ldr	r3, [r0, #4]
  200a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  200a16:	4798      	blx	r3
  200a18:	e7de      	b.n	2009d8 <Vector9C+0x18>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  200a1a:	4804      	ldr	r0, [pc, #16]	; (200a2c <Vector9C+0x6c>)
  200a1c:	2105      	movs	r1, #5
  200a1e:	6843      	ldr	r3, [r0, #4]
  200a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  200a22:	4798      	blx	r3
  200a24:	e7d6      	b.n	2009d4 <Vector9C+0x14>
  200a26:	bf00      	nop
  200a28:	40013c00 	.word	0x40013c00
  200a2c:	20000834 	.word	0x20000834

00200a30 <Vector68>:
  pr = EXTI->PR;
  200a30:	4a08      	ldr	r2, [pc, #32]	; (200a54 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
  200a32:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200a34:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  200a36:	6811      	ldr	r1, [r2, #0]
  200a38:	400b      	ands	r3, r1
  200a3a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  200a3e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
  200a40:	b123      	cbz	r3, 200a4c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
  200a42:	4805      	ldr	r0, [pc, #20]	; (200a58 <Vector68+0x28>)
  200a44:	2104      	movs	r1, #4
  200a46:	6843      	ldr	r3, [r0, #4]
  200a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  200a4a:	4798      	blx	r3
}
  200a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200a50:	f7ff bca6 	b.w	2003a0 <_port_irq_epilogue>
  200a54:	40013c00 	.word	0x40013c00
  200a58:	20000834 	.word	0x20000834
  200a5c:	00000000 	.word	0x00000000

00200a60 <Vector64>:
  pr = EXTI->PR;
  200a60:	4a08      	ldr	r2, [pc, #32]	; (200a84 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
  200a62:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200a64:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  200a66:	6811      	ldr	r1, [r2, #0]
  200a68:	400b      	ands	r3, r1
  200a6a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  200a6e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
  200a70:	b123      	cbz	r3, 200a7c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
  200a72:	4805      	ldr	r0, [pc, #20]	; (200a88 <Vector64+0x28>)
  200a74:	2103      	movs	r1, #3
  200a76:	6843      	ldr	r3, [r0, #4]
  200a78:	69db      	ldr	r3, [r3, #28]
  200a7a:	4798      	blx	r3
}
  200a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200a80:	f7ff bc8e 	b.w	2003a0 <_port_irq_epilogue>
  200a84:	40013c00 	.word	0x40013c00
  200a88:	20000834 	.word	0x20000834
  200a8c:	00000000 	.word	0x00000000

00200a90 <Vector60>:
  pr = EXTI->PR;
  200a90:	4a08      	ldr	r2, [pc, #32]	; (200ab4 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
  200a92:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200a94:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  200a96:	6811      	ldr	r1, [r2, #0]
  200a98:	400b      	ands	r3, r1
  200a9a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  200a9e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
  200aa0:	b123      	cbz	r3, 200aac <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
  200aa2:	4805      	ldr	r0, [pc, #20]	; (200ab8 <Vector60+0x28>)
  200aa4:	2102      	movs	r1, #2
  200aa6:	6843      	ldr	r3, [r0, #4]
  200aa8:	695b      	ldr	r3, [r3, #20]
  200aaa:	4798      	blx	r3
}
  200aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200ab0:	f7ff bc76 	b.w	2003a0 <_port_irq_epilogue>
  200ab4:	40013c00 	.word	0x40013c00
  200ab8:	20000834 	.word	0x20000834
  200abc:	00000000 	.word	0x00000000

00200ac0 <Vector5C>:
  pr = EXTI->PR;
  200ac0:	4a08      	ldr	r2, [pc, #32]	; (200ae4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
  200ac2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200ac4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  200ac6:	6811      	ldr	r1, [r2, #0]
  200ac8:	400b      	ands	r3, r1
  200aca:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  200ace:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
  200ad0:	b123      	cbz	r3, 200adc <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
  200ad2:	4805      	ldr	r0, [pc, #20]	; (200ae8 <Vector5C+0x28>)
  200ad4:	2101      	movs	r1, #1
  200ad6:	6843      	ldr	r3, [r0, #4]
  200ad8:	68db      	ldr	r3, [r3, #12]
  200ada:	4798      	blx	r3
}
  200adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200ae0:	f7ff bc5e 	b.w	2003a0 <_port_irq_epilogue>
  200ae4:	40013c00 	.word	0x40013c00
  200ae8:	20000834 	.word	0x20000834
  200aec:	00000000 	.word	0x00000000

00200af0 <Vector58>:
  pr = EXTI->PR;
  200af0:	4a08      	ldr	r2, [pc, #32]	; (200b14 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
  200af2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200af4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  200af6:	6811      	ldr	r1, [r2, #0]
  200af8:	400b      	ands	r3, r1
  200afa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  200afe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
  200b00:	b123      	cbz	r3, 200b0c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
  200b02:	4805      	ldr	r0, [pc, #20]	; (200b18 <Vector58+0x28>)
  200b04:	2100      	movs	r1, #0
  200b06:	6843      	ldr	r3, [r0, #4]
  200b08:	685b      	ldr	r3, [r3, #4]
  200b0a:	4798      	blx	r3
}
  200b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200b10:	f7ff bc46 	b.w	2003a0 <_port_irq_epilogue>
  200b14:	40013c00 	.word	0x40013c00
  200b18:	20000834 	.word	0x20000834
  200b1c:	00000000 	.word	0x00000000

00200b20 <SVC_Handler>:
void SVC_Handler(void) {
  200b20:	b480      	push	{r7}
  200b22:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200b24:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200b28:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200b2a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200b2e:	2300      	movs	r3, #0
  200b30:	f383 8811 	msr	BASEPRI, r3
}
  200b34:	46bd      	mov	sp, r7
  200b36:	bc80      	pop	{r7}
  200b38:	4770      	bx	lr
  200b3a:	bf00      	nop
  200b3c:	0000      	movs	r0, r0
	...

00200b40 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200b40:	b470      	push	{r4, r5, r6}
  200b42:	2320      	movs	r3, #32
  200b44:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b48:	4e0d      	ldr	r6, [pc, #52]	; (200b80 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  200b4a:	1e4a      	subs	r2, r1, #1
  200b4c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  200b4e:	4c0d      	ldr	r4, [pc, #52]	; (200b84 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b50:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200b52:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200b54:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b56:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200b58:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b5a:	1858      	adds	r0, r3, r1
  200b5c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  200b5e:	1a23      	subs	r3, r4, r0
  200b60:	429a      	cmp	r2, r3
  200b62:	d806      	bhi.n	200b72 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200b64:	4402      	add	r2, r0
  200b66:	2300      	movs	r3, #0
  200b68:	6032      	str	r2, [r6, #0]
  200b6a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  200b6e:	bc70      	pop	{r4, r5, r6}
  200b70:	4770      	bx	lr
    return NULL;
  200b72:	2000      	movs	r0, #0
  200b74:	2300      	movs	r3, #0
  200b76:	f383 8811 	msr	BASEPRI, r3
}
  200b7a:	bc70      	pop	{r4, r5, r6}
  200b7c:	4770      	bx	lr
  200b7e:	bf00      	nop
  200b80:	20000b38 	.word	0x20000b38
  200b84:	20000b34 	.word	0x20000b34
	...

00200b90 <wakeup>:
  200b90:	2320      	movs	r3, #32
  200b92:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200b96:	f890 3020 	ldrb.w	r3, [r0, #32]
  200b9a:	2b07      	cmp	r3, #7
  200b9c:	d80e      	bhi.n	200bbc <wakeup+0x2c>
  200b9e:	e8df f003 	tbb	[pc, r3]
  200ba2:	0d28      	.short	0x0d28
  200ba4:	0408240d 	.word	0x0408240d
  200ba8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  200baa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  200bac:	6893      	ldr	r3, [r2, #8]
  200bae:	3301      	adds	r3, #1
  200bb0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200bb2:	e890 000c 	ldmia.w	r0, {r2, r3}
  200bb6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200bb8:	6802      	ldr	r2, [r0, #0]
  200bba:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  200bbc:	2200      	movs	r2, #0
  200bbe:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200bc0:	4b0e      	ldr	r3, [pc, #56]	; (200bfc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200bc2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200bc6:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200bc8:	f04f 34ff 	mov.w	r4, #4294967295
  200bcc:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  200bce:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200bd0:	689a      	ldr	r2, [r3, #8]
  200bd2:	428a      	cmp	r2, r1
  200bd4:	d2fb      	bcs.n	200bce <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200bd6:	685a      	ldr	r2, [r3, #4]
  200bd8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  200bda:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  200bdc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  200bde:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200be0:	6058      	str	r0, [r3, #4]
  200be2:	f381 8811 	msr	BASEPRI, r1
}
  200be6:	bc10      	pop	{r4}
  200be8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  200bea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  200bec:	2200      	movs	r2, #0
  200bee:	601a      	str	r2, [r3, #0]
  200bf0:	e7e4      	b.n	200bbc <wakeup+0x2c>
  200bf2:	2300      	movs	r3, #0
  200bf4:	f383 8811 	msr	BASEPRI, r3
  200bf8:	4770      	bx	lr
  200bfa:	bf00      	nop
  200bfc:	20000944 	.word	0x20000944

00200c00 <_idle_thread.lto_priv.54>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200c00:	e7fe      	b.n	200c00 <_idle_thread.lto_priv.54>
  200c02:	bf00      	nop
	...

00200c10 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200c10:	e7fe      	b.n	200c10 <BusFault_Handler>
  200c12:	bf00      	nop
	...

00200c20 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  200c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200c24:	4d53      	ldr	r5, [pc, #332]	; (200d74 <Vector188+0x154>)
  200c26:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  200c28:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  200c2a:	69f4      	ldr	r4, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200c2c:	0722      	lsls	r2, r4, #28
  u->ICR = isr;
  200c2e:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200c30:	d146      	bne.n	200cc0 <Vector188+0xa0>
  if (isr & USART_ISR_LBDF) {
  200c32:	05e3      	lsls	r3, r4, #23
  200c34:	d439      	bmi.n	200caa <Vector188+0x8a>
  if (isr & USART_ISR_RXNE) {
  200c36:	06a0      	lsls	r0, r4, #26
  200c38:	d416      	bmi.n	200c68 <Vector188+0x48>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  200c3a:	0639      	lsls	r1, r7, #24
  200c3c:	d501      	bpl.n	200c42 <Vector188+0x22>
  200c3e:	0622      	lsls	r2, r4, #24
  200c40:	d459      	bmi.n	200cf6 <Vector188+0xd6>
  if (isr & USART_ISR_TC) {
  200c42:	0663      	lsls	r3, r4, #25
  200c44:	d50c      	bpl.n	200c60 <Vector188+0x40>
  200c46:	2320      	movs	r3, #32
  200c48:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  200c4c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  200c4e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  200c50:	429a      	cmp	r2, r3
  200c52:	d06f      	beq.n	200d34 <Vector188+0x114>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200c54:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  200c58:	2300      	movs	r3, #0
  200c5a:	6037      	str	r7, [r6, #0]
  200c5c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  200c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  200c64:	f7ff bb9c 	b.w	2003a0 <_port_irq_epilogue>
  200c68:	2320      	movs	r3, #32
  200c6a:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200c6e:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200c70:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200c74:	696b      	ldr	r3, [r5, #20]
  200c76:	ea01 0802 	and.w	r8, r1, r2
  200c7a:	2b00      	cmp	r3, #0
  200c7c:	d061      	beq.n	200d42 <Vector188+0x122>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200c7e:	6a2b      	ldr	r3, [r5, #32]
  200c80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  200c82:	4293      	cmp	r3, r2
  200c84:	d061      	beq.n	200d4a <Vector188+0x12a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  200c86:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
  200c88:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  200c8a:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  200c8c:	6229      	str	r1, [r5, #32]
  iqp->q_counter++;
  200c8e:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
  200c90:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  200c94:	6a2a      	ldr	r2, [r5, #32]
  200c96:	69eb      	ldr	r3, [r5, #28]
  200c98:	429a      	cmp	r2, r3
  200c9a:	d248      	bcs.n	200d2e <Vector188+0x10e>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
  200c9c:	4836      	ldr	r0, [pc, #216]	; (200d78 <Vector188+0x158>)
  200c9e:	f001 f9f7 	bl	202090 <chThdDequeueNextI.constprop.35>
  200ca2:	2300      	movs	r3, #0
  200ca4:	f383 8811 	msr	BASEPRI, r3
  200ca8:	e7c7      	b.n	200c3a <Vector188+0x1a>
  200caa:	2320      	movs	r3, #32
  200cac:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  200cb0:	f44f 7000 	mov.w	r0, #512	; 0x200
  200cb4:	f001 f9fc 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
  200cb8:	2300      	movs	r3, #0
  200cba:	f383 8811 	msr	BASEPRI, r3
  200cbe:	e7ba      	b.n	200c36 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  200cc0:	f014 0f08 	tst.w	r4, #8
  200cc4:	bf0c      	ite	eq
  200cc6:	2000      	moveq	r0, #0
  200cc8:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  200cca:	07e3      	lsls	r3, r4, #31
  200ccc:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200cd0:	bf48      	it	mi
  200cd2:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  200cd6:	07a1      	lsls	r1, r4, #30
    sts |= SD_FRAMING_ERROR;
  200cd8:	bf48      	it	mi
  200cda:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  200cde:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
  200ce0:	bf48      	it	mi
  200ce2:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  200ce6:	f383 8811 	msr	BASEPRI, r3
  200cea:	f001 f9e1 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
  200cee:	2300      	movs	r3, #0
  200cf0:	f383 8811 	msr	BASEPRI, r3
  200cf4:	e79d      	b.n	200c32 <Vector188+0x12>
  200cf6:	2320      	movs	r3, #32
  200cf8:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200cfc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  200cfe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  200d00:	429a      	cmp	r2, r3
  200d02:	d02a      	beq.n	200d5a <Vector188+0x13a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  200d04:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200d06:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200d08:	6c29      	ldr	r1, [r5, #64]	; 0x40
  oqp->q_counter++;
  200d0a:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200d0c:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200d0e:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200d10:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200d12:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  200d16:	d301      	bcc.n	200d1c <Vector188+0xfc>
    oqp->q_rdptr = oqp->q_buffer;
  200d18:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  200d1a:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
  200d1c:	4817      	ldr	r0, [pc, #92]	; (200d7c <Vector188+0x15c>)
  200d1e:	f001 f9b7 	bl	202090 <chThdDequeueNextI.constprop.35>
      u->TDR = b;
  200d22:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200d26:	2300      	movs	r3, #0
  200d28:	f383 8811 	msr	BASEPRI, r3
  200d2c:	e789      	b.n	200c42 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  200d2e:	69ab      	ldr	r3, [r5, #24]
  200d30:	622b      	str	r3, [r5, #32]
  200d32:	e7b3      	b.n	200c9c <Vector188+0x7c>
    if (oqIsEmptyI(&sdp->oqueue))
  200d34:	6bab      	ldr	r3, [r5, #56]	; 0x38
  200d36:	2b00      	cmp	r3, #0
  200d38:	d08c      	beq.n	200c54 <Vector188+0x34>
  chEvtBroadcastFlagsI(esp, flags);
  200d3a:	2010      	movs	r0, #16
  200d3c:	f001 f9b8 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
  200d40:	e788      	b.n	200c54 <Vector188+0x34>
  200d42:	2004      	movs	r0, #4
  200d44:	f001 f9b4 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
  200d48:	e799      	b.n	200c7e <Vector188+0x5e>
  if (iqIsFullI(iqp)) {
  200d4a:	696a      	ldr	r2, [r5, #20]
  200d4c:	2a00      	cmp	r2, #0
  200d4e:	d09a      	beq.n	200c86 <Vector188+0x66>
  200d50:	f44f 6080 	mov.w	r0, #1024	; 0x400
  200d54:	f001 f9ac 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
  200d58:	e7a3      	b.n	200ca2 <Vector188+0x82>
  if (oqIsEmptyI(oqp)) {
  200d5a:	6baa      	ldr	r2, [r5, #56]	; 0x38
  200d5c:	2a00      	cmp	r2, #0
  200d5e:	d0d1      	beq.n	200d04 <Vector188+0xe4>
  200d60:	2008      	movs	r0, #8
  200d62:	f001 f9a5 	bl	2020b0 <chEvtBroadcastFlagsI.constprop.34>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  200d66:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  200d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  200d6e:	6033      	str	r3, [r6, #0]
  200d70:	e7d9      	b.n	200d26 <Vector188+0x106>
  200d72:	bf00      	nop
  200d74:	20000b60 	.word	0x20000b60
  200d78:	20000b6c 	.word	0x20000b6c
  200d7c:	20000b90 	.word	0x20000b90

00200d80 <chSchGoSleepS>:
  thread_t *otp = currp;
  200d80:	4b08      	ldr	r3, [pc, #32]	; (200da4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200d82:	681a      	ldr	r2, [r3, #0]
  200d84:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200d86:	b430      	push	{r4, r5}
  otp->state = newstate;
  200d88:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  200d8c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  200d8e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200d90:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200d92:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200d94:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200d96:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200d9a:	619a      	str	r2, [r3, #24]
}
  200d9c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200d9e:	f7ff ba99 	b.w	2002d4 <_port_switch>
  200da2:	bf00      	nop
  200da4:	20000944 	.word	0x20000944
	...

00200db0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  200db0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200db2:	4b33      	ldr	r3, [pc, #204]	; (200e80 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  200db4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  200db8:	4a32      	ldr	r2, [pc, #200]	; (200e84 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200dba:	4c33      	ldr	r4, [pc, #204]	; (200e88 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200dbc:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200dbe:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  200dc0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  200dc2:	681a      	ldr	r2, [r3, #0]
  200dc4:	f042 0201 	orr.w	r2, r2, #1
  200dc8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200dca:	680b      	ldr	r3, [r1, #0]
  200dcc:	079b      	lsls	r3, r3, #30
  200dce:	d5fc      	bpl.n	200dca <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200dd0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200dd2:	4a2b      	ldr	r2, [pc, #172]	; (200e80 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200dd4:	f023 0303 	bic.w	r3, r3, #3
  200dd8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  200dda:	688b      	ldr	r3, [r1, #8]
  200ddc:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200dde:	6893      	ldr	r3, [r2, #8]
  200de0:	f013 030c 	ands.w	r3, r3, #12
  200de4:	d1fb      	bne.n	200dde <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200de6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200de8:	4925      	ldr	r1, [pc, #148]	; (200e80 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200dea:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  200dee:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  200df0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  200df2:	6813      	ldr	r3, [r2, #0]
  200df4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  200df8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200dfa:	680b      	ldr	r3, [r1, #0]
  200dfc:	039d      	lsls	r5, r3, #14
  200dfe:	d5fc      	bpl.n	200dfa <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200e00:	4b22      	ldr	r3, [pc, #136]	; (200e8c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200e02:	4820      	ldr	r0, [pc, #128]	; (200e84 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200e04:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  200e06:	680b      	ldr	r3, [r1, #0]
  200e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200e0c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200e0e:	6843      	ldr	r3, [r0, #4]
  200e10:	045c      	lsls	r4, r3, #17
  200e12:	d5fc      	bpl.n	200e0e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  200e14:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200e16:	4a1b      	ldr	r2, [pc, #108]	; (200e84 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  200e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200e1c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200e1e:	6853      	ldr	r3, [r2, #4]
  200e20:	03d9      	lsls	r1, r3, #15
  200e22:	d5fc      	bpl.n	200e1e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200e24:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200e26:	4917      	ldr	r1, [pc, #92]	; (200e84 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200e2c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200e2e:	684b      	ldr	r3, [r1, #4]
  200e30:	039a      	lsls	r2, r3, #14
  200e32:	d5fc      	bpl.n	200e2e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  200e34:	4a12      	ldr	r2, [pc, #72]	; (200e80 <__early_init+0xd0>)
  200e36:	6813      	ldr	r3, [r2, #0]
  200e38:	019b      	lsls	r3, r3, #6
  200e3a:	d5fc      	bpl.n	200e36 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200e3c:	4b14      	ldr	r3, [pc, #80]	; (200e90 <__early_init+0xe0>)
  200e3e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200e42:	4d14      	ldr	r5, [pc, #80]	; (200e94 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  200e44:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200e48:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200e4a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  200e4c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200e50:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200e54:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200e56:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200e58:	4909      	ldr	r1, [pc, #36]	; (200e80 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200e5a:	f043 0302 	orr.w	r3, r3, #2
  200e5e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200e60:	688b      	ldr	r3, [r1, #8]
  200e62:	f003 030c 	and.w	r3, r3, #12
  200e66:	2b08      	cmp	r3, #8
  200e68:	d1fa      	bne.n	200e60 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  200e6a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  200e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  200e70:	644b      	str	r3, [r1, #68]	; 0x44
  200e72:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  200e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  200e78:	bc30      	pop	{r4, r5}
  200e7a:	664b      	str	r3, [r1, #100]	; 0x64
  200e7c:	4770      	bx	lr
  200e7e:	bf00      	nop
  200e80:	40023800 	.word	0x40023800
  200e84:	40007000 	.word	0x40007000
  200e88:	10000400 	.word	0x10000400
  200e8c:	09006c10 	.word	0x09006c10
  200e90:	40023c00 	.word	0x40023c00
  200e94:	30999400 	.word	0x30999400
	...

00200ea0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  200ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200ea4:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  200ea8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  200eac:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  200eb0:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200eb4:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200eb6:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  200eb8:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  200ebc:	f04f 0a0f 	mov.w	sl, #15
  200ec0:	e00e      	b.n	200ee0 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200ec2:	6a03      	ldr	r3, [r0, #32]
  200ec4:	ea23 0404 	bic.w	r4, r3, r4
  200ec8:	4325      	orrs	r5, r4
  200eca:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  200ecc:	0849      	lsrs	r1, r1, #1
  200ece:	d047      	beq.n	200f60 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  200ed0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  200ed4:	3601      	adds	r6, #1
    ospeedr <<= 2;
  200ed6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  200eda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  200ede:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  200ee0:	07cb      	lsls	r3, r1, #31
  200ee2:	d5f3      	bpl.n	200ecc <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  200ee4:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200ee6:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  200ee8:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  200eec:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  200ef0:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  200ef4:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  200ef8:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200efc:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  200f00:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200f04:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  200f08:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  200f0c:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  200f10:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200f14:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  200f18:	ea6f 0303 	mvn.w	r3, r3
  200f1c:	f8d0 b008 	ldr.w	fp, [r0, #8]
  200f20:	ea0b 0b03 	and.w	fp, fp, r3
  200f24:	ea4b 0b0c 	orr.w	fp, fp, ip
  200f28:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  200f2c:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  200f30:	ea03 0b0b 	and.w	fp, r3, fp
  200f34:	ea4b 0b0e 	orr.w	fp, fp, lr
  200f38:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  200f3c:	d012      	beq.n	200f64 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  200f3e:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  200f42:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  200f44:	ea03 030b 	and.w	r3, r3, fp
  200f48:	ea43 0307 	orr.w	r3, r3, r7
  200f4c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  200f4e:	d9b8      	bls.n	200ec2 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200f50:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  200f52:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200f54:	ea23 0404 	bic.w	r4, r3, r4
  200f58:	ea45 0504 	orr.w	r5, r5, r4
  200f5c:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  200f5e:	d1b7      	bne.n	200ed0 <_pal_lld_setgroupmode+0x30>
  200f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  200f64:	2e07      	cmp	r6, #7
  200f66:	d80a      	bhi.n	200f7e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200f68:	f8d0 b020 	ldr.w	fp, [r0, #32]
  200f6c:	ea2b 0404 	bic.w	r4, fp, r4
  200f70:	4325      	orrs	r5, r4
  200f72:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  200f74:	6804      	ldr	r4, [r0, #0]
  200f76:	4023      	ands	r3, r4
  200f78:	433b      	orrs	r3, r7
  200f7a:	6003      	str	r3, [r0, #0]
  200f7c:	e7a6      	b.n	200ecc <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200f7e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  200f82:	ea2b 0404 	bic.w	r4, fp, r4
  200f86:	4325      	orrs	r5, r4
  200f88:	6245      	str	r5, [r0, #36]	; 0x24
  200f8a:	e7f3      	b.n	200f74 <_pal_lld_setgroupmode+0xd4>
  200f8c:	0000      	movs	r0, r0
	...

00200f90 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200f90:	4b0e      	ldr	r3, [pc, #56]	; (200fcc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  200f92:	6882      	ldr	r2, [r0, #8]
  200f94:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200f96:	490e      	ldr	r1, [pc, #56]	; (200fd0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  200f98:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  200f9a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  200f9c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200f9e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  200fa0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  200fa2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  200fa4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  200fa6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  200fa8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  200faa:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  200fae:	18e4      	adds	r4, r4, r3
  200fb0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  200fb4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  200fb6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  200fb8:	bf88      	it	hi
  200fba:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  200fbc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  200fbe:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  200fc2:	bf38      	it	cc
  200fc4:	6003      	strcc	r3, [r0, #0]
}
  200fc6:	bc30      	pop	{r4, r5}
  200fc8:	4770      	bx	lr
  200fca:	bf00      	nop
  200fcc:	e0001000 	.word	0xe0001000
  200fd0:	20000944 	.word	0x20000944
	...

00200fe0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
  200fe0:	4a0e      	ldr	r2, [pc, #56]	; (20101c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  200fe2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  200fe4:	6810      	ldr	r0, [r2, #0]
void chSchDoRescheduleAhead(void) {
  200fe6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  200fe8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  200fea:	2500      	movs	r5, #0
  thread_t *otp = currp;
  200fec:	6994      	ldr	r4, [r2, #24]
  200fee:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200ff0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  200ff2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  200ff6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  200ffa:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200ffc:	6190      	str	r0, [r2, #24]
  200ffe:	e000      	b.n	201002 <chSchDoReschedule+0x22>
  201000:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201002:	689a      	ldr	r2, [r3, #8]
  201004:	4291      	cmp	r1, r2
  201006:	d3fb      	bcc.n	201000 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201008:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20100a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20100c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20100e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201010:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201012:	605c      	str	r4, [r3, #4]
}
  201014:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201016:	f7ff b95d 	b.w	2002d4 <_port_switch>
  20101a:	bf00      	nop
  20101c:	20000944 	.word	0x20000944

00201020 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
  201020:	4b04      	ldr	r3, [pc, #16]	; (201034 <chSchRescheduleS+0x14>)
  201022:	681a      	ldr	r2, [r3, #0]
  201024:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
  201026:	6892      	ldr	r2, [r2, #8]
  201028:	689b      	ldr	r3, [r3, #8]
  20102a:	429a      	cmp	r2, r3
  20102c:	d800      	bhi.n	201030 <chSchRescheduleS+0x10>
  20102e:	4770      	bx	lr
    chSchDoRescheduleAhead();
  201030:	f7ff bfd6 	b.w	200fe0 <chSchDoReschedule>
  201034:	20000944 	.word	0x20000944
	...

00201040 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201040:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201044:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201046:	b5f0      	push	{r4, r5, r6, r7, lr}
  201048:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20104a:	d031      	beq.n	2010b0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20104c:	4c1c      	ldr	r4, [pc, #112]	; (2010c0 <chSchGoSleepTimeoutS+0x80>)
  20104e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201050:	481c      	ldr	r0, [pc, #112]	; (2010c4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201052:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201054:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201056:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201058:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20105a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20105c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20105e:	d905      	bls.n	20106c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201060:	1a89      	subs	r1, r1, r2
    p = p->next;
  201062:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201064:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201066:	891a      	ldrh	r2, [r3, #8]
  201068:	428a      	cmp	r2, r1
  20106a:	d3f9      	bcc.n	201060 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20106c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20106e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201070:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201072:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201076:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201078:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20107a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20107c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20107e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201082:	891a      	ldrh	r2, [r3, #8]
  201084:	1a51      	subs	r1, r2, r1
  201086:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201088:	84a6      	strh	r6, [r4, #36]	; 0x24
  20108a:	f7ff fe79 	bl	200d80 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20108e:	9b04      	ldr	r3, [sp, #16]
  201090:	b153      	cbz	r3, 2010a8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201092:	9b01      	ldr	r3, [sp, #4]
  201094:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201098:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20109a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20109c:	4402      	add	r2, r0
  20109e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  2010a0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  2010a2:	9b01      	ldr	r3, [sp, #4]
  2010a4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  2010a6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  2010a8:	69a3      	ldr	r3, [r4, #24]
}
  2010aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2010ac:	b007      	add	sp, #28
  2010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2010b0:	4c03      	ldr	r4, [pc, #12]	; (2010c0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  2010b2:	f7ff fe65 	bl	200d80 <chSchGoSleepS>
  return currp->u.rdymsg;
  2010b6:	69a3      	ldr	r3, [r4, #24]
}
  2010b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2010ba:	b007      	add	sp, #28
  2010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2010be:	bf00      	nop
  2010c0:	20000944 	.word	0x20000944
  2010c4:	00200b91 	.word	0x00200b91
	...

002010d0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  2010d0:	b161      	cbz	r1, 2010ec <chThdEnqueueTimeoutS+0x1c>
  2010d2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  2010d4:	4b07      	ldr	r3, [pc, #28]	; (2010f4 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2010d6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  2010d8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  2010da:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  2010dc:	6854      	ldr	r4, [r2, #4]
  2010de:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  2010e2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  2010e4:	6053      	str	r3, [r2, #4]
}
  2010e6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2010e8:	f7ff bfaa 	b.w	201040 <chSchGoSleepTimeoutS>
}
  2010ec:	f04f 30ff 	mov.w	r0, #4294967295
  2010f0:	4770      	bx	lr
  2010f2:	bf00      	nop
  2010f4:	20000944 	.word	0x20000944
	...

00201100 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201104:	4699      	mov	r9, r3
  201106:	b083      	sub	sp, #12
  201108:	4604      	mov	r4, r0
  20110a:	460e      	mov	r6, r1
  20110c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20110e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201112:	2320      	movs	r3, #32
  201114:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201118:	4b26      	ldr	r3, [pc, #152]	; (2011b4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20111a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20111e:	2700      	movs	r7, #0
  201120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201122:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201126:	fa19 f383 	uxtah	r3, r9, r3
  20112a:	b29b      	uxth	r3, r3
  20112c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20112e:	68a3      	ldr	r3, [r4, #8]
  201130:	b313      	cbz	r3, 201178 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201132:	6961      	ldr	r1, [r4, #20]
  201134:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201138:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20113a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20113c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20113e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201140:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201142:	7833      	ldrb	r3, [r6, #0]
  201144:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201146:	6961      	ldr	r1, [r4, #20]
  201148:	6923      	ldr	r3, [r4, #16]
  20114a:	4299      	cmp	r1, r3
  20114c:	d301      	bcc.n	201152 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20114e:	68e3      	ldr	r3, [r4, #12]
  201150:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201152:	f1b8 0f00 	cmp.w	r8, #0
  201156:	d001      	beq.n	20115c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201158:	4620      	mov	r0, r4
  20115a:	47c0      	blx	r8
  20115c:	2300      	movs	r3, #0
  20115e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201162:	3d01      	subs	r5, #1
    w++;
  201164:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201168:	d019      	beq.n	20119e <oqWriteTimeout+0x9e>
  20116a:	2320      	movs	r3, #32
  20116c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201170:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201172:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201174:	2b00      	cmp	r3, #0
  201176:	d1dc      	bne.n	201132 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201178:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20117c:	4592      	cmp	sl, r2
  20117e:	d812      	bhi.n	2011a6 <oqWriteTimeout+0xa6>
  201180:	4a0c      	ldr	r2, [pc, #48]	; (2011b4 <oqWriteTimeout+0xb4>)
  201182:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201184:	9a01      	ldr	r2, [sp, #4]
  201186:	1a51      	subs	r1, r2, r1
  201188:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20118a:	4589      	cmp	r9, r1
  20118c:	d305      	bcc.n	20119a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  20118e:	4620      	mov	r0, r4
  201190:	f7ff ff9e 	bl	2010d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201194:	2800      	cmp	r0, #0
  201196:	d0ca      	beq.n	20112e <oqWriteTimeout+0x2e>
  201198:	2300      	movs	r3, #0
  20119a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20119e:	4638      	mov	r0, r7
  2011a0:	b003      	add	sp, #12
  2011a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2011a6:	4649      	mov	r1, r9
  2011a8:	4620      	mov	r0, r4
  2011aa:	f7ff ff91 	bl	2010d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2011ae:	2800      	cmp	r0, #0
  2011b0:	d0bd      	beq.n	20112e <oqWriteTimeout+0x2e>
  2011b2:	e7f1      	b.n	201198 <oqWriteTimeout+0x98>
  2011b4:	20000944 	.word	0x20000944
	...

002011c0 <_writet.lto_priv.52>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2011c0:	3030      	adds	r0, #48	; 0x30
  2011c2:	f7ff bf9d 	b.w	201100 <oqWriteTimeout>
  2011c6:	bf00      	nop
	...

002011d0 <_write.lto_priv.46>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2011d0:	3030      	adds	r0, #48	; 0x30
  2011d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2011d6:	f7ff bf93 	b.w	201100 <oqWriteTimeout>
  2011da:	bf00      	nop
  2011dc:	0000      	movs	r0, r0
	...

002011e0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  2011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2011e2:	4604      	mov	r4, r0
  2011e4:	460f      	mov	r7, r1
  2011e6:	4616      	mov	r6, r2
  2011e8:	2320      	movs	r3, #32
  2011ea:	f383 8811 	msr	BASEPRI, r3
  2011ee:	e003      	b.n	2011f8 <oqPutTimeout+0x18>
  2011f0:	f7ff ff6e 	bl	2010d0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2011f4:	2800      	cmp	r0, #0
  2011f6:	db19      	blt.n	20122c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  2011f8:	68a5      	ldr	r5, [r4, #8]
  2011fa:	4631      	mov	r1, r6
  2011fc:	4620      	mov	r0, r4
  2011fe:	2d00      	cmp	r5, #0
  201200:	d0f6      	beq.n	2011f0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201202:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201204:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201206:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201208:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  20120a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  20120c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  20120e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201210:	6962      	ldr	r2, [r4, #20]
  201212:	6923      	ldr	r3, [r4, #16]
  201214:	429a      	cmp	r2, r3
  201216:	d301      	bcc.n	20121c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201218:	68e3      	ldr	r3, [r4, #12]
  20121a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20121c:	69e3      	ldr	r3, [r4, #28]
  20121e:	b10b      	cbz	r3, 201224 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201220:	4620      	mov	r0, r4
  201222:	4798      	blx	r3
  201224:	2000      	movs	r0, #0
  201226:	f380 8811 	msr	BASEPRI, r0
}
  20122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20122c:	f385 8811 	msr	BASEPRI, r5
  201230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201232:	bf00      	nop
	...

00201240 <_putt.lto_priv.50>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201240:	3030      	adds	r0, #48	; 0x30
  201242:	f7ff bfcd 	b.w	2011e0 <oqPutTimeout>
  201246:	bf00      	nop
	...

00201250 <_put.lto_priv.48>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201250:	3030      	adds	r0, #48	; 0x30
  201252:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201256:	f7ff bfc3 	b.w	2011e0 <oqPutTimeout>
  20125a:	bf00      	nop
  20125c:	0000      	movs	r0, r0
	...

00201260 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201264:	4699      	mov	r9, r3
  201266:	b083      	sub	sp, #12
  201268:	4604      	mov	r4, r0
  20126a:	460e      	mov	r6, r1
  20126c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20126e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201272:	2320      	movs	r3, #32
  201274:	f383 8811 	msr	BASEPRI, r3
  201278:	4b26      	ldr	r3, [pc, #152]	; (201314 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20127a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  20127e:	2700      	movs	r7, #0
  201280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201282:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201286:	fa19 f383 	uxtah	r3, r9, r3
  20128a:	b29b      	uxth	r3, r3
  20128c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  20128e:	68a3      	ldr	r3, [r4, #8]
  201290:	b313      	cbz	r3, 2012d8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201292:	69a1      	ldr	r1, [r4, #24]
  201294:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201298:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20129a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20129c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20129e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  2012a0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2012a2:	780b      	ldrb	r3, [r1, #0]
  2012a4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  2012a6:	69a1      	ldr	r1, [r4, #24]
  2012a8:	6923      	ldr	r3, [r4, #16]
  2012aa:	4299      	cmp	r1, r3
  2012ac:	d301      	bcc.n	2012b2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  2012ae:	68e3      	ldr	r3, [r4, #12]
  2012b0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  2012b2:	f1b8 0f00 	cmp.w	r8, #0
  2012b6:	d001      	beq.n	2012bc <iqReadTimeout+0x5c>
      nfy(iqp);
  2012b8:	4620      	mov	r0, r4
  2012ba:	47c0      	blx	r8
  2012bc:	2300      	movs	r3, #0
  2012be:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  2012c2:	3d01      	subs	r5, #1
    r++;
  2012c4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2012c8:	d019      	beq.n	2012fe <iqReadTimeout+0x9e>
  2012ca:	2320      	movs	r3, #32
  2012cc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  2012d0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2012d2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  2012d4:	2b00      	cmp	r3, #0
  2012d6:	d1dc      	bne.n	201292 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2012d8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2012dc:	4592      	cmp	sl, r2
  2012de:	d812      	bhi.n	201306 <iqReadTimeout+0xa6>
  2012e0:	4a0c      	ldr	r2, [pc, #48]	; (201314 <iqReadTimeout+0xb4>)
  2012e2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2012e4:	9a01      	ldr	r2, [sp, #4]
  2012e6:	1a51      	subs	r1, r2, r1
  2012e8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2012ea:	4589      	cmp	r9, r1
  2012ec:	d305      	bcc.n	2012fa <iqReadTimeout+0x9a>
  2012ee:	4620      	mov	r0, r4
  2012f0:	f7ff feee 	bl	2010d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2012f4:	2800      	cmp	r0, #0
  2012f6:	d0ca      	beq.n	20128e <iqReadTimeout+0x2e>
  2012f8:	2300      	movs	r3, #0
  2012fa:	f383 8811 	msr	BASEPRI, r3
}
  2012fe:	4638      	mov	r0, r7
  201300:	b003      	add	sp, #12
  201302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201306:	4649      	mov	r1, r9
  201308:	4620      	mov	r0, r4
  20130a:	f7ff fee1 	bl	2010d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20130e:	2800      	cmp	r0, #0
  201310:	d0bd      	beq.n	20128e <iqReadTimeout+0x2e>
  201312:	e7f1      	b.n	2012f8 <iqReadTimeout+0x98>
  201314:	20000944 	.word	0x20000944
	...

00201320 <_readt.lto_priv.53>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201320:	300c      	adds	r0, #12
  201322:	f7ff bf9d 	b.w	201260 <iqReadTimeout>
  201326:	bf00      	nop
	...

00201330 <_read.lto_priv.47>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201330:	300c      	adds	r0, #12
  201332:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201336:	f7ff bf93 	b.w	201260 <iqReadTimeout>
  20133a:	bf00      	nop
  20133c:	0000      	movs	r0, r0
	...

00201340 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201340:	b570      	push	{r4, r5, r6, lr}
  201342:	2320      	movs	r3, #32
  201344:	4604      	mov	r4, r0
  201346:	460e      	mov	r6, r1
  201348:	f383 8811 	msr	BASEPRI, r3
  20134c:	e003      	b.n	201356 <iqGetTimeout+0x16>
  20134e:	f7ff febf 	bl	2010d0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201352:	2800      	cmp	r0, #0
  201354:	db19      	blt.n	20138a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201356:	68a5      	ldr	r5, [r4, #8]
  201358:	4631      	mov	r1, r6
  20135a:	4620      	mov	r0, r4
  20135c:	2d00      	cmp	r5, #0
  20135e:	d0f6      	beq.n	20134e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201360:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201362:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201364:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201366:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201368:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  20136a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  20136c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  20136e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201370:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201372:	d301      	bcc.n	201378 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201374:	68e3      	ldr	r3, [r4, #12]
  201376:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201378:	69e3      	ldr	r3, [r4, #28]
  20137a:	b10b      	cbz	r3, 201380 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  20137c:	4620      	mov	r0, r4
  20137e:	4798      	blx	r3
  201380:	2300      	movs	r3, #0
  201382:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201386:	4628      	mov	r0, r5
}
  201388:	bd70      	pop	{r4, r5, r6, pc}
  20138a:	f385 8811 	msr	BASEPRI, r5
  20138e:	bd70      	pop	{r4, r5, r6, pc}

00201390 <_gett.lto_priv.51>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201390:	300c      	adds	r0, #12
  201392:	f7ff bfd5 	b.w	201340 <iqGetTimeout>
  201396:	bf00      	nop
	...

002013a0 <_get.lto_priv.49>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  2013a0:	300c      	adds	r0, #12
  2013a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  2013a6:	f7ff bfcb 	b.w	201340 <iqGetTimeout>
  2013aa:	bf00      	nop
  2013ac:	0000      	movs	r0, r0
	...

002013b0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2013b0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2013b2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2013b4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2013b6:	4b08      	ldr	r3, [pc, #32]	; (2013d8 <chSchReadyI+0x28>)
  2013b8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2013ba:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2013be:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2013c0:	689a      	ldr	r2, [r3, #8]
  2013c2:	428a      	cmp	r2, r1
  2013c4:	d2fb      	bcs.n	2013be <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2013c6:	685a      	ldr	r2, [r3, #4]
}
  2013c8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2013ca:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2013cc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2013ce:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2013d0:	605c      	str	r4, [r3, #4]
}
  2013d2:	bc10      	pop	{r4}
  2013d4:	4770      	bx	lr
  2013d6:	bf00      	nop
  2013d8:	20000944 	.word	0x20000944
  2013dc:	00000000 	.word	0x00000000

002013e0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  2013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  2013e2:	4b23      	ldr	r3, [pc, #140]	; (201470 <Vector88+0x90>)
  ADC1->SR = 0;
  2013e4:	2100      	movs	r1, #0
  sr = ADC1->SR;
  2013e6:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  2013e8:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  2013ea:	0693      	lsls	r3, r2, #26
  2013ec:	d535      	bpl.n	20145a <Vector88+0x7a>
  2013ee:	4c21      	ldr	r4, [pc, #132]	; (201474 <Vector88+0x94>)
  2013f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  2013f2:	6802      	ldr	r2, [r0, #0]
  2013f4:	6853      	ldr	r3, [r2, #4]
  2013f6:	2b00      	cmp	r3, #0
  2013f8:	d02f      	beq.n	20145a <Vector88+0x7a>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
  2013fa:	6921      	ldr	r1, [r4, #16]
  2013fc:	b369      	cbz	r1, 20145a <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  2013fe:	6813      	ldr	r3, [r2, #0]
  201400:	f023 031f 	bic.w	r3, r3, #31
  201404:	6013      	str	r3, [r2, #0]
  201406:	6813      	ldr	r3, [r2, #0]
  201408:	f013 0301 	ands.w	r3, r3, #1
  20140c:	d1fb      	bne.n	201406 <Vector88+0x26>
  20140e:	7a07      	ldrb	r7, [r0, #8]
  201410:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201412:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201414:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201416:	6846      	ldr	r6, [r0, #4]
  201418:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20141c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20141e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201420:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201422:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201424:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201426:	b1fd      	cbz	r5, 201468 <Vector88+0x88>
  201428:	2305      	movs	r3, #5
  20142a:	4812      	ldr	r0, [pc, #72]	; (201474 <Vector88+0x94>)
  20142c:	7023      	strb	r3, [r4, #0]
  20142e:	47a8      	blx	r5
  201430:	7823      	ldrb	r3, [r4, #0]
  201432:	2b05      	cmp	r3, #5
  201434:	d015      	beq.n	201462 <Vector88+0x82>
  201436:	2300      	movs	r3, #0
  201438:	6123      	str	r3, [r4, #16]
  20143a:	2320      	movs	r3, #32
  20143c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201440:	6963      	ldr	r3, [r4, #20]
  201442:	b13b      	cbz	r3, 201454 <Vector88+0x74>
    tp->u.rdymsg = msg;
  201444:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  201448:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  20144a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  20144c:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  20144e:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  201450:	f7ff ffae 	bl	2013b0 <chSchReadyI>
  201454:	2300      	movs	r3, #0
  201456:	f383 8811 	msr	BASEPRI, r3
}
  20145a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20145e:	f7fe bf9f 	b.w	2003a0 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201462:	2302      	movs	r3, #2
  201464:	7023      	strb	r3, [r4, #0]
  201466:	e7e6      	b.n	201436 <Vector88+0x56>
  201468:	2302      	movs	r3, #2
  20146a:	6125      	str	r5, [r4, #16]
  20146c:	7023      	strb	r3, [r4, #0]
  20146e:	e7e4      	b.n	20143a <Vector88+0x5a>
  201470:	40012000 	.word	0x40012000
  201474:	20000800 	.word	0x20000800
	...

00201480 <adc_lld_serve_rx_interrupt.lto_priv.44>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  201480:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  201484:	b570      	push	{r4, r5, r6, lr}
  201486:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  201488:	d031      	beq.n	2014ee <adc_lld_serve_rx_interrupt.lto_priv.44+0x6e>
  dmaStreamDisable(adcp->dmastp);
  20148a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  20148c:	6803      	ldr	r3, [r0, #0]
  20148e:	681a      	ldr	r2, [r3, #0]
  201490:	f022 021f 	bic.w	r2, r2, #31
  201494:	601a      	str	r2, [r3, #0]
  201496:	6819      	ldr	r1, [r3, #0]
  201498:	f011 0101 	ands.w	r1, r1, #1
  20149c:	d1fb      	bne.n	201496 <adc_lld_serve_rx_interrupt.lto_priv.44+0x16>
  20149e:	7a03      	ldrb	r3, [r0, #8]
  2014a0:	223d      	movs	r2, #61	; 0x3d
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  2014a2:	6925      	ldr	r5, [r4, #16]
  adcp->adc->CR2 = ADC_CR2_ADON;
  2014a4:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  2014a6:	6840      	ldr	r0, [r0, #4]
  2014a8:	409a      	lsls	r2, r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  2014aa:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
  2014ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  2014ae:	6002      	str	r2, [r0, #0]
  adcp->adc->CR1 = 0;
  2014b0:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
  2014b2:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  2014b4:	609e      	str	r6, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  2014b6:	2d00      	cmp	r5, #0
  2014b8:	d030      	beq.n	20151c <adc_lld_serve_rx_interrupt.lto_priv.44+0x9c>
  2014ba:	2305      	movs	r3, #5
  2014bc:	4620      	mov	r0, r4
  2014be:	7023      	strb	r3, [r4, #0]
  2014c0:	47a8      	blx	r5
  2014c2:	7823      	ldrb	r3, [r4, #0]
  2014c4:	2b05      	cmp	r3, #5
  2014c6:	d067      	beq.n	201598 <adc_lld_serve_rx_interrupt.lto_priv.44+0x118>
  2014c8:	2300      	movs	r3, #0
  2014ca:	6123      	str	r3, [r4, #16]
  2014cc:	2320      	movs	r3, #32
  2014ce:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2014d2:	6963      	ldr	r3, [r4, #20]
  2014d4:	b13b      	cbz	r3, 2014e6 <adc_lld_serve_rx_interrupt.lto_priv.44+0x66>
    *trp = NULL;
  2014d6:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
  2014d8:	f04f 32ff 	mov.w	r2, #4294967295
    (void) chSchReadyI(tp);
  2014dc:	4618      	mov	r0, r3
    *trp = NULL;
  2014de:	6161      	str	r1, [r4, #20]
    tp->u.rdymsg = msg;
  2014e0:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  2014e2:	f7ff ff65 	bl	2013b0 <chSchReadyI>
  2014e6:	2300      	movs	r3, #0
  2014e8:	f383 8811 	msr	BASEPRI, r3
  2014ec:	bd70      	pop	{r4, r5, r6, pc}
    if (adcp->grpp != NULL) {
  2014ee:	6905      	ldr	r5, [r0, #16]
  2014f0:	b19d      	cbz	r5, 20151a <adc_lld_serve_rx_interrupt.lto_priv.44+0x9a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  2014f2:	068a      	lsls	r2, r1, #26
  2014f4:	d50f      	bpl.n	201516 <adc_lld_serve_rx_interrupt.lto_priv.44+0x96>
        _adc_isr_full_code(adcp);
  2014f6:	782b      	ldrb	r3, [r5, #0]
  2014f8:	b1eb      	cbz	r3, 201536 <adc_lld_serve_rx_interrupt.lto_priv.44+0xb6>
  2014fa:	686b      	ldr	r3, [r5, #4]
  2014fc:	b16b      	cbz	r3, 20151a <adc_lld_serve_rx_interrupt.lto_priv.44+0x9a>
  2014fe:	68c2      	ldr	r2, [r0, #12]
  201500:	2a01      	cmp	r2, #1
  201502:	d94c      	bls.n	20159e <adc_lld_serve_rx_interrupt.lto_priv.44+0x11e>
  201504:	0852      	lsrs	r2, r2, #1
  201506:	886d      	ldrh	r5, [r5, #2]
  201508:	6884      	ldr	r4, [r0, #8]
  20150a:	0051      	lsls	r1, r2, #1
  20150c:	fb05 4101 	mla	r1, r5, r1, r4
}
  201510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  201514:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  201516:	06cb      	lsls	r3, r1, #27
  201518:	d404      	bmi.n	201524 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa4>
  20151a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  20151c:	2302      	movs	r3, #2
  20151e:	6125      	str	r5, [r4, #16]
  201520:	7023      	strb	r3, [r4, #0]
  201522:	e7d3      	b.n	2014cc <adc_lld_serve_rx_interrupt.lto_priv.44+0x4c>
        _adc_isr_half_code(adcp);
  201524:	686b      	ldr	r3, [r5, #4]
  201526:	2b00      	cmp	r3, #0
  201528:	d0f7      	beq.n	20151a <adc_lld_serve_rx_interrupt.lto_priv.44+0x9a>
  20152a:	68c2      	ldr	r2, [r0, #12]
  20152c:	6881      	ldr	r1, [r0, #8]
  20152e:	0852      	lsrs	r2, r2, #1
}
  201530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
  201534:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
  201536:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201538:	6802      	ldr	r2, [r0, #0]
  20153a:	6813      	ldr	r3, [r2, #0]
  20153c:	f023 031f 	bic.w	r3, r3, #31
  201540:	6013      	str	r3, [r2, #0]
  201542:	6813      	ldr	r3, [r2, #0]
  201544:	f013 0301 	ands.w	r3, r3, #1
  201548:	d1fb      	bne.n	201542 <adc_lld_serve_rx_interrupt.lto_priv.44+0xc2>
  20154a:	7a02      	ldrb	r2, [r0, #8]
  20154c:	213d      	movs	r1, #61	; 0x3d
        _adc_isr_full_code(adcp);
  20154e:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201550:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  201552:	6840      	ldr	r0, [r0, #4]
  201554:	4091      	lsls	r1, r2
  adcp->adc->CR1 = 0;
  201556:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201558:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
  20155a:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  20155c:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  20155e:	6096      	str	r6, [r2, #8]
        _adc_isr_full_code(adcp);
  201560:	b1ad      	cbz	r5, 20158e <adc_lld_serve_rx_interrupt.lto_priv.44+0x10e>
  201562:	2304      	movs	r3, #4
  201564:	68e2      	ldr	r2, [r4, #12]
  201566:	68a1      	ldr	r1, [r4, #8]
  201568:	4620      	mov	r0, r4
  20156a:	7023      	strb	r3, [r4, #0]
  20156c:	47a8      	blx	r5
  20156e:	7823      	ldrb	r3, [r4, #0]
  201570:	2b04      	cmp	r3, #4
  201572:	d00c      	beq.n	20158e <adc_lld_serve_rx_interrupt.lto_priv.44+0x10e>
  201574:	2320      	movs	r3, #32
  201576:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  20157a:	6963      	ldr	r3, [r4, #20]
  20157c:	2b00      	cmp	r3, #0
  20157e:	d0b2      	beq.n	2014e6 <adc_lld_serve_rx_interrupt.lto_priv.44+0x66>
    *trp = NULL;
  201580:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  201582:	4618      	mov	r0, r3
    *trp = NULL;
  201584:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
  201586:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  201588:	f7ff ff12 	bl	2013b0 <chSchReadyI>
  20158c:	e7ab      	b.n	2014e6 <adc_lld_serve_rx_interrupt.lto_priv.44+0x66>
  20158e:	2202      	movs	r2, #2
  201590:	2300      	movs	r3, #0
  201592:	7022      	strb	r2, [r4, #0]
  201594:	6123      	str	r3, [r4, #16]
  201596:	e7ed      	b.n	201574 <adc_lld_serve_rx_interrupt.lto_priv.44+0xf4>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201598:	2302      	movs	r3, #2
  20159a:	7023      	strb	r3, [r4, #0]
  20159c:	e794      	b.n	2014c8 <adc_lld_serve_rx_interrupt.lto_priv.44+0x48>
        _adc_isr_full_code(adcp);
  20159e:	6881      	ldr	r1, [r0, #8]
}
  2015a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  2015a4:	4718      	bx	r3
  2015a6:	bf00      	nop
	...

002015b0 <chThdExit>:
void chThdExit(msg_t msg) {
  2015b0:	b538      	push	{r3, r4, r5, lr}
  2015b2:	2220      	movs	r2, #32
  2015b4:	4603      	mov	r3, r0
  2015b6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  2015ba:	4a10      	ldr	r2, [pc, #64]	; (2015fc <chThdExit+0x4c>)
  2015bc:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  2015be:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  2015c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  2015c4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  2015c6:	4285      	cmp	r5, r0
  2015c8:	d006      	beq.n	2015d8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  2015ca:	6803      	ldr	r3, [r0, #0]
  2015cc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  2015ce:	f7ff feef 	bl	2013b0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  2015d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  2015d4:	42a8      	cmp	r0, r5
  2015d6:	d1f8      	bne.n	2015ca <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  2015d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  2015dc:	b943      	cbnz	r3, 2015f0 <chThdExit+0x40>
  2015de:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  2015e2:	079b      	lsls	r3, r3, #30
  2015e4:	d104      	bne.n	2015f0 <chThdExit+0x40>
    REG_REMOVE(tp);
  2015e6:	6922      	ldr	r2, [r4, #16]
  2015e8:	6963      	ldr	r3, [r4, #20]
  2015ea:	611a      	str	r2, [r3, #16]
  2015ec:	6922      	ldr	r2, [r4, #16]
  2015ee:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  2015f0:	200f      	movs	r0, #15
}
  2015f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  2015f6:	f7ff bbc3 	b.w	200d80 <chSchGoSleepS>
  2015fa:	bf00      	nop
  2015fc:	20000944 	.word	0x20000944

00201600 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201600:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201602:	4f12      	ldr	r7, [pc, #72]	; (20164c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201604:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201606:	4d12      	ldr	r5, [pc, #72]	; (201650 <__init_ram_areas+0x50>)
  201608:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20160c:	4c11      	ldr	r4, [pc, #68]	; (201654 <__init_ram_areas+0x54>)
  20160e:	4b12      	ldr	r3, [pc, #72]	; (201658 <__init_ram_areas+0x58>)
  201610:	4912      	ldr	r1, [pc, #72]	; (20165c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201612:	429c      	cmp	r4, r3
  201614:	d911      	bls.n	20163a <__init_ram_areas+0x3a>
  201616:	3904      	subs	r1, #4
  201618:	461a      	mov	r2, r3
      *p = *tp;
  20161a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20161e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201622:	4294      	cmp	r4, r2
  201624:	d8f9      	bhi.n	20161a <__init_ram_areas+0x1a>
  201626:	43da      	mvns	r2, r3
  201628:	4414      	add	r4, r2
  20162a:	f024 0403 	bic.w	r4, r4, #3
  20162e:	3404      	adds	r4, #4
  201630:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201632:	429d      	cmp	r5, r3
  201634:	d903      	bls.n	20163e <__init_ram_areas+0x3e>
      *p = 0;
  201636:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20163a:	429d      	cmp	r5, r3
  20163c:	d8fb      	bhi.n	201636 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20163e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201640:	4577      	cmp	r7, lr
  201642:	d202      	bcs.n	20164a <__init_ram_areas+0x4a>
  201644:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201648:	e7e3      	b.n	201612 <__init_ram_areas+0x12>
  20164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20164c:	08002590 	.word	0x08002590
  201650:	20020000 	.word	0x20020000
  201654:	20020000 	.word	0x20020000
  201658:	20020000 	.word	0x20020000
  20165c:	08002764 	.word	0x08002764

00201660 <__default_exit>:
void __default_exit(void) {
  201660:	e7fe      	b.n	201660 <__default_exit>
  201662:	bf00      	nop
	...

00201670 <__late_init>:
void __late_init(void) {}
  201670:	4770      	bx	lr
  201672:	bf00      	nop
	...

00201680 <__core_init>:
void __core_init(void) {
  201680:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201682:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201686:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20168a:	4c1b      	ldr	r4, [pc, #108]	; (2016f8 <__core_init+0x78>)
  20168c:	2200      	movs	r2, #0
  20168e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201692:	6963      	ldr	r3, [r4, #20]
  201694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201698:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20169a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20169e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2016a2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2016a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2016aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2016ae:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2016b2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2016b6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2016ba:	07b7      	lsls	r7, r6, #30
  2016bc:	015d      	lsls	r5, r3, #5
  2016be:	ea05 000e 	and.w	r0, r5, lr
  2016c2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2016c4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2016c6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2016ca:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2016cc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2016d0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2016d4:	1c53      	adds	r3, r2, #1
  2016d6:	d1f6      	bne.n	2016c6 <__core_init+0x46>
  2016d8:	3d20      	subs	r5, #32
    } while(sets--);
  2016da:	f115 0f20 	cmn.w	r5, #32
  2016de:	d1ee      	bne.n	2016be <__core_init+0x3e>
  2016e0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2016e4:	6963      	ldr	r3, [r4, #20]
  2016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2016ea:	6163      	str	r3, [r4, #20]
  2016ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2016f0:	f3bf 8f6f 	isb	sy
  2016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2016f6:	bf00      	nop
  2016f8:	e000ed00 	.word	0xe000ed00
  2016fc:	00000000 	.word	0x00000000

00201700 <adcerrorcallback>:
}

/*
 * ADC errors callback, should never happen.
 */
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
  201700:	4770      	bx	lr
  201702:	bf00      	nop
	...

00201710 <adccallback>:
{
  201710:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201712:	2320      	movs	r3, #32
  201714:	f383 8811 	msr	BASEPRI, r3
  chMBPostI( &test_mb, samples1[0]);    // send 1st ADC-value (channel 1)
  201718:	4c05      	ldr	r4, [pc, #20]	; (201730 <adccallback+0x20>)
  20171a:	8820      	ldrh	r0, [r4, #0]
  20171c:	f000 fd00 	bl	202120 <chMBPostI.constprop.31>
  chMBPostI( &test_mb, samples1[1]);    // send 2nd ADC-value (channel 2)
  201720:	8860      	ldrh	r0, [r4, #2]
  201722:	f000 fcfd 	bl	202120 <chMBPostI.constprop.31>
  201726:	2300      	movs	r3, #0
  201728:	f383 8811 	msr	BASEPRI, r3
  20172c:	bd10      	pop	{r4, pc}
  20172e:	bf00      	nop
  201730:	20000b3c 	.word	0x20000b3c
	...

00201740 <main>:
  tqp->next = (thread_t *)tqp;
  201740:	4c7e      	ldr	r4, [pc, #504]	; (20193c <main+0x1fc>)
  ch.rlist.prio = NOPRIO;
  201742:	2500      	movs	r5, #0
  ch.vtlist.delta = (systime_t)-1;
  201744:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  201748:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  20174c:	f104 031c 	add.w	r3, r4, #28
  tmp->cumulative = (rttime_t)0;
  201750:	2600      	movs	r6, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201752:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
/*===========================================================================*/
/* Application code.                                                         */
/*===========================================================================*/

int main(void)
{
  201756:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  20175a:	b087      	sub	sp, #28
  20175c:	2700      	movs	r7, #0
  20175e:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  201760:	4668      	mov	r0, sp
  tqp->prev = (thread_t *)tqp;
  201762:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  201764:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201766:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201768:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  20176a:	9200      	str	r2, [sp, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20176c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20176e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  201770:	60a5      	str	r5, [r4, #8]
  ch.vtlist.systime = (systime_t)0;
  201772:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201774:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  201776:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
  201778:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
  20177a:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
  20177c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  chTMStartMeasurementX(&tm);
  201780:	f000 fc7e 	bl	202080 <chTMStartMeasurementX.constprop.38>
  chTMStopMeasurementX(&tm);
  201784:	4668      	mov	r0, sp
  201786:	f7ff fc03 	bl	200f90 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20178a:	4b6d      	ldr	r3, [pc, #436]	; (201940 <main+0x200>)
  20178c:	496d      	ldr	r1, [pc, #436]	; (201944 <main+0x204>)
  tp->prio      = prio;
  20178e:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  201792:	4a6d      	ldr	r2, [pc, #436]	; (201948 <main+0x208>)
  REG_INSERT(tp);
  201794:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  201798:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20179a:	f103 0c10 	add.w	ip, r3, #16
  20179e:	496b      	ldr	r1, [pc, #428]	; (20194c <main+0x20c>)
  endmem  = __heap_end__;
  2017a0:	4f6b      	ldr	r7, [pc, #428]	; (201950 <main+0x210>)
  nextmem = __heap_base__;
  2017a2:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  2017a4:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  2017a6:	496b      	ldr	r1, [pc, #428]	; (201954 <main+0x214>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  2017a8:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  2017ac:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2017ae:	496a      	ldr	r1, [pc, #424]	; (201958 <main+0x218>)
  ch.tm.offset = tm.last;
  2017b0:	9802      	ldr	r0, [sp, #8]
  2017b2:	68cf      	ldr	r7, [r1, #12]
  2017b4:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2017b6:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  2017ba:	4868      	ldr	r0, [pc, #416]	; (20195c <main+0x21c>)
  tp->prio      = prio;
  2017bc:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  2017c0:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  2017c4:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2017c6:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 201988 <main+0x248>
  REG_INSERT(tp);
  2017ca:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  2017cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 20198c <main+0x24c>
  tp->epending  = (eventmask_t)0;
  2017d0:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  2017d2:	619d      	str	r5, [r3, #24]
  2017d4:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  2017d8:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  2017dc:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  2017e0:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  2017e2:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  2017e6:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  2017e8:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  2017ea:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  2017ee:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  2017f0:	f104 0758 	add.w	r7, r4, #88	; 0x58
  SCB->AIRCR =  reg_value;
  2017f4:	60c8      	str	r0, [r1, #12]
  2017f6:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  2017fa:	609d      	str	r5, [r3, #8]
  2017fc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  201800:	60dd      	str	r5, [r3, #12]
  201802:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201804:	61a6      	str	r6, [r4, #24]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201806:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  201808:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  20180c:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  201810:	4b53      	ldr	r3, [pc, #332]	; (201960 <main+0x220>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201812:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201814:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201818:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  20181c:	4851      	ldr	r0, [pc, #324]	; (201964 <main+0x224>)
  tqp->next = (thread_t *)tqp;
  20181e:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201820:	65e7      	str	r7, [r4, #92]	; 0x5c
  201822:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201826:	6818      	ldr	r0, [r3, #0]
  201828:	4310      	orrs	r0, r2
  20182a:	6018      	str	r0, [r3, #0]
  20182c:	f881 c01f 	strb.w	ip, [r1, #31]
  201830:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  201834:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  201838:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20183a:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  20183e:	4b4a      	ldr	r3, [pc, #296]	; (201968 <main+0x228>)
  tp->state     = CH_STATE_WTSTART;
  201840:	2602      	movs	r6, #2
  REG_INSERT(tp);
  201842:	6961      	ldr	r1, [r4, #20]
  tp->prio      = prio;
  201844:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201848:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  20184c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201850:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201854:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201858:	4a44      	ldr	r2, [pc, #272]	; (20196c <main+0x22c>)
  20185a:	f8df e134 	ldr.w	lr, [pc, #308]	; 201990 <main+0x250>
  20185e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201862:	4a43      	ldr	r2, [pc, #268]	; (201970 <main+0x230>)
  tp->state     = CH_STATE_WTSTART;
  201864:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201868:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  20186c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201870:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201874:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201878:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  20187c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  201880:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201884:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201886:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  20188a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  20188e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201892:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201896:	6108      	str	r0, [r1, #16]
  thread_t *otp = currp;
  201898:	69a2      	ldr	r2, [r4, #24]
  ntp->u.rdymsg = msg;
  20189a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  20189e:	6891      	ldr	r1, [r2, #8]
  2018a0:	6160      	str	r0, [r4, #20]
  2018a2:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  2018a6:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  2018aa:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  2018ae:	2900      	cmp	r1, #0
  2018b0:	f000 8328 	beq.w	201f04 <main+0x7c4>
  tp->state = CH_STATE_READY;
  2018b4:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  2018b8:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  2018ba:	68a1      	ldr	r1, [r4, #8]
  2018bc:	2900      	cmp	r1, #0
  2018be:	d1fb      	bne.n	2018b8 <main+0x178>
  tp->queue.next             = cp;
  2018c0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  2018c4:	6862      	ldr	r2, [r4, #4]
  2018c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  2018ca:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2018cc:	6060      	str	r0, [r4, #4]
  2018ce:	f381 8811 	msr	BASEPRI, r1
  rccResetAHB1(~0);
  2018d2:	4b28      	ldr	r3, [pc, #160]	; (201974 <main+0x234>)
  2018d4:	f04f 32ff 	mov.w	r2, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  2018d8:	4c27      	ldr	r4, [pc, #156]	; (201978 <main+0x238>)
  rccResetAHB1(~0);
  2018da:	6918      	ldr	r0, [r3, #16]
  2018dc:	611a      	str	r2, [r3, #16]
  2018de:	6119      	str	r1, [r3, #16]
  rccResetAHB2(~0);
  2018e0:	6958      	ldr	r0, [r3, #20]
  2018e2:	615a      	str	r2, [r3, #20]
  2018e4:	6159      	str	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2018e6:	6a18      	ldr	r0, [r3, #32]
  2018e8:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  2018ec:	6218      	str	r0, [r3, #32]
  2018ee:	6219      	str	r1, [r3, #32]
  rccResetAPB2(~0);
  2018f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2018f2:	625a      	str	r2, [r3, #36]	; 0x24
  2018f4:	6259      	str	r1, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2018f6:	6822      	ldr	r2, [r4, #0]
  2018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  2018fc:	6022      	str	r2, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2018fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  201900:	f402 7240 	and.w	r2, r2, #768	; 0x300
  201904:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  201908:	d003      	beq.n	201912 <main+0x1d2>
    RCC->BDCR = RCC_BDCR_BDRST;
  20190a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  20190e:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201910:	6719      	str	r1, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201912:	4b18      	ldr	r3, [pc, #96]	; (201974 <main+0x234>)
  201914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201916:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201918:	f042 0219 	orr.w	r2, r2, #25
  20191c:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  20191e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201920:	079b      	lsls	r3, r3, #30
  201922:	d5fc      	bpl.n	20191e <main+0x1de>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201924:	4d14      	ldr	r5, [pc, #80]	; (201978 <main+0x238>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  201926:	2400      	movs	r4, #0
  201928:	4814      	ldr	r0, [pc, #80]	; (20197c <main+0x23c>)
  20192a:	686a      	ldr	r2, [r5, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  20192c:	4623      	mov	r3, r4
  dma_streams_mask = 0U;
  20192e:	4e14      	ldr	r6, [pc, #80]	; (201980 <main+0x240>)
  201930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  201934:	606a      	str	r2, [r5, #4]
  201936:	4a13      	ldr	r2, [pc, #76]	; (201984 <main+0x244>)
  201938:	6014      	str	r4, [r2, #0]
  20193a:	e02d      	b.n	201998 <main+0x258>
  20193c:	20000944 	.word	0x20000944
  201940:	20000a90 	.word	0x20000a90
  201944:	00200b41 	.word	0x00200b41
  201948:	20000b38 	.word	0x20000b38
  20194c:	20020000 	.word	0x20020000
  201950:	20080000 	.word	0x20080000
  201954:	20000b34 	.word	0x20000b34
  201958:	e000ed00 	.word	0xe000ed00
  20195c:	05fa0300 	.word	0x05fa0300
  201960:	e0001000 	.word	0xe0001000
  201964:	c5acce55 	.word	0xc5acce55
  201968:	200009b8 	.word	0x200009b8
  20196c:	002002e5 	.word	0x002002e5
  201970:	08002720 	.word	0x08002720
  201974:	40023800 	.word	0x40023800
  201978:	40007000 	.word	0x40007000
  20197c:	0800261c 	.word	0x0800261c
  201980:	40026010 	.word	0x40026010
  201984:	20000b30 	.word	0x20000b30
  201988:	e000edf0 	.word	0xe000edf0
  20198c:	080026f8 	.word	0x080026f8
  201990:	00200c01 	.word	0x00200c01
  201994:	f850 6c0c 	ldr.w	r6, [r0, #-12]
    dma_isr_redir[i].dma_func = NULL;
  201998:	4ac8      	ldr	r2, [pc, #800]	; (201cbc <main+0x57c>)
  20199a:	300c      	adds	r0, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  20199c:	6033      	str	r3, [r6, #0]
    dma_isr_redir[i].dma_func = NULL;
  20199e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  2019a2:	3101      	adds	r1, #1
  2019a4:	2910      	cmp	r1, #16
  2019a6:	d1f5      	bne.n	201994 <main+0x254>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  2019a8:	f04f 35ff 	mov.w	r5, #4294967295
  2019ac:	4fc4      	ldr	r7, [pc, #784]	; (201cc0 <main+0x580>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  2019ae:	4ac5      	ldr	r2, [pc, #788]	; (201cc4 <main+0x584>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2019b0:	f240 74ff 	movw	r4, #2047	; 0x7ff
  DMA1->LIFCR = 0xFFFFFFFFU;
  2019b4:	60bd      	str	r5, [r7, #8]
  gpiop->ODR     = config->odr;
  2019b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->HIFCR = 0xFFFFFFFFU;
  2019ba:	60fd      	str	r5, [r7, #12]
  2019bc:	f64b 7e7e 	movw	lr, #49022	; 0xbf7e
  DMA2->LIFCR = 0xFFFFFFFFU;
  2019c0:	6095      	str	r5, [r2, #8]
  gpiop->AFRH    = config->afrh;
  2019c2:	f44f 0730 	mov.w	r7, #11534336	; 0xb00000
  DMA2->HIFCR = 0xFFFFFFFFU;
  2019c6:	60d5      	str	r5, [r2, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2019c8:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00
  2019cc:	4ebe      	ldr	r6, [pc, #760]	; (201cc8 <main+0x588>)
  gpiop->OSPEEDR = config->ospeedr;
  2019ce:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2019d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  2019d4:	f8df b368 	ldr.w	fp, [pc, #872]	; 201d40 <main+0x600>
  2019d8:	4322      	orrs	r2, r4
  iqp->q_buffer  = bp;
  2019da:	f8df 8368 	ldr.w	r8, [pc, #872]	; 201d44 <main+0x604>
  2019de:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2019e0:	6d32      	ldr	r2, [r6, #80]	; 0x50
  2019e2:	ea42 0c04 	orr.w	ip, r2, r4
  gpiop->OTYPER  = config->otyper;
  2019e6:	4cb9      	ldr	r4, [pc, #740]	; (201ccc <main+0x58c>)
  sdp->vmt = &vmt;
  2019e8:	4ab9      	ldr	r2, [pc, #740]	; (201cd0 <main+0x590>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2019ea:	f8c6 c050 	str.w	ip, [r6, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
  2019ee:	260f      	movs	r6, #15
  gpiop->PUPDR   = config->pupdr;
  2019f0:	f8df c354 	ldr.w	ip, [pc, #852]	; 201d48 <main+0x608>
  gpiop->OTYPER  = config->otyper;
  2019f4:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2019f6:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2019f8:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->AFRL    = config->afrl;
  2019fc:	f8df c34c 	ldr.w	ip, [pc, #844]	; 201d4c <main+0x60c>
  gpiop->ODR     = config->odr;
  201a00:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201a02:	f8c4 c020 	str.w	ip, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201a06:	f8df c348 	ldr.w	ip, [pc, #840]	; 201d50 <main+0x610>
  201a0a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201a0e:	f8df c344 	ldr.w	ip, [pc, #836]	; 201d54 <main+0x614>
  201a12:	f8c4 c000 	str.w	ip, [r4]
  gpiop->OTYPER  = config->otyper;
  201a16:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201a1a:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201a1e:	f105 458a 	add.w	r5, r5, #1157627904	; 0x45000000
  oqp->q_buffer  = bp;
  201a22:	f8df c334 	ldr.w	ip, [pc, #820]	; 201d58 <main+0x618>
  201a26:	f105 1555 	add.w	r5, r5, #5570645	; 0x550055
  201a2a:	f505 55a8 	add.w	r5, r5, #5376	; 0x1500
  201a2e:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  201a32:	4da8      	ldr	r5, [pc, #672]	; (201cd4 <main+0x594>)
  gpiop->ODR     = config->odr;
  201a34:	f8c4 e414 	str.w	lr, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201a38:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201a3c:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201a40:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201a44:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->PUPDR   = config->pupdr;
  201a48:	4fa3      	ldr	r7, [pc, #652]	; (201cd8 <main+0x598>)
  201a4a:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
  201a4e:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201a50:	f8c4 9008 	str.w	r9, [r4, #8]
  gpiop->MODER   = config->moder;
  201a54:	f04f 6908 	mov.w	r9, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  201a58:	60e7      	str	r7, [r4, #12]
  gpiop->AFRL    = config->afrl;
  201a5a:	4fa0      	ldr	r7, [pc, #640]	; (201cdc <main+0x59c>)
  gpiop->ODR     = config->odr;
  201a5c:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201a5e:	6227      	str	r7, [r4, #32]
  gpiop->MODER   = config->moder;
  201a60:	f640 2708 	movw	r7, #2568	; 0xa08
  gpiop->AFRH    = config->afrh;
  201a64:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201a66:	6027      	str	r7, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201a68:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  201a6c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201a70:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201a74:	4f9a      	ldr	r7, [pc, #616]	; (201ce0 <main+0x5a0>)
  201a76:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 201d5c <main+0x61c>
  201a7a:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  201a7e:	2777      	movs	r7, #119	; 0x77
  gpiop->ODR     = config->odr;
  201a80:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201a84:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201a88:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201a8c:	f44f 2720 	mov.w	r7, #655360	; 0xa0000
  201a90:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  201a94:	4f93      	ldr	r7, [pc, #588]	; (201ce4 <main+0x5a4>)
  gpiop->OTYPER  = config->otyper;
  201a96:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201a9a:	f8c4 7808 	str.w	r7, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201a9e:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  201aa2:	4f91      	ldr	r7, [pc, #580]	; (201ce8 <main+0x5a8>)
  gpiop->ODR     = config->odr;
  201aa4:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  201aa8:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201aac:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201ab0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  201ab4:	4c8d      	ldr	r4, [pc, #564]	; (201cec <main+0x5ac>)
  gpiop->OTYPER  = config->otyper;
  201ab6:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201ab8:	60bc      	str	r4, [r7, #8]
  gpiop->OTYPER  = config->otyper;
  201aba:	4c8d      	ldr	r4, [pc, #564]	; (201cf0 <main+0x5b0>)
  gpiop->PUPDR   = config->pupdr;
  201abc:	60fd      	str	r5, [r7, #12]
  gpiop->ODR     = config->odr;
  201abe:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
  201ac0:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
  201ac2:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201ac4:	603b      	str	r3, [r7, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201ac6:	4f8b      	ldr	r7, [pc, #556]	; (201cf4 <main+0x5b4>)
  gpiop->OTYPER  = config->otyper;
  201ac8:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201aca:	60a7      	str	r7, [r4, #8]
  201acc:	2701      	movs	r7, #1
  gpiop->PUPDR   = config->pupdr;
  201ace:	f8c4 e00c 	str.w	lr, [r4, #12]
  gpiop->AFRH    = config->afrh;
  201ad2:	f8df e28c 	ldr.w	lr, [pc, #652]	; 201d60 <main+0x620>
  gpiop->ODR     = config->odr;
  201ad6:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201ad8:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201ada:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201ade:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  gpiop->MODER   = config->moder;
  201ae2:	f8c4 9000 	str.w	r9, [r4]
  gpiop->PUPDR   = config->pupdr;
  201ae6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 201d64 <main+0x624>
  gpiop->OTYPER  = config->otyper;
  201aea:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201aee:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  tqp->next = (thread_t *)tqp;
  201af2:	f10b 0618 	add.w	r6, fp, #24
  gpiop->PUPDR   = config->pupdr;
  201af6:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  iqp->q_top     = bp + size;
  201afa:	f108 0910 	add.w	r9, r8, #16
  gpiop->ODR     = config->odr;
  201afe:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201b02:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201b06:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201b0a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201b0e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  201b12:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201b14:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201b16:	60e5      	str	r5, [r4, #12]
  adcp->config   = NULL;
  201b18:	f8cb 3004 	str.w	r3, [fp, #4]
  gpiop->ODR     = config->odr;
  201b1c:	6160      	str	r0, [r4, #20]
  adcp->samples  = NULL;
  201b1e:	f8cb 3008 	str.w	r3, [fp, #8]
  gpiop->AFRL    = config->afrl;
  201b22:	6223      	str	r3, [r4, #32]
  adcp->depth    = 0;
  201b24:	f8cb 300c 	str.w	r3, [fp, #12]
  gpiop->AFRH    = config->afrh;
  201b28:	6263      	str	r3, [r4, #36]	; 0x24
  adcp->grpp     = NULL;
  201b2a:	f8cb 3010 	str.w	r3, [fp, #16]
  gpiop->MODER   = config->moder;
  201b2e:	6023      	str	r3, [r4, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  201b30:	f8cb 3014 	str.w	r3, [fp, #20]
  gpiop->OTYPER  = config->otyper;
  201b34:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  201b38:	f8cb 3020 	str.w	r3, [fp, #32]
  gpiop->OSPEEDR = config->ospeedr;
  201b3c:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  201b40:	f8cb 6018 	str.w	r6, [fp, #24]
  gpiop->PUPDR   = config->pupdr;
  201b44:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  201b48:	f8cb 601c 	str.w	r6, [fp, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201b4c:	f04f 0660 	mov.w	r6, #96	; 0x60
  gpiop->ODR     = config->odr;
  201b50:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201b54:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201b58:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201b5c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201b60:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201b64:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201b68:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  201b6c:	4615      	mov	r5, r2
  gpiop->ODR     = config->odr;
  201b6e:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  ADCD1.adc = ADC1;
  201b72:	4861      	ldr	r0, [pc, #388]	; (201cf8 <main+0x5b8>)
  gpiop->AFRL    = config->afrl;
  201b74:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201b78:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201b7c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  tqp->next = (thread_t *)tqp;
  201b80:	f102 040c 	add.w	r4, r2, #12
  201b84:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  201b88:	485c      	ldr	r0, [pc, #368]	; (201cfc <main+0x5bc>)
  adcp->state    = ADC_STOP;
  201b8a:	f88b 7000 	strb.w	r7, [fp]
  201b8e:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  201b92:	485b      	ldr	r0, [pc, #364]	; (201d00 <main+0x5c0>)
  201b94:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
  201b98:	485a      	ldr	r0, [pc, #360]	; (201d04 <main+0x5c4>)
  201b9a:	f880 6312 	strb.w	r6, [r0, #786]	; 0x312
  oqp->q_top     = bp + size;
  201b9e:	f10c 0610 	add.w	r6, ip, #16
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201ba2:	f8c0 e180 	str.w	lr, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201ba6:	f8c0 e000 	str.w	lr, [r0]
  oqp->q_buffer  = bp;
  201baa:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  201bae:	f8c2 c048 	str.w	ip, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  201bb2:	f8c2 c044 	str.w	ip, [r2, #68]	; 0x44
  oqp->q_notify  = onfy;
  201bb6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 201d68 <main+0x628>
  iqp->q_counter = 0;
  201bba:	6153      	str	r3, [r2, #20]
  oqp->q_notify  = onfy;
  201bbc:	f8c2 c04c 	str.w	ip, [r2, #76]	; 0x4c
  oqp->q_counter = size;
  201bc0:	6391      	str	r1, [r2, #56]	; 0x38
  201bc2:	f102 0130 	add.w	r1, r2, #48	; 0x30
  201bc6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 201d6c <main+0x62c>
  201bca:	60d4      	str	r4, [r2, #12]
  201bcc:	f845 cb04 	str.w	ip, [r5], #4
  tqp->prev = (thread_t *)tqp;
  201bd0:	6114      	str	r4, [r2, #16]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  201bd2:	6055      	str	r5, [r2, #4]
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  201bd4:	4c4c      	ldr	r4, [pc, #304]	; (201d08 <main+0x5c8>)
  GPTD4.tim = STM32_TIM4;
  201bd6:	4d4d      	ldr	r5, [pc, #308]	; (201d0c <main+0x5cc>)
  tqp->next = (thread_t *)tqp;
  201bd8:	6311      	str	r1, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  201bda:	6351      	str	r1, [r2, #52]	; 0x34
  201bdc:	494c      	ldr	r1, [pc, #304]	; (201d10 <main+0x5d0>)
  201bde:	7027      	strb	r7, [r4, #0]
  extp->config = NULL;
  201be0:	6063      	str	r3, [r4, #4]
  201be2:	60e9      	str	r1, [r5, #12]
  ICUD8.tim = STM32_TIM8;
  201be4:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
  201be8:	4c4a      	ldr	r4, [pc, #296]	; (201d14 <main+0x5d4>)
  sdp->state = SD_STOP;
  201bea:	7217      	strb	r7, [r2, #8]
  201bec:	60e1      	str	r1, [r4, #12]
  201bee:	494a      	ldr	r1, [pc, #296]	; (201d18 <main+0x5d8>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  201bf0:	702f      	strb	r7, [r5, #0]
  201bf2:	7027      	strb	r7, [r4, #0]
  201bf4:	700f      	strb	r7, [r1, #0]
  ICUD9.tim = STM32_TIM9;
  201bf6:	4f49      	ldr	r7, [pc, #292]	; (201d1c <main+0x5dc>)
  iqp->q_buffer  = bp;
  201bf8:	f8c2 8018 	str.w	r8, [r2, #24]
  iqp->q_rdptr   = bp;
  201bfc:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  201c00:	f8c2 8020 	str.w	r8, [r2, #32]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201c04:	f04f 08c0 	mov.w	r8, #192	; 0xc0
  icup->config = NULL;
  201c08:	604b      	str	r3, [r1, #4]
  201c0a:	60cf      	str	r7, [r1, #12]

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  201c0c:	4944      	ldr	r1, [pc, #272]	; (201d20 <main+0x5e0>)
  SD7.clock = STM32_UART7CLK;
  201c0e:	4f45      	ldr	r7, [pc, #276]	; (201d24 <main+0x5e4>)
  iqp->q_notify  = infy;
  201c10:	6293      	str	r3, [r2, #40]	; 0x28
  iqp->q_top     = bp + size;
  201c12:	f8c2 901c 	str.w	r9, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  201c16:	f04f 0980 	mov.w	r9, #128	; 0x80
  gptp->config = NULL;
  201c1a:	606b      	str	r3, [r5, #4]
  201c1c:	6063      	str	r3, [r4, #4]
  201c1e:	2420      	movs	r4, #32
  iqp->q_link    = link;
  201c20:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_top     = bp + size;
  201c22:	6416      	str	r6, [r2, #64]	; 0x40
  oqp->q_link    = link;
  201c24:	6512      	str	r2, [r2, #80]	; 0x50
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201c26:	f880 8352 	strb.w	r8, [r0, #850]	; 0x352
  SD7.usart = UART7;
  201c2a:	6551      	str	r1, [r2, #84]	; 0x54
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201c2c:	f8c0 e188 	str.w	lr, [r0, #392]	; 0x188
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  201c30:	493d      	ldr	r1, [pc, #244]	; (201d28 <main+0x5e8>)
  SD7.clock = STM32_UART7CLK;
  201c32:	6597      	str	r7, [r2, #88]	; 0x58
  201c34:	4f3d      	ldr	r7, [pc, #244]	; (201d2c <main+0x5ec>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201c36:	f8c0 e008 	str.w	lr, [r0, #8]
  201c3a:	604f      	str	r7, [r1, #4]
  SysTick->VAL = 0;
  201c3c:	608b      	str	r3, [r1, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  201c3e:	2307      	movs	r3, #7
  201c40:	600b      	str	r3, [r1, #0]
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  201c42:	f880 9c23 	strb.w	r9, [r0, #3107]	; 0xc23
  201c46:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  201c4a:	7a13      	ldrb	r3, [r2, #8]
  201c4c:	2b01      	cmp	r3, #1
  201c4e:	d105      	bne.n	201c5c <main+0x51c>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  201c50:	4b1d      	ldr	r3, [pc, #116]	; (201cc8 <main+0x588>)
  201c52:	491d      	ldr	r1, [pc, #116]	; (201cc8 <main+0x588>)
  201c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  201c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  201c5a:	640b      	str	r3, [r1, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201c5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
  201c5e:	f04f 30ff 	mov.w	r0, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201c62:	4933      	ldr	r1, [pc, #204]	; (201d30 <main+0x5f0>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201c64:	f244 0640 	movw	r6, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201c68:	2401      	movs	r4, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201c6a:	f240 172d 	movw	r7, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201c6e:	fba1 3103 	umull	r3, r1, r1, r3
  USART_TypeDef *u = sdp->usart;
  201c72:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  201c74:	0c89      	lsrs	r1, r1, #18
  201c76:	60d9      	str	r1, [r3, #12]
  sdp->state = SD_READY;
  201c78:	2102      	movs	r1, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  201c7a:	605e      	str	r6, [r3, #4]
  201c7c:	2600      	movs	r6, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
  201c7e:	609c      	str	r4, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  201c80:	601f      	str	r7, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  201c82:	6218      	str	r0, [r3, #32]
  201c84:	7211      	strb	r1, [r2, #8]
    sdp->rxmask = 0xFF;
  201c86:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  201c8a:	f386 8811 	msr	BASEPRI, r6
    chSysInit();            // core function init
    halInit();              // hal init

    // Serial driver
    sdStart( &SD7, &sdcfg );
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  201c8e:	f240 4202 	movw	r2, #1026	; 0x402
  201c92:	f44f 7180 	mov.w	r1, #256	; 0x100
  201c96:	4827      	ldr	r0, [pc, #156]	; (201d34 <main+0x5f4>)
  201c98:	f7ff f902 	bl	200ea0 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  201c9c:	f240 4202 	movw	r2, #1026	; 0x402
  201ca0:	2180      	movs	r1, #128	; 0x80
  201ca2:	4824      	ldr	r0, [pc, #144]	; (201d34 <main+0x5f4>)
  201ca4:	f7ff f8fc 	bl	200ea0 <_pal_lld_setgroupmode>
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
  201ca8:	4c23      	ldr	r4, [pc, #140]	; (201d38 <main+0x5f8>)
  201caa:	4b24      	ldr	r3, [pc, #144]	; (201d3c <main+0x5fc>)
  201cac:	2020      	movs	r0, #32
  tqp->next = (thread_t *)tqp;
  201cae:	f104 0118 	add.w	r1, r4, #24
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (cnt_t)0;
  201cb2:	6126      	str	r6, [r4, #16]
  201cb4:	1822      	adds	r2, r4, r0
  mbp->top    = &buf[n];
  201cb6:	f103 07c8 	add.w	r7, r3, #200	; 0xc8
  201cba:	e059      	b.n	201d70 <main+0x630>
  201cbc:	20000ab0 	.word	0x20000ab0
  201cc0:	40026000 	.word	0x40026000
  201cc4:	40026400 	.word	0x40026400
  201cc8:	40023800 	.word	0x40023800
  201ccc:	40020000 	.word	0x40020000
  201cd0:	20000b60 	.word	0x20000b60
  201cd4:	18004001 	.word	0x18004001
  201cd8:	01555051 	.word	0x01555051
  201cdc:	00bb00b0 	.word	0x00bb00b0
  201ce0:	55505555 	.word	0x55505555
  201ce4:	cffffff3 	.word	0xcffffff3
  201ce8:	40021400 	.word	0x40021400
  201cec:	003fcfff 	.word	0x003fcfff
  201cf0:	40021800 	.word	0x40021800
  201cf4:	3cccf000 	.word	0x3cccf000
  201cf8:	40012000 	.word	0x40012000
  201cfc:	080026a0 	.word	0x080026a0
  201d00:	00022c16 	.word	0x00022c16
  201d04:	e000e100 	.word	0xe000e100
  201d08:	20000834 	.word	0x20000834
  201d0c:	2000083c 	.word	0x2000083c
  201d10:	40000800 	.word	0x40000800
  201d14:	2000084c 	.word	0x2000084c
  201d18:	20000864 	.word	0x20000864
  201d1c:	40014000 	.word	0x40014000
  201d20:	40007800 	.word	0x40007800
  201d24:	0337f980 	.word	0x0337f980
  201d28:	e000e010 	.word	0xe000e010
  201d2c:	00034bbf 	.word	0x00034bbf
  201d30:	91a2b3c5 	.word	0x91a2b3c5
  201d34:	40021000 	.word	0x40021000
  201d38:	20000bc0 	.word	0x20000bc0
  201d3c:	2000087c 	.word	0x2000087c
  201d40:	20000800 	.word	0x20000800
  201d44:	20000b40 	.word	0x20000b40
  201d48:	40005551 	.word	0x40005551
  201d4c:	b0000bb0 	.word	0xb0000bb0
  201d50:	000aaa0a 	.word	0x000aaa0a
  201d54:	2aae8028 	.word	0x2aae8028
  201d58:	20000b50 	.word	0x20000b50
  201d5c:	51155555 	.word	0x51155555
  201d60:	00b0b000 	.word	0x00b0b000
  201d64:	55555550 	.word	0x55555550
  201d68:	00200301 	.word	0x00200301
  201d6c:	0800273c 	.word	0x0800273c
  mbp->reset  = false;
  201d70:	7526      	strb	r6, [r4, #20]
  mbp->buffer = buf;
  201d72:	6023      	str	r3, [r4, #0]
  mbp->rdptr  = buf;
  201d74:	60e3      	str	r3, [r4, #12]
  mbp->wrptr  = buf;
  201d76:	60a3      	str	r3, [r4, #8]
  mbp->top    = &buf[n];
  201d78:	6067      	str	r7, [r4, #4]
  201d7a:	61a1      	str	r1, [r4, #24]
  tqp->prev = (thread_t *)tqp;
  201d7c:	61e1      	str	r1, [r4, #28]
  tqp->next = (thread_t *)tqp;
  201d7e:	6222      	str	r2, [r4, #32]
  tqp->prev = (thread_t *)tqp;
  201d80:	6262      	str	r2, [r4, #36]	; 0x24
  201d82:	f380 8811 	msr	BASEPRI, r0
  if (gptp->state == GPT_STOP) {
  201d86:	782b      	ldrb	r3, [r5, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  201d88:	4aa7      	ldr	r2, [pc, #668]	; (202028 <main+0x8e8>)
  201d8a:	2b01      	cmp	r3, #1
  201d8c:	606a      	str	r2, [r5, #4]
  201d8e:	f000 8132 	beq.w	201ff6 <main+0x8b6>
  201d92:	68ab      	ldr	r3, [r5, #8]
  201d94:	4aa5      	ldr	r2, [pc, #660]	; (20202c <main+0x8ec>)
  201d96:	095b      	lsrs	r3, r3, #5
  201d98:	fba2 2303 	umull	r2, r3, r2, r3
  201d9c:	09db      	lsrs	r3, r3, #7
  201d9e:	3b01      	subs	r3, #1
  201da0:	b29b      	uxth	r3, r3
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201da2:	68e9      	ldr	r1, [r5, #12]
  201da4:	2200      	movs	r2, #0
  gptp->tim->CR2 = gptp->config->cr2;
  201da6:	2020      	movs	r0, #32
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  201da8:	2602      	movs	r6, #2
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201daa:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  201dac:	6048      	str	r0, [r1, #4]
  201dae:	702e      	strb	r6, [r5, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  201db0:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201db2:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  201db4:	60ca      	str	r2, [r1, #12]
  201db6:	f382 8811 	msr	BASEPRI, r2

    /*
     * Fixed an errata on the STM32F7xx, the DAC clock is required for ADC
     * triggering.
     */
    rccEnableDAC1(false);       // ???
  201dba:	499d      	ldr	r1, [pc, #628]	; (202030 <main+0x8f0>)
  201dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  201dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  201dc2:	640b      	str	r3, [r1, #64]	; 0x40
  201dc4:	f380 8811 	msr	BASEPRI, r0
  if (adcp->state == ADC_STOP) {
  201dc8:	f89b 3000 	ldrb.w	r3, [fp]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  201dcc:	f8cb 2004 	str.w	r2, [fp, #4]
  201dd0:	2b01      	cmp	r3, #1
  201dd2:	f000 80af 	beq.w	201f34 <main+0x7f4>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
  201dd6:	f04f 0802 	mov.w	r8, #2
  201dda:	2600      	movs	r6, #0
  201ddc:	f88b 8000 	strb.w	r8, [fp]
  201de0:	f386 8811 	msr	BASEPRI, r6

    // ADC driver
    adcStart(&ADCD1, NULL);
    palSetLineMode( LINE_ADC123_IN10, PAL_MODE_INPUT_ANALOG );  // PC0
  201de4:	2203      	movs	r2, #3
  201de6:	2101      	movs	r1, #1
  201de8:	4892      	ldr	r0, [pc, #584]	; (202034 <main+0x8f4>)
  201dea:	f7ff f859 	bl	200ea0 <_pal_lld_setgroupmode>
    palSetLineMode( LINE_ADC123_IN3, PAL_MODE_INPUT_ANALOG );   // PA3
  201dee:	2203      	movs	r2, #3
  201df0:	2108      	movs	r1, #8
  201df2:	4891      	ldr	r0, [pc, #580]	; (202038 <main+0x8f8>)
  201df4:	f7ff f854 	bl	200ea0 <_pal_lld_setgroupmode>
  201df8:	f04f 0e20 	mov.w	lr, #32
  201dfc:	f38e 8811 	msr	BASEPRI, lr
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  201e00:	2703      	movs	r7, #3
  mode = adcp->dmamode;
  201e02:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  201e06:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
  adcp->depth    = depth;
  201e0a:	2001      	movs	r0, #1
  adcp->grpp     = grpp;
  201e0c:	498b      	ldr	r1, [pc, #556]	; (20203c <main+0x8fc>)
    mode |= STM32_DMA_CR_CIRC;
  201e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  adcp->state    = ADC_ACTIVE;
  201e12:	f88b 7000 	strb.w	r7, [fp]
  adcp->adc->SMPR1 = grpp->smpr1;
  201e16:	f04f 0906 	mov.w	r9, #6
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  201e1a:	6812      	ldr	r2, [r2, #0]
  adcp->adc->SMPR2 = grpp->smpr2;
  201e1c:	f44f 6c40 	mov.w	ip, #3072	; 0xc00
  adcp->grpp     = grpp;
  201e20:	f8cb 1010 	str.w	r1, [fp, #16]
  adcp->samples  = samples;
  201e24:	4986      	ldr	r1, [pc, #536]	; (202040 <main+0x900>)
  adcp->depth    = depth;
  201e26:	f8cb 000c 	str.w	r0, [fp, #12]
  adcp->samples  = samples;
  201e2a:	f8cb 1008 	str.w	r1, [fp, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  201e2e:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  201e30:	f8c2 8004 	str.w	r8, [r2, #4]
  adcp->adc->SQR3  = grpp->sqr3;
  201e34:	f240 1843 	movw	r8, #323	; 0x143
  dmaStreamSetMode(adcp->dmastp, mode);
  201e38:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
  201e3a:	6811      	ldr	r1, [r2, #0]
  adcp->adc->SR    = 0;
  201e3c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
  201e40:	4301      	orrs	r1, r0
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  201e42:	f8df b224 	ldr.w	fp, [pc, #548]	; 202068 <main+0x928>
  dmaStreamEnable(adcp->dmastp);
  201e46:	6011      	str	r1, [r2, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  201e48:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    adcp->adc->CR2 = cr2;
  201e4c:	4a7d      	ldr	r2, [pc, #500]	; (202044 <main+0x904>)
  adcp->adc->SR    = 0;
  201e4e:	601e      	str	r6, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  201e50:	f8c3 900c 	str.w	r9, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  201e54:	f8c3 c010 	str.w	ip, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  201e58:	62d9      	str	r1, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  201e5a:	631e      	str	r6, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  201e5c:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  201e60:	f8c3 b004 	str.w	fp, [r3, #4]
    adcp->adc->CR2 = cr2;
  201e64:	609a      	str	r2, [r3, #8]
  201e66:	f386 8811 	msr	BASEPRI, r6
  201e6a:	f38e 8811 	msr	BASEPRI, lr
  if (NULL != gptp->config->callback)
  201e6e:	686a      	ldr	r2, [r5, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  201e70:	f242 7110 	movw	r1, #10000	; 0x2710
  201e74:	68eb      	ldr	r3, [r5, #12]
  if (NULL != gptp->config->callback)
  201e76:	6852      	ldr	r2, [r2, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  201e78:	702f      	strb	r7, [r5, #0]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  201e7a:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  201e7c:	6158      	str	r0, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  201e7e:	625e      	str	r6, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201e80:	611e      	str	r6, [r3, #16]
  if (NULL != gptp->config->callback)
  201e82:	b112      	cbz	r2, 201e8a <main+0x74a>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  201e84:	68da      	ldr	r2, [r3, #12]
  201e86:	4302      	orrs	r2, r0
  201e88:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  201e8a:	2285      	movs	r2, #133	; 0x85
  201e8c:	2600      	movs	r6, #0
  201e8e:	601a      	str	r2, [r3, #0]
  201e90:	f386 8811 	msr	BASEPRI, r6
  201e94:	2520      	movs	r5, #32
        mbp->rdptr = mbp->buffer;
      }
      mbp->cnt--;

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201e96:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 20206c <main+0x92c>
  201e9a:	e009      	b.n	201eb0 <main+0x770>
  201e9c:	f382 8811 	msr	BASEPRI, r2
  201ea0:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  201ea4:	210a      	movs	r1, #10
  201ea6:	2008      	movs	r0, #8
  201ea8:	f7ff f8ca 	bl	201040 <chSchGoSleepTimeoutS>
  201eac:	f386 8811 	msr	BASEPRI, r6
  201eb0:	f385 8811 	msr	BASEPRI, r5
    if (mbp->reset) {
  201eb4:	7d22      	ldrb	r2, [r4, #20]
  201eb6:	2a00      	cmp	r2, #0
  201eb8:	d139      	bne.n	201f2e <main+0x7ee>
  201eba:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
  201ebc:	2b00      	cmp	r3, #0
  201ebe:	dded      	ble.n	201e9c <main+0x75c>
      *msgp = *mbp->rdptr++;
  201ec0:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
  201ec2:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
  201ec4:	1d0a      	adds	r2, r1, #4
  201ec6:	680f      	ldr	r7, [r1, #0]
      if (mbp->rdptr >= mbp->top) {
  201ec8:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
  201eca:	60e2      	str	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
  201ecc:	d301      	bcc.n	201ed2 <main+0x792>
        mbp->rdptr = mbp->buffer;
  201ece:	6822      	ldr	r2, [r4, #0]
  201ed0:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
  201ed2:	3b01      	subs	r3, #1
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201ed4:	4640      	mov	r0, r8
      mbp->cnt--;
  201ed6:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201ed8:	f000 f8da 	bl	202090 <chThdDequeueNextI.constprop.35>
      chSchRescheduleS();
  201edc:	f7ff f8a0 	bl	201020 <chSchRescheduleS>
  201ee0:	f386 8811 	msr	BASEPRI, r6
  201ee4:	f385 8811 	msr	BASEPRI, r5
    if (mbp->reset) {
  201ee8:	7d23      	ldrb	r3, [r4, #20]
  201eea:	b913      	cbnz	r3, 201ef2 <main+0x7b2>
  201eec:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
  201eee:	2b00      	cmp	r3, #0
  201ef0:	dc0b      	bgt.n	201f0a <main+0x7ca>
  201ef2:	f386 8811 	msr	BASEPRI, r6
    while (true)
    {
        if ( chMBFetch(&test_mb, &msg1, TIME_IMMEDIATE) == MSG_OK ) // get the 1st ADC value
        {
          chMBFetch(&test_mb, &msg2, TIME_IMMEDIATE);       // get the 2nd ADC value
          chprintf(((BaseSequentialStream *)&SD7), "ADC values: %d %d\n", msg1, msg2);
  201ef6:	4954      	ldr	r1, [pc, #336]	; (202048 <main+0x908>)
  201ef8:	463a      	mov	r2, r7
  201efa:	4653      	mov	r3, sl
  201efc:	4853      	ldr	r0, [pc, #332]	; (20204c <main+0x90c>)
  201efe:	f000 f937 	bl	202170 <chprintf.constprop.0>
  201f02:	e7cd      	b.n	201ea0 <main+0x760>
  tp->state = CH_STATE_READY;
  201f04:	f882 1020 	strb.w	r1, [r2, #32]
  201f08:	e7fe      	b.n	201f08 <main+0x7c8>
      *msgp = *mbp->rdptr++;
  201f0a:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
  201f0c:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
  201f0e:	1d0a      	adds	r2, r1, #4
  201f10:	f8d1 a000 	ldr.w	sl, [r1]
      if (mbp->rdptr >= mbp->top) {
  201f14:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
  201f16:	60e2      	str	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
  201f18:	d301      	bcc.n	201f1e <main+0x7de>
        mbp->rdptr = mbp->buffer;
  201f1a:	6822      	ldr	r2, [r4, #0]
  201f1c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
  201f1e:	3b01      	subs	r3, #1
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201f20:	4640      	mov	r0, r8
      mbp->cnt--;
  201f22:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
  201f24:	f000 f8b4 	bl	202090 <chThdDequeueNextI.constprop.35>
      chSchRescheduleS();
  201f28:	f7ff f87a 	bl	201020 <chSchRescheduleS>
  201f2c:	e7e1      	b.n	201ef2 <main+0x7b2>
  201f2e:	f386 8811 	msr	BASEPRI, r6
  201f32:	e7b5      	b.n	201ea0 <main+0x760>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
  201f34:	4846      	ldr	r0, [pc, #280]	; (202050 <main+0x910>)
      b = dmaStreamAllocate(adcp->dmastp,
  201f36:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
  201f3a:	6806      	ldr	r6, [r0, #0]
  201f3c:	7a50      	ldrb	r0, [r2, #9]
  201f3e:	4083      	lsls	r3, r0
  201f40:	4233      	tst	r3, r6
  201f42:	d141      	bne.n	201fc8 <main+0x888>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
  201f44:	4333      	orrs	r3, r6
  201f46:	4f42      	ldr	r7, [pc, #264]	; (202050 <main+0x910>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  201f48:	4e42      	ldr	r6, [pc, #264]	; (202054 <main+0x914>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201f4a:	f8df e124 	ldr.w	lr, [pc, #292]	; 202070 <main+0x930>

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  201f4e:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  201f52:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
  201f56:	603b      	str	r3, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201f58:	4f3e      	ldr	r7, [pc, #248]	; (202054 <main+0x914>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  201f5a:	f8c6 b004 	str.w	fp, [r6, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  201f5e:	f847 e030 	str.w	lr, [r7, r0, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  201f62:	d003      	beq.n	201f6c <main+0x82c>
    rccEnableDMA1(false);
  201f64:	6b08      	ldr	r0, [r1, #48]	; 0x30
  201f66:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
  201f6a:	6308      	str	r0, [r1, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
  201f6c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  201f70:	d004      	beq.n	201f7c <main+0x83c>
    rccEnableDMA2(false);
  201f72:	492f      	ldr	r1, [pc, #188]	; (202030 <main+0x8f0>)
  201f74:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  201f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  201f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  201f7c:	6813      	ldr	r3, [r2, #0]
  201f7e:	6819      	ldr	r1, [r3, #0]
  201f80:	f021 011f 	bic.w	r1, r1, #31
  201f84:	6019      	str	r1, [r3, #0]
  201f86:	6819      	ldr	r1, [r3, #0]
  201f88:	f011 0e01 	ands.w	lr, r1, #1
  201f8c:	d1fb      	bne.n	201f86 <main+0x846>
  201f8e:	7a11      	ldrb	r1, [r2, #8]
  201f90:	263d      	movs	r6, #61	; 0x3d
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  201f92:	2021      	movs	r0, #33	; 0x21
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201f94:	4f30      	ldr	r7, [pc, #192]	; (202058 <main+0x918>)
  dmaStreamDisable(dmastp);
  201f96:	408e      	lsls	r6, r1
  201f98:	6851      	ldr	r1, [r2, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201f9a:	f04f 0c01 	mov.w	ip, #1
  201f9e:	600e      	str	r6, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201fa0:	2660      	movs	r6, #96	; 0x60
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  201fa2:	f8c3 e000 	str.w	lr, [r3]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  201fa6:	6158      	str	r0, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  201fa8:	7a92      	ldrb	r2, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201faa:	f002 0e1f 	and.w	lr, r2, #31
  201fae:	0950      	lsrs	r0, r2, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201fb0:	443a      	add	r2, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201fb2:	fa0c f10e 	lsl.w	r1, ip, lr
  201fb6:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201fba:	f882 6300 	strb.w	r6, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201fbe:	f8ce 1180 	str.w	r1, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201fc2:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
  201fc6:	e000      	b.n	201fca <main+0x88a>
  201fc8:	6813      	ldr	r3, [r2, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  201fca:	4a24      	ldr	r2, [pc, #144]	; (20205c <main+0x91c>)
    adcp->adc->CR1 = 0;
  201fcc:	2100      	movs	r1, #0
      rccEnableADC1(FALSE);
  201fce:	4f18      	ldr	r7, [pc, #96]	; (202030 <main+0x8f0>)
    adcp->adc->CR2 = ADC_CR2_ADON;
  201fd0:	2601      	movs	r6, #1
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  201fd2:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
  201fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  201fd6:	4822      	ldr	r0, [pc, #136]	; (202060 <main+0x920>)
      rccEnableADC1(FALSE);
  201fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    adcp->adc->CR1 = 0;
  201fdc:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
      rccEnableADC1(FALSE);
  201fe0:	647b      	str	r3, [r7, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  201fe2:	6843      	ldr	r3, [r0, #4]
  201fe4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  201fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201fec:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
  201fee:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
  201ff0:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  201ff2:	6096      	str	r6, [r2, #8]
  201ff4:	e6ef      	b.n	201dd6 <main+0x696>
      rccEnableTIM4(FALSE);
  201ff6:	4a0e      	ldr	r2, [pc, #56]	; (202030 <main+0x8f0>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201ff8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201ffc:	4916      	ldr	r1, [pc, #88]	; (202058 <main+0x918>)
  201ffe:	f04f 0e70 	mov.w	lr, #112	; 0x70
  202002:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202004:	f043 0304 	orr.w	r3, r3, #4
  202008:	6413      	str	r3, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  20200a:	f240 4337 	movw	r3, #1079	; 0x437
      rccResetTIM4();
  20200e:	6a10      	ldr	r0, [r2, #32]
  202010:	f040 0004 	orr.w	r0, r0, #4
  202014:	6210      	str	r0, [r2, #32]
  202016:	6216      	str	r6, [r2, #32]
      gptp->clock = STM32_TIMCLK1;
  202018:	4a12      	ldr	r2, [pc, #72]	; (202064 <main+0x924>)
  20201a:	f881 e31e 	strb.w	lr, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20201e:	f8c1 7180 	str.w	r7, [r1, #384]	; 0x180
  202022:	60aa      	str	r2, [r5, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202024:	600f      	str	r7, [r1, #0]
  202026:	e6bc      	b.n	201da2 <main+0x662>
  202028:	08002710 	.word	0x08002710
  20202c:	0a7c5ac5 	.word	0x0a7c5ac5
  202030:	40023800 	.word	0x40023800
  202034:	40020800 	.word	0x40020800
  202038:	40020000 	.word	0x40020000
  20203c:	080026d0 	.word	0x080026d0
  202040:	20000b3c 	.word	0x20000b3c
  202044:	1c000301 	.word	0x1c000301
  202048:	08002728 	.word	0x08002728
  20204c:	20000b60 	.word	0x20000b60
  202050:	20000b30 	.word	0x20000b30
  202054:	20000ab0 	.word	0x20000ab0
  202058:	e000e100 	.word	0xe000e100
  20205c:	4001204c 	.word	0x4001204c
  202060:	40012300 	.word	0x40012300
  202064:	066ff300 	.word	0x066ff300
  202068:	04000100 	.word	0x04000100
  20206c:	20000bd8 	.word	0x20000bd8
  202070:	00201481 	.word	0x00201481
	...

00202080 <chTMStartMeasurementX.constprop.38>:
  return DWT->CYCCNT;
  202080:	4b01      	ldr	r3, [pc, #4]	; (202088 <chTMStartMeasurementX.constprop.38+0x8>)
  202082:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  202084:	6083      	str	r3, [r0, #8]
  202086:	4770      	bx	lr
  202088:	e0001000 	.word	0xe0001000
  20208c:	00000000 	.word	0x00000000

00202090 <chThdDequeueNextI.constprop.35>:
  return (bool)(tqp->next != (const thread_t *)tqp);
  202090:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  202092:	4290      	cmp	r0, r2
  202094:	d00a      	beq.n	2020ac <chThdDequeueNextI.constprop.35+0x1c>
  202096:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
  202098:	6811      	ldr	r1, [r2, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
  20209a:	4610      	mov	r0, r2
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  20209c:	b410      	push	{r4}
  tp->u.rdymsg = msg;
  20209e:	2400      	movs	r4, #0
  2020a0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2020a2:	604b      	str	r3, [r1, #4]
  2020a4:	6254      	str	r4, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
  2020a6:	bc10      	pop	{r4}
  (void) chSchReadyI(tp);
  2020a8:	f7ff b982 	b.w	2013b0 <chSchReadyI>
  2020ac:	4770      	bx	lr
  2020ae:	bf00      	nop

002020b0 <chEvtBroadcastFlagsI.constprop.34>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2020b2:	4f17      	ldr	r7, [pc, #92]	; (202110 <chEvtBroadcastFlagsI.constprop.34+0x60>)
  2020b4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2020b8:	42bc      	cmp	r4, r7
  2020ba:	d021      	beq.n	202100 <chEvtBroadcastFlagsI.constprop.34+0x50>
  2020bc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2020be:	2600      	movs	r6, #0
  2020c0:	e002      	b.n	2020c8 <chEvtBroadcastFlagsI.constprop.34+0x18>
    elp = elp->next;
  2020c2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2020c4:	42bc      	cmp	r4, r7
  2020c6:	d01b      	beq.n	202100 <chEvtBroadcastFlagsI.constprop.34+0x50>
    elp->flags |= flags;
  2020c8:	68e3      	ldr	r3, [r4, #12]
  2020ca:	432b      	orrs	r3, r5
  2020cc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2020ce:	b115      	cbz	r5, 2020d6 <chEvtBroadcastFlagsI.constprop.34+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2020d0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2020d2:	4213      	tst	r3, r2
  2020d4:	d0f5      	beq.n	2020c2 <chEvtBroadcastFlagsI.constprop.34+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2020d6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2020d8:	68a3      	ldr	r3, [r4, #8]
  2020da:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2020dc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2020e0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2020e2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2020e4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2020e6:	d00c      	beq.n	202102 <chEvtBroadcastFlagsI.constprop.34+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2020e8:	2a0b      	cmp	r2, #11
  2020ea:	d1ea      	bne.n	2020c2 <chEvtBroadcastFlagsI.constprop.34+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2020ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2020ee:	ea32 0303 	bics.w	r3, r2, r3
  2020f2:	d1e6      	bne.n	2020c2 <chEvtBroadcastFlagsI.constprop.34+0x12>
    tp->u.rdymsg = MSG_OK;
  2020f4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2020f6:	f7ff f95b 	bl	2013b0 <chSchReadyI>
    elp = elp->next;
  2020fa:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2020fc:	42bc      	cmp	r4, r7
  2020fe:	d1e3      	bne.n	2020c8 <chEvtBroadcastFlagsI.constprop.34+0x18>
  202100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  202102:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  202104:	4213      	tst	r3, r2
  202106:	d0dc      	beq.n	2020c2 <chEvtBroadcastFlagsI.constprop.34+0x12>
    tp->u.rdymsg = MSG_OK;
  202108:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20210a:	f7ff f951 	bl	2013b0 <chSchReadyI>
  20210e:	e7f4      	b.n	2020fa <chEvtBroadcastFlagsI.constprop.34+0x4a>
  202110:	20000b60 	.word	0x20000b60
	...

00202120 <chMBPostI.constprop.31>:
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
  202120:	b538      	push	{r3, r4, r5, lr}
  if (mbp->reset) {
  202122:	4b10      	ldr	r3, [pc, #64]	; (202164 <chMBPostI.constprop.31+0x44>)
  202124:	7d1a      	ldrb	r2, [r3, #20]
  202126:	b9ba      	cbnz	r2, 202158 <chMBPostI.constprop.31+0x38>
  202128:	681d      	ldr	r5, [r3, #0]
  20212a:	6859      	ldr	r1, [r3, #4]
 */
static inline cnt_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  20212c:	691a      	ldr	r2, [r3, #16]
  return (cnt_t)(mbp->top - mbp->buffer);
  20212e:	1b4c      	subs	r4, r1, r5
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
  202130:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
  if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
  202134:	2a00      	cmp	r2, #0
  202136:	dd12      	ble.n	20215e <chMBPostI.constprop.31+0x3e>
    *mbp->wrptr++ = msg;
  202138:	689c      	ldr	r4, [r3, #8]
  20213a:	1d22      	adds	r2, r4, #4
  20213c:	609a      	str	r2, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
  20213e:	4291      	cmp	r1, r2
    *mbp->wrptr++ = msg;
  202140:	6020      	str	r0, [r4, #0]
    mbp->cnt++;
  202142:	691a      	ldr	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  202144:	4808      	ldr	r0, [pc, #32]	; (202168 <chMBPostI.constprop.31+0x48>)
    mbp->cnt++;
  202146:	f102 0201 	add.w	r2, r2, #1
      mbp->wrptr = mbp->buffer;
  20214a:	bf98      	it	ls
  20214c:	609d      	strls	r5, [r3, #8]
    mbp->cnt++;
  20214e:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
  202150:	f7ff ff9e 	bl	202090 <chThdDequeueNextI.constprop.35>
    return MSG_OK;
  202154:	2000      	movs	r0, #0
  202156:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
  202158:	f06f 0001 	mvn.w	r0, #1
  20215c:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
  20215e:	f04f 30ff 	mov.w	r0, #4294967295
}
  202162:	bd38      	pop	{r3, r4, r5, pc}
  202164:	20000bc0 	.word	0x20000bc0
  202168:	20000be0 	.word	0x20000be0
  20216c:	00000000 	.word	0x00000000

00202170 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  202170:	b40e      	push	{r1, r2, r3}
  202172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202176:	b086      	sub	sp, #24
  int n = 0;
  202178:	2300      	movs	r3, #0
    c = *fmt++;
  20217a:	f04f 0941 	mov.w	r9, #65	; 0x41
  20217e:	f8df a280 	ldr.w	sl, [pc, #640]	; 202400 <chprintf.constprop.0+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  202182:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  202184:	4c9d      	ldr	r4, [pc, #628]	; (2023fc <chprintf.constprop.0+0x28c>)
  int n = 0;
  202186:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  202188:	9502      	str	r5, [sp, #8]
  20218a:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  20218e:	9a00      	ldr	r2, [sp, #0]
  202190:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  202192:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  202196:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  202198:	9901      	ldr	r1, [sp, #4]
  20219a:	689b      	ldr	r3, [r3, #8]
  20219c:	4898      	ldr	r0, [pc, #608]	; (202400 <chprintf.constprop.0+0x290>)
      n++;
  20219e:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  2021a0:	4798      	blx	r3
  2021a2:	7823      	ldrb	r3, [r4, #0]
  2021a4:	9301      	str	r3, [sp, #4]
    if (c == 0)
  2021a6:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  2021a8:	1c74      	adds	r4, r6, #1
    if (c == 0)
  2021aa:	2b00      	cmp	r3, #0
  2021ac:	f000 8120 	beq.w	2023f0 <chprintf.constprop.0+0x280>
    if (c != '%') {
  2021b0:	2b25      	cmp	r3, #37	; 0x25
  2021b2:	d1ec      	bne.n	20218e <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
  2021b4:	7871      	ldrb	r1, [r6, #1]
  2021b6:	292d      	cmp	r1, #45	; 0x2d
  2021b8:	f000 814b 	beq.w	202452 <chprintf.constprop.0+0x2e2>
    left_align = FALSE;
  2021bc:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  2021c0:	2930      	cmp	r1, #48	; 0x30
  2021c2:	f000 8141 	beq.w	202448 <chprintf.constprop.0+0x2d8>
    filler = ' ';
  2021c6:	f04f 0820 	mov.w	r8, #32
  2021ca:	1c62      	adds	r2, r4, #1
    width = 0;
  2021cc:	2400      	movs	r4, #0
  2021ce:	e005      	b.n	2021dc <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  2021d0:	782b      	ldrb	r3, [r5, #0]
  2021d2:	3504      	adds	r5, #4
  2021d4:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  2021d8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  2021dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  2021e0:	4616      	mov	r6, r2
      width = width * 10 + c;
  2021e2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  2021e6:	b2db      	uxtb	r3, r3
  2021e8:	2b09      	cmp	r3, #9
  2021ea:	d9f3      	bls.n	2021d4 <chprintf.constprop.0+0x64>
      else if (c == '*')
  2021ec:	292a      	cmp	r1, #42	; 0x2a
  2021ee:	d0ef      	beq.n	2021d0 <chprintf.constprop.0+0x60>
    if (c == '.') {
  2021f0:	292e      	cmp	r1, #46	; 0x2e
  2021f2:	f04f 0200 	mov.w	r2, #0
  2021f6:	d04a      	beq.n	20228e <chprintf.constprop.0+0x11e>
    if (c == 'l' || c == 'L') {
  2021f8:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2021fc:	2b4c      	cmp	r3, #76	; 0x4c
  2021fe:	d155      	bne.n	2022ac <chprintf.constprop.0+0x13c>
      if (*fmt)
  202200:	7833      	ldrb	r3, [r6, #0]
  202202:	9301      	str	r3, [sp, #4]
  202204:	b11b      	cbz	r3, 20220e <chprintf.constprop.0+0x9e>
        c = *fmt++;
  202206:	4619      	mov	r1, r3
  202208:	3601      	adds	r6, #1
  20220a:	7833      	ldrb	r3, [r6, #0]
  20220c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20220e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  202212:	2b34      	cmp	r3, #52	; 0x34
  202214:	f200 810c 	bhi.w	202430 <chprintf.constprop.0+0x2c0>
  202218:	e8df f013 	tbh	[pc, r3, lsl #1]
  20221c:	010a018f 	.word	0x010a018f
  202220:	010a010a 	.word	0x010a010a
  202224:	018f010a 	.word	0x018f010a
  202228:	010a010a 	.word	0x010a010a
  20222c:	010a010a 	.word	0x010a010a
  202230:	014d010a 	.word	0x014d010a
  202234:	010a010a 	.word	0x010a010a
  202238:	010a010a 	.word	0x010a010a
  20223c:	0152010a 	.word	0x0152010a
  202240:	010a010a 	.word	0x010a010a
  202244:	010a0187 	.word	0x010a0187
  202248:	010a010a 	.word	0x010a010a
  20224c:	010a010a 	.word	0x010a010a
  202250:	010a010a 	.word	0x010a010a
  202254:	010a010a 	.word	0x010a010a
  202258:	00f6010a 	.word	0x00f6010a
  20225c:	010a018f 	.word	0x010a018f
  202260:	010a010a 	.word	0x010a010a
  202264:	018f010a 	.word	0x018f010a
  202268:	010a010a 	.word	0x010a010a
  20226c:	010a010a 	.word	0x010a010a
  202270:	014d010a 	.word	0x014d010a
  202274:	010a010a 	.word	0x010a010a
  202278:	0089010a 	.word	0x0089010a
  20227c:	0152010a 	.word	0x0152010a
  202280:	010a010a 	.word	0x010a010a
  202284:	0187      	.short	0x0187
          c = va_arg(ap, int);
  202286:	782b      	ldrb	r3, [r5, #0]
  202288:	3504      	adds	r5, #4
        precision += c;
  20228a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20228e:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  202292:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  202296:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  20229a:	b2db      	uxtb	r3, r3
  20229c:	2b09      	cmp	r3, #9
  20229e:	d9f4      	bls.n	20228a <chprintf.constprop.0+0x11a>
        else if (c == '*')
  2022a0:	292a      	cmp	r1, #42	; 0x2a
  2022a2:	d0f0      	beq.n	202286 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
  2022a4:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2022a8:	2b4c      	cmp	r3, #76	; 0x4c
  2022aa:	d0a9      	beq.n	202200 <chprintf.constprop.0+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  2022ac:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  2022b0:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  2022b4:	b2db      	uxtb	r3, r3
    switch (c) {
  2022b6:	2834      	cmp	r0, #52	; 0x34
  2022b8:	f200 80b8 	bhi.w	20242c <chprintf.constprop.0+0x2bc>
  2022bc:	e8df f010 	tbh	[pc, r0, lsl #1]
  2022c0:	00b6010a 	.word	0x00b6010a
  2022c4:	00b600b6 	.word	0x00b600b6
  2022c8:	010a00b6 	.word	0x010a00b6
  2022cc:	00b600b6 	.word	0x00b600b6
  2022d0:	00b600b6 	.word	0x00b600b6
  2022d4:	010300b6 	.word	0x010300b6
  2022d8:	00b600b6 	.word	0x00b600b6
  2022dc:	00b600b6 	.word	0x00b600b6
  2022e0:	00ce00b6 	.word	0x00ce00b6
  2022e4:	00b600b6 	.word	0x00b600b6
  2022e8:	00b60138 	.word	0x00b60138
  2022ec:	00b600b6 	.word	0x00b600b6
  2022f0:	00b600b6 	.word	0x00b600b6
  2022f4:	00b600b6 	.word	0x00b600b6
  2022f8:	00b600b6 	.word	0x00b600b6
  2022fc:	00a200b6 	.word	0x00a200b6
  202300:	00b6010a 	.word	0x00b6010a
  202304:	00b600b6 	.word	0x00b600b6
  202308:	010a00b6 	.word	0x010a00b6
  20230c:	00b600b6 	.word	0x00b600b6
  202310:	00b600b6 	.word	0x00b600b6
  202314:	010300b6 	.word	0x010300b6
  202318:	00b600b6 	.word	0x00b600b6
  20231c:	003500b6 	.word	0x003500b6
  202320:	00ce00b6 	.word	0x00ce00b6
  202324:	00b600b6 	.word	0x00b600b6
  202328:	0138      	.short	0x0138
  20232a:	7833      	ldrb	r3, [r6, #0]
  20232c:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  20232e:	682f      	ldr	r7, [r5, #0]
  202330:	3504      	adds	r5, #4
  202332:	2f00      	cmp	r7, #0
  202334:	f000 8111 	beq.w	20255a <chprintf.constprop.0+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  202338:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  20233a:	2a00      	cmp	r2, #0
  20233c:	f040 810a 	bne.w	202554 <chprintf.constprop.0+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  202340:	2b00      	cmp	r3, #0
  202342:	f000 811c 	beq.w	20257e <chprintf.constprop.0+0x40e>
  202346:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  20234a:	463a      	mov	r2, r7
  20234c:	e001      	b.n	202352 <chprintf.constprop.0+0x1e2>
  20234e:	3b01      	subs	r3, #1
  202350:	d403      	bmi.n	20235a <chprintf.constprop.0+0x1ea>
  202352:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  202356:	2900      	cmp	r1, #0
  202358:	d1f9      	bne.n	20234e <chprintf.constprop.0+0x1de>
  20235a:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  20235c:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  202360:	1aa4      	subs	r4, r4, r2
  202362:	f102 39ff 	add.w	r9, r2, #4294967295
  202366:	d45b      	bmi.n	202420 <chprintf.constprop.0+0x2b0>
    if (left_align == FALSE)
  202368:	f1bc 0f00 	cmp.w	ip, #0
  20236c:	d168      	bne.n	202440 <chprintf.constprop.0+0x2d0>
  20236e:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  202372:	2c00      	cmp	r4, #0
  202374:	d063      	beq.n	20243e <chprintf.constprop.0+0x2ce>
      if (*s == '-' && filler == '0') {
  202376:	783b      	ldrb	r3, [r7, #0]
  202378:	2b2d      	cmp	r3, #45	; 0x2d
  20237a:	d103      	bne.n	202384 <chprintf.constprop.0+0x214>
  20237c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  202380:	f000 80f0 	beq.w	202564 <chprintf.constprop.0+0x3f4>
        streamPut(chp, (uint8_t)filler);
  202384:	f8da 3000 	ldr.w	r3, [sl]
  202388:	4641      	mov	r1, r8
  20238a:	4650      	mov	r0, sl
  20238c:	689b      	ldr	r3, [r3, #8]
  20238e:	4798      	blx	r3
      } while (++width != 0);
  202390:	f11b 0b01 	adds.w	fp, fp, #1
  202394:	d1f6      	bne.n	202384 <chprintf.constprop.0+0x214>
  202396:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  202398:	f1b9 0f00 	cmp.w	r9, #0
  20239c:	4423      	add	r3, r4
  20239e:	9300      	str	r3, [sp, #0]
  2023a0:	f6ff af01 	blt.w	2021a6 <chprintf.constprop.0+0x36>
  2023a4:	465c      	mov	r4, fp
  2023a6:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  2023a8:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  2023ac:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  2023b0:	f817 1b01 	ldrb.w	r1, [r7], #1
  2023b4:	4650      	mov	r0, sl
  2023b6:	689b      	ldr	r3, [r3, #8]
  2023b8:	4798      	blx	r3
    while (--i >= 0) {
  2023ba:	f1bb 3fff 	cmp.w	fp, #4294967295
  2023be:	d1f3      	bne.n	2023a8 <chprintf.constprop.0+0x238>
  2023c0:	9b00      	ldr	r3, [sp, #0]
  2023c2:	3301      	adds	r3, #1
  2023c4:	444b      	add	r3, r9
  2023c6:	9300      	str	r3, [sp, #0]
    while (width) {
  2023c8:	2c00      	cmp	r4, #0
  2023ca:	f43f aeec 	beq.w	2021a6 <chprintf.constprop.0+0x36>
  2023ce:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  2023d0:	f8da 3000 	ldr.w	r3, [sl]
  2023d4:	4641      	mov	r1, r8
  2023d6:	4650      	mov	r0, sl
  2023d8:	689b      	ldr	r3, [r3, #8]
  2023da:	4798      	blx	r3
    while (width) {
  2023dc:	3f01      	subs	r7, #1
  2023de:	d1f7      	bne.n	2023d0 <chprintf.constprop.0+0x260>
  2023e0:	9b00      	ldr	r3, [sp, #0]
  2023e2:	4423      	add	r3, r4
    c = *fmt++;
  2023e4:	1c74      	adds	r4, r6, #1
  2023e6:	9300      	str	r3, [sp, #0]
    if (c == 0)
  2023e8:	9b01      	ldr	r3, [sp, #4]
  2023ea:	2b00      	cmp	r3, #0
  2023ec:	f47f aee0 	bne.w	2021b0 <chprintf.constprop.0+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  2023f0:	9800      	ldr	r0, [sp, #0]
  2023f2:	b006      	add	sp, #24
  2023f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2023f8:	b003      	add	sp, #12
  2023fa:	4770      	bx	lr
  2023fc:	08002729 	.word	0x08002729
  202400:	20000b60 	.word	0x20000b60
  202404:	7833      	ldrb	r3, [r6, #0]
  202406:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  202408:	682b      	ldr	r3, [r5, #0]
  20240a:	af06      	add	r7, sp, #24
  20240c:	3504      	adds	r5, #4
  20240e:	f04f 0900 	mov.w	r9, #0
  202412:	2201      	movs	r2, #1
      filler = ' ';
  202414:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  202418:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  20241c:	1aa4      	subs	r4, r4, r2
  20241e:	d5a3      	bpl.n	202368 <chprintf.constprop.0+0x1f8>
    while (--i >= 0) {
  202420:	f1b9 0f00 	cmp.w	r9, #0
  202424:	f6ff aebf 	blt.w	2021a6 <chprintf.constprop.0+0x36>
      width = 0;
  202428:	2400      	movs	r4, #0
  20242a:	e7bc      	b.n	2023a6 <chprintf.constprop.0+0x236>
  20242c:	7833      	ldrb	r3, [r6, #0]
  20242e:	9301      	str	r3, [sp, #4]
      *p++ = c;
  202430:	af06      	add	r7, sp, #24
  202432:	f04f 0900 	mov.w	r9, #0
  202436:	2201      	movs	r2, #1
  202438:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  20243c:	e7ee      	b.n	20241c <chprintf.constprop.0+0x2ac>
    if (width < 0) {
  20243e:	465c      	mov	r4, fp
    while (--i >= 0) {
  202440:	f1b9 0f00 	cmp.w	r9, #0
  202444:	daaf      	bge.n	2023a6 <chprintf.constprop.0+0x236>
  202446:	e7bf      	b.n	2023c8 <chprintf.constprop.0+0x258>
  202448:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  20244a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  20244e:	3401      	adds	r4, #1
  202450:	e6bb      	b.n	2021ca <chprintf.constprop.0+0x5a>
      fmt++;
  202452:	1cb4      	adds	r4, r6, #2
  202454:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  202456:	f04f 0c01 	mov.w	ip, #1
  20245a:	e6b1      	b.n	2021c0 <chprintf.constprop.0+0x50>
    switch (c) {
  20245c:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  202460:	2b19      	cmp	r3, #25
  202462:	d934      	bls.n	2024ce <chprintf.constprop.0+0x35e>
        l = va_arg(ap, unsigned int);
  202464:	682f      	ldr	r7, [r5, #0]
  202466:	3504      	adds	r5, #4
  202468:	7833      	ldrb	r3, [r6, #0]
  20246a:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  20246c:	f10d 0117 	add.w	r1, sp, #23
  202470:	e000      	b.n	202474 <chprintf.constprop.0+0x304>
  } while ((ll /= radix) != 0);
  202472:	4601      	mov	r1, r0
    *--q = i;
  202474:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  202476:	fbb7 f2fe 	udiv	r2, r7, lr
  20247a:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  20247e:	4617      	mov	r7, r2
    i += '0';
  202480:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  202484:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  202486:	bfc8      	it	gt
  202488:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  20248c:	b2db      	uxtb	r3, r3
  20248e:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  202492:	2a00      	cmp	r2, #0
  202494:	d1ed      	bne.n	202472 <chprintf.constprop.0+0x302>
  i = (int)(p + MAX_FILLER - q);
  202496:	f10d 0217 	add.w	r2, sp, #23
  20249a:	af03      	add	r7, sp, #12
  20249c:	1a12      	subs	r2, r2, r0
  20249e:	46be      	mov	lr, r7
  2024a0:	4410      	add	r0, r2
  2024a2:	e001      	b.n	2024a8 <chprintf.constprop.0+0x338>
  2024a4:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  2024a8:	4288      	cmp	r0, r1
    *p++ = *q++;
  2024aa:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  2024ae:	d1f9      	bne.n	2024a4 <chprintf.constprop.0+0x334>
  2024b0:	f102 39ff 	add.w	r9, r2, #4294967295
  2024b4:	e7b2      	b.n	20241c <chprintf.constprop.0+0x2ac>
    switch (c) {
  2024b6:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  2024ba:	682f      	ldr	r7, [r5, #0]
  2024bc:	3504      	adds	r5, #4
  2024be:	e7d5      	b.n	20246c <chprintf.constprop.0+0x2fc>
    switch (c) {
  2024c0:	f04f 0e0a 	mov.w	lr, #10
  2024c4:	e7f9      	b.n	2024ba <chprintf.constprop.0+0x34a>
      if (is_long)
  2024c6:	2b19      	cmp	r3, #25
    switch (c) {
  2024c8:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  2024cc:	d8ca      	bhi.n	202464 <chprintf.constprop.0+0x2f4>
  2024ce:	7833      	ldrb	r3, [r6, #0]
  2024d0:	9301      	str	r3, [sp, #4]
  2024d2:	e7f2      	b.n	2024ba <chprintf.constprop.0+0x34a>
      if (is_long)
  2024d4:	2b19      	cmp	r3, #25
  2024d6:	d92e      	bls.n	202536 <chprintf.constprop.0+0x3c6>
        l = va_arg(ap, int);
  2024d8:	6829      	ldr	r1, [r5, #0]
  2024da:	3504      	adds	r5, #4
  2024dc:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  2024de:	2900      	cmp	r1, #0
  2024e0:	9301      	str	r3, [sp, #4]
  2024e2:	db2e      	blt.n	202542 <chprintf.constprop.0+0x3d2>
    p = tmpbuf;
  2024e4:	af03      	add	r7, sp, #12
  2024e6:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  2024e8:	f102 0b0b 	add.w	fp, r2, #11
  2024ec:	4658      	mov	r0, fp
    i = (int)(l % radix);
  2024ee:	4b26      	ldr	r3, [pc, #152]	; (202588 <chprintf.constprop.0+0x418>)
  2024f0:	fba3 e301 	umull	lr, r3, r3, r1
  2024f4:	08db      	lsrs	r3, r3, #3
  2024f6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  2024fa:	469e      	mov	lr, r3
  2024fc:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  202500:	4671      	mov	r1, lr
    i += '0';
  202502:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  202504:	b2db      	uxtb	r3, r3
  202506:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  20250a:	2900      	cmp	r1, #0
  20250c:	d1ef      	bne.n	2024ee <chprintf.constprop.0+0x37e>
  i = (int)(p + MAX_FILLER - q);
  20250e:	ebab 0100 	sub.w	r1, fp, r0
  202512:	4411      	add	r1, r2
  202514:	e001      	b.n	20251a <chprintf.constprop.0+0x3aa>
  202516:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  20251a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  20251e:	428a      	cmp	r2, r1
  202520:	d1f9      	bne.n	202516 <chprintf.constprop.0+0x3a6>
  202522:	1bd2      	subs	r2, r2, r7
  202524:	f102 39ff 	add.w	r9, r2, #4294967295
  202528:	e778      	b.n	20241c <chprintf.constprop.0+0x2ac>
    switch (c) {
  20252a:	f04f 0e10 	mov.w	lr, #16
  20252e:	e7c4      	b.n	2024ba <chprintf.constprop.0+0x34a>
  202530:	f04f 0e10 	mov.w	lr, #16
  202534:	e794      	b.n	202460 <chprintf.constprop.0+0x2f0>
  202536:	7833      	ldrb	r3, [r6, #0]
  202538:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  20253a:	6829      	ldr	r1, [r5, #0]
  20253c:	3504      	adds	r5, #4
      if (l < 0) {
  20253e:	2900      	cmp	r1, #0
  202540:	dad0      	bge.n	2024e4 <chprintf.constprop.0+0x374>
        *p++ = '-';
  202542:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  202546:	4249      	negs	r1, r1
        *p++ = '-';
  202548:	f10d 020d 	add.w	r2, sp, #13
  20254c:	af03      	add	r7, sp, #12
  20254e:	f88d 300c 	strb.w	r3, [sp, #12]
  202552:	e7c9      	b.n	2024e8 <chprintf.constprop.0+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  202554:	b19b      	cbz	r3, 20257e <chprintf.constprop.0+0x40e>
  202556:	1e53      	subs	r3, r2, #1
  202558:	e6f7      	b.n	20234a <chprintf.constprop.0+0x1da>
      if (precision == 0)
  20255a:	b90a      	cbnz	r2, 202560 <chprintf.constprop.0+0x3f0>
        precision = 32767;
  20255c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  202560:	4f0a      	ldr	r7, [pc, #40]	; (20258c <chprintf.constprop.0+0x41c>)
  202562:	e7f8      	b.n	202556 <chprintf.constprop.0+0x3e6>
        n++;
  202564:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  202566:	212d      	movs	r1, #45	; 0x2d
  202568:	f8da 3000 	ldr.w	r3, [sl]
  20256c:	4650      	mov	r0, sl
        n++;
  20256e:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  202570:	3701      	adds	r7, #1
  202572:	689b      	ldr	r3, [r3, #8]
  202574:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  202578:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  20257a:	4798      	blx	r3
  20257c:	e702      	b.n	202384 <chprintf.constprop.0+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  20257e:	f04f 39ff 	mov.w	r9, #4294967295
  202582:	f04f 0820 	mov.w	r8, #32
  202586:	e6ef      	b.n	202368 <chprintf.constprop.0+0x1f8>
  202588:	cccccccd 	.word	0xcccccccd
  20258c:	0800275c 	.word	0x0800275c
